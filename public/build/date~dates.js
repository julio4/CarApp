(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["date~dates"],{

/***/ "./assets/lib/date-picker.js":
/*!***********************************!*\
  !*** ./assets/lib/date-picker.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.symbol */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.symbol.to-string-tag */ "./node_modules/core-js/modules/es.symbol.to-string-tag.js");

__webpack_require__(/*! core-js/modules/es.array.concat */ "./node_modules/core-js/modules/es.array.concat.js");

__webpack_require__(/*! core-js/modules/es.array.filter */ "./node_modules/core-js/modules/es.array.filter.js");

__webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/es.array.index-of */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.join */ "./node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! core-js/modules/es.array.map */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.array.reverse */ "./node_modules/core-js/modules/es.array.reverse.js");

__webpack_require__(/*! core-js/modules/es.array.slice */ "./node_modules/core-js/modules/es.array.slice.js");

__webpack_require__(/*! core-js/modules/es.date.to-string */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.function.bind */ "./node_modules/core-js/modules/es.function.bind.js");

__webpack_require__(/*! core-js/modules/es.json.to-string-tag */ "./node_modules/core-js/modules/es.json.to-string-tag.js");

__webpack_require__(/*! core-js/modules/es.math.to-string-tag */ "./node_modules/core-js/modules/es.math.to-string-tag.js");

__webpack_require__(/*! core-js/modules/es.number.constructor */ "./node_modules/core-js/modules/es.number.constructor.js");

__webpack_require__(/*! core-js/modules/es.object.assign */ "./node_modules/core-js/modules/es.object.assign.js");

__webpack_require__(/*! core-js/modules/es.object.create */ "./node_modules/core-js/modules/es.object.create.js");

__webpack_require__(/*! core-js/modules/es.object.define-property */ "./node_modules/core-js/modules/es.object.define-property.js");

__webpack_require__(/*! core-js/modules/es.object.entries */ "./node_modules/core-js/modules/es.object.entries.js");

__webpack_require__(/*! core-js/modules/es.object.keys */ "./node_modules/core-js/modules/es.object.keys.js");

__webpack_require__(/*! core-js/modules/es.object.set-prototype-of */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");

__webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.regexp.constructor */ "./node_modules/core-js/modules/es.regexp.constructor.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/es.string.split */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/es.string.starts-with */ "./node_modules/core-js/modules/es.string.starts-with.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 *
 *     Litepicker v1.5.7 (https://github.com/wakirin/Litepicker)
 *     Package: litepicker (https://www.npmjs.com/package/litepicker)
 *     License: MIT (https://github.com/wakirin/Litepicker/blob/master/LICENCE.md)
 *     Copyright 2019-2020 Rinat G.
 *
 *     Hash: 85b7ce11883a11b98abb
 *     Generated on: 1592979305748
 *
 */
!function (t, e) {
  "object" == ( false ? undefined : _typeof(exports)) && "object" == ( false ? undefined : _typeof(module)) ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(window, function () {
  return function (t) {
    var e = {};

    function i(o) {
      if (e[o]) return e[o].exports;
      var n = e[o] = {
        i: o,
        l: !1,
        exports: {}
      };
      return t[o].call(n.exports, n, n.exports, i), n.l = !0, n.exports;
    }

    return i.m = t, i.c = e, i.d = function (t, e, o) {
      i.o(t, e) || Object.defineProperty(t, e, {
        enumerable: !0,
        get: o
      });
    }, i.r = function (t) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(t, "__esModule", {
        value: !0
      });
    }, i.t = function (t, e) {
      if (1 & e && (t = i(t)), 8 & e) return t;
      if (4 & e && "object" == _typeof(t) && t && t.__esModule) return t;
      var o = Object.create(null);
      if (i.r(o), Object.defineProperty(o, "default", {
        enumerable: !0,
        value: t
      }), 2 & e && "string" != typeof t) for (var n in t) {
        i.d(o, n, function (e) {
          return t[e];
        }.bind(null, n));
      }
      return o;
    }, i.n = function (t) {
      var e = t && t.__esModule ? function () {
        return t["default"];
      } : function () {
        return t;
      };
      return i.d(e, "a", e), e;
    }, i.o = function (t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    }, i.p = "", i(i.s = 4);
  }([function (t, e, i) {
    "use strict";

    Object.defineProperty(e, "__esModule", {
      value: !0
    });

    var o = function () {
      function t(e, i, o) {
        void 0 === e && (e = null), void 0 === i && (i = null), void 0 === o && (o = "en-US"), this.dateInstance = i ? t.parseDateTime(e, i, o) : e ? t.parseDateTime(e) : t.parseDateTime(new Date()), this.lang = o;
      }

      return t.parseDateTime = function (e, i, o) {
        if (void 0 === i && (i = "YYYY-MM-DD"), void 0 === o && (o = "en-US"), !e) return new Date(NaN);
        if (e instanceof Date) return new Date(e);
        if (e instanceof t) return e.clone().getDateInstance();
        if (/^-?\d{10,}$/.test(e)) return t.getDateZeroTime(new Date(Number(e)));

        if ("string" == typeof e) {
          for (var n = [], s = null; null != (s = t.regex.exec(i));) {
            "\\" !== s[1] && n.push(s);
          }

          if (n.length) {
            var r = {
              year: null,
              month: null,
              shortMonth: null,
              longMonth: null,
              day: null,
              value: ""
            };
            n[0].index > 0 && (r.value += ".*?");

            for (var a = 0, l = Object.entries(n); a < l.length; a++) {
              var p = l[a],
                  c = p[0],
                  h = p[1],
                  d = Number(c),
                  u = t.formatPatterns(h[0], o),
                  m = u.group,
                  f = u.pattern;
              r[m] = d + 1, r.value += f, r.value += ".*?";
            }

            var g = new RegExp("^" + r.value + "$");

            if (g.test(e)) {
              var y = g.exec(e),
                  k = Number(y[r.year]),
                  v = null;
              r.month ? v = Number(y[r.month]) - 1 : r.shortMonth ? v = t.shortMonths(o).indexOf(y[r.shortMonth]) : r.longMonth && (v = t.longMonths(o).indexOf(y[r.longMonth]));
              var D = Number(y[r.day]) || 1;
              return new Date(k, v, D, 0, 0, 0, 0);
            }
          }
        }

        return t.getDateZeroTime(new Date(e));
      }, t.convertArray = function (e, i) {
        return e.map(function (e) {
          return e instanceof Array ? e.map(function (e) {
            return new t(e, i);
          }) : new t(e, i);
        });
      }, t.getDateZeroTime = function (t) {
        return new Date(t.getFullYear(), t.getMonth(), t.getDate(), 0, 0, 0, 0);
      }, t.shortMonths = function (e) {
        return t.MONTH_JS.map(function (t) {
          return new Date(2019, t).toLocaleString(e, {
            month: "short"
          });
        });
      }, t.longMonths = function (e) {
        return t.MONTH_JS.map(function (t) {
          return new Date(2019, t).toLocaleString(e, {
            month: "long"
          });
        });
      }, t.formatPatterns = function (e, i) {
        switch (e) {
          case "YY":
          case "YYYY":
            return {
              group: "year",
              pattern: "(\\d{" + e.length + "})"
            };

          case "M":
            return {
              group: "month",
              pattern: "(\\d{1,2})"
            };

          case "MM":
            return {
              group: "month",
              pattern: "(\\d{2})"
            };

          case "MMM":
            return {
              group: "shortMonth",
              pattern: "(" + t.shortMonths(i).join("|") + ")"
            };

          case "MMMM":
            return {
              group: "longMonth",
              pattern: "(" + t.longMonths(i).join("|") + ")"
            };

          case "D":
            return {
              group: "day",
              pattern: "(\\d{1,2})"
            };

          case "DD":
            return {
              group: "day",
              pattern: "(\\d{2})"
            };
        }
      }, t.prototype.getDateInstance = function () {
        return this.dateInstance;
      }, t.prototype.toLocaleString = function (t, e) {
        return this.dateInstance.toLocaleString(t, e);
      }, t.prototype.toDateString = function () {
        return this.dateInstance.toDateString();
      }, t.prototype.getSeconds = function () {
        return this.dateInstance.getSeconds();
      }, t.prototype.getDay = function () {
        return this.dateInstance.getDay();
      }, t.prototype.getTime = function () {
        return this.dateInstance.getTime();
      }, t.prototype.getDate = function () {
        return this.dateInstance.getDate();
      }, t.prototype.getMonth = function () {
        return this.dateInstance.getMonth();
      }, t.prototype.getFullYear = function () {
        return this.dateInstance.getFullYear();
      }, t.prototype.setMonth = function (t) {
        return this.dateInstance.setMonth(t);
      }, t.prototype.setHours = function (t, e, i, o) {
        void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === i && (i = 0), void 0 === o && (o = 0), this.dateInstance.setHours(t, e, i, o);
      }, t.prototype.setSeconds = function (t) {
        return this.dateInstance.setSeconds(t);
      }, t.prototype.setDate = function (t) {
        return this.dateInstance.setDate(t);
      }, t.prototype.setFullYear = function (t) {
        return this.dateInstance.setFullYear(t);
      }, t.prototype.getWeek = function (t) {
        var e = new Date(this.timestamp()),
            i = (this.getDay() + (7 - t)) % 7;
        e.setDate(e.getDate() - i);
        var o = e.getTime();
        return e.setMonth(0, 1), e.getDay() !== t && e.setMonth(0, 1 + (4 - e.getDay() + 7) % 7), 1 + Math.ceil((o - e.getTime()) / 6048e5);
      }, t.prototype.clone = function () {
        return new t(this.getDateInstance());
      }, t.prototype.isBetween = function (t, e, i) {
        switch (void 0 === i && (i = "()"), i) {
          default:
          case "()":
            return this.timestamp() > t.getTime() && this.timestamp() < e.getTime();

          case "[)":
            return this.timestamp() >= t.getTime() && this.timestamp() < e.getTime();

          case "(]":
            return this.timestamp() > t.getTime() && this.timestamp() <= e.getTime();

          case "[]":
            return this.timestamp() >= t.getTime() && this.timestamp() <= e.getTime();
        }
      }, t.prototype.isBefore = function (t, e) {
        switch (void 0 === e && (e = "seconds"), e) {
          case "second":
          case "seconds":
            return t.getTime() > this.getTime();

          case "day":
          case "days":
            return new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime() > new Date(this.getFullYear(), this.getMonth(), this.getDate()).getTime();

          case "month":
          case "months":
            return new Date(t.getFullYear(), t.getMonth(), 1).getTime() > new Date(this.getFullYear(), this.getMonth(), 1).getTime();

          case "year":
          case "years":
            return t.getFullYear() > this.getFullYear();
        }

        throw new Error("isBefore: Invalid unit!");
      }, t.prototype.isSameOrBefore = function (t, e) {
        switch (void 0 === e && (e = "seconds"), e) {
          case "second":
          case "seconds":
            return t.getTime() >= this.getTime();

          case "day":
          case "days":
            return new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime() >= new Date(this.getFullYear(), this.getMonth(), this.getDate()).getTime();

          case "month":
          case "months":
            return new Date(t.getFullYear(), t.getMonth(), 1).getTime() >= new Date(this.getFullYear(), this.getMonth(), 1).getTime();
        }

        throw new Error("isSameOrBefore: Invalid unit!");
      }, t.prototype.isAfter = function (t, e) {
        switch (void 0 === e && (e = "seconds"), e) {
          case "second":
          case "seconds":
            return this.getTime() > t.getTime();

          case "day":
          case "days":
            return new Date(this.getFullYear(), this.getMonth(), this.getDate()).getTime() > new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime();

          case "month":
          case "months":
            return new Date(this.getFullYear(), this.getMonth(), 1).getTime() > new Date(t.getFullYear(), t.getMonth(), 1).getTime();

          case "year":
          case "years":
            return this.getFullYear() > t.getFullYear();
        }

        throw new Error("isAfter: Invalid unit!");
      }, t.prototype.isSameOrAfter = function (t, e) {
        switch (void 0 === e && (e = "seconds"), e) {
          case "second":
          case "seconds":
            return this.getTime() >= t.getTime();

          case "day":
          case "days":
            return new Date(this.getFullYear(), this.getMonth(), this.getDate()).getTime() >= new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime();

          case "month":
          case "months":
            return new Date(this.getFullYear(), this.getMonth(), 1).getTime() >= new Date(t.getFullYear(), t.getMonth(), 1).getTime();
        }

        throw new Error("isSameOrAfter: Invalid unit!");
      }, t.prototype.isSame = function (t, e) {
        switch (void 0 === e && (e = "seconds"), e) {
          case "second":
          case "seconds":
            return this.getTime() === t.getTime();

          case "day":
          case "days":
            return new Date(this.getFullYear(), this.getMonth(), this.getDate()).getTime() === new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime();

          case "month":
          case "months":
            return new Date(this.getFullYear(), this.getMonth(), 1).getTime() === new Date(t.getFullYear(), t.getMonth(), 1).getTime();
        }

        throw new Error("isSame: Invalid unit!");
      }, t.prototype.add = function (t, e) {
        switch (void 0 === e && (e = "seconds"), e) {
          case "second":
          case "seconds":
            this.setSeconds(this.getSeconds() + t);
            break;

          case "day":
          case "days":
            this.setDate(this.getDate() + t);
            break;

          case "month":
          case "months":
            this.setMonth(this.getMonth() + t);
        }

        return this;
      }, t.prototype.subtract = function (t, e) {
        switch (void 0 === e && (e = "seconds"), e) {
          case "second":
          case "seconds":
            this.setSeconds(this.getSeconds() - t);
            break;

          case "day":
          case "days":
            this.setDate(this.getDate() - t);
            break;

          case "month":
          case "months":
            this.setMonth(this.getMonth() - t);
        }

        return this;
      }, t.prototype.diff = function (t, e) {
        void 0 === e && (e = "seconds");

        switch (e) {
          default:
          case "second":
          case "seconds":
            return this.getTime() - t.getTime();

          case "day":
          case "days":
            return Math.round((this.timestamp() - t.getTime()) / 864e5);

          case "month":
          case "months":
        }
      }, t.prototype.format = function (e, i) {
        void 0 === i && (i = "en-US");

        for (var o = "", n = [], s = null; null != (s = t.regex.exec(e));) {
          "\\" !== s[1] && n.push(s);
        }

        if (n.length) {
          n[0].index > 0 && (o += e.substring(0, n[0].index));

          for (var r = 0, a = Object.entries(n); r < a.length; r++) {
            var l = a[r],
                p = l[0],
                c = l[1],
                h = Number(p);
            o += this.formatTokens(c[0], i), n[h + 1] && (o += e.substring(c.index + c[0].length, n[h + 1].index)), h === n.length - 1 && (o += e.substring(c.index + c[0].length));
          }
        }

        return o.replace(/\\/g, "");
      }, t.prototype.timestamp = function () {
        return new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0, 0).getTime();
      }, t.prototype.formatTokens = function (e, i) {
        switch (e) {
          case "YY":
            return String(this.getFullYear()).slice(-2);

          case "YYYY":
            return String(this.getFullYear());

          case "M":
            return String(this.getMonth() + 1);

          case "MM":
            return ("0" + (this.getMonth() + 1)).slice(-2);

          case "MMM":
            return t.shortMonths(i)[this.getMonth()];

          case "MMMM":
            return t.longMonths(i)[this.getMonth()];

          case "D":
            return String(this.getDate());

          case "DD":
            return ("0" + this.getDate()).slice(-2);

          default:
            return "";
        }
      }, t.regex = /(\\)?(Y{2,4}|M{1,4}|D{1,2}|d{1,4})/g, t.MONTH_JS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], t;
    }();

    e.DateTime = o;
  }, function (t, e, i) {
    var o = i(6);
    "string" == typeof o && (o = [[t.i, o, ""]]);
    var n = {
      insert: function insert(t) {
        var e = document.querySelector("head"),
            i = window._lastElementInsertedByStyleLoader;
        window.disableLitepickerStyles || (i ? i.nextSibling ? e.insertBefore(t, i.nextSibling) : e.appendChild(t) : e.insertBefore(t, e.firstChild), window._lastElementInsertedByStyleLoader = t);
      },
      singleton: !1
    };
    i(8)(o, n);
    o.locals && (t.exports = o.locals);
  }, function (t, e, i) {
    "use strict";

    function o() {
      return window.matchMedia("(orientation: portrait)").matches ? "portrait" : "landscape";
    }

    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.isMobile = function () {
      var t = "portrait" === o();
      return window.matchMedia("(max-device-" + (t ? "width" : "height") + ": 480px)").matches;
    }, e.getOrientation = o, e.findNestedMonthItem = function (t) {
      for (var e = t.parentNode.childNodes, i = 0; i < e.length; i += 1) {
        if (e.item(i) === t) return i;
      }

      return 0;
    };
  }, function (t, e, i) {
    "use strict";

    var _o,
        n = this && this.__extends || (_o = function o(t, e) {
      return (_o = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (t, e) {
        t.__proto__ = e;
      } || function (t, e) {
        for (var i in e) {
          e.hasOwnProperty(i) && (t[i] = e[i]);
        }
      })(t, e);
    }, function (t, e) {
      function i() {
        this.constructor = t;
      }

      _o(t, e), t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype, new i());
    }),
        s = this && this.__assign || function () {
      return (s = Object.assign || function (t) {
        for (var e, i = 1, o = arguments.length; i < o; i++) {
          for (var n in e = arguments[i]) {
            Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
          }
        }

        return t;
      }).apply(this, arguments);
    },
        r = this && this.__importStar || function (t) {
      if (t && t.__esModule) return t;
      var e = {};
      if (null != t) for (var i in t) {
        Object.hasOwnProperty.call(t, i) && (e[i] = t[i]);
      }
      return e["default"] = t, e;
    };

    Object.defineProperty(e, "__esModule", {
      value: !0
    });

    var a = i(5),
        l = i(0),
        p = r(i(1)),
        c = i(2),
        h = function (t) {
      function e(e) {
        var i = t.call(this) || this;
        i.options = s(s({}, i.options), e.element.dataset), Object.keys(i.options).forEach(function (t) {
          "true" !== i.options[t] && "false" !== i.options[t] || (i.options[t] = "true" === i.options[t]);
        });
        var o = s(s({}, i.options.dropdowns), e.dropdowns),
            n = s(s({}, i.options.buttonText), e.buttonText),
            r = s(s({}, i.options.tooltipText), e.tooltipText);
        i.options = s(s({}, i.options), e), i.options.dropdowns = s({}, o), i.options.buttonText = s({}, n), i.options.tooltipText = s({}, r), i.options.elementEnd || (i.options.allowRepick = !1), i.options.lockDays.length && (i.options.lockDays = l.DateTime.convertArray(i.options.lockDays, i.options.lockDaysFormat)), i.options.bookedDays.length && (i.options.bookedDays = l.DateTime.convertArray(i.options.bookedDays, i.options.bookedDaysFormat)), i.options.highlightedDays.length && (i.options.highlightedDays = l.DateTime.convertArray(i.options.highlightedDays, i.options.highlightedDaysFormat)), !i.options.hotelMode || "bookedDaysInclusivity" in e || (i.options.bookedDaysInclusivity = "[)"), !i.options.hotelMode || "disallowBookedDaysInRange" in e || (i.options.disallowBookedDaysInRange = !0), !i.options.hotelMode || "selectForward" in e || (i.options.selectForward = !0);
        var a = i.parseInput(),
            p = a[0],
            c = a[1];
        i.options.startDate && (i.options.singleMode || i.options.endDate) && (p = new l.DateTime(i.options.startDate, i.options.format, i.options.lang)), p && i.options.endDate && (c = new l.DateTime(i.options.endDate, i.options.format, i.options.lang)), p instanceof l.DateTime && !isNaN(p.getTime()) && (i.options.startDate = p), i.options.startDate && c instanceof l.DateTime && !isNaN(c.getTime()) && (i.options.endDate = c), !i.options.singleMode || i.options.startDate instanceof l.DateTime || (i.options.startDate = null), i.options.singleMode || i.options.startDate instanceof l.DateTime && i.options.endDate instanceof l.DateTime || (i.options.startDate = null, i.options.endDate = null);

        for (var h = 0; h < i.options.numberOfMonths; h += 1) {
          var d = i.options.startDate instanceof l.DateTime ? i.options.startDate.clone() : new l.DateTime();
          d.setDate(1), d.setMonth(d.getMonth() + h), i.calendars[h] = d;
        }

        if (i.options.showTooltip) if (i.options.tooltipPluralSelector) i.pluralSelector = i.options.tooltipPluralSelector;else try {
          var u = new Intl.PluralRules(i.options.lang);
          i.pluralSelector = u.select.bind(u);
        } catch (t) {
          i.pluralSelector = function (t) {
            return 0 === Math.abs(t) ? "one" : "other";
          };
        }
        return i.loadPolyfillsForIE11(), i.onInit(), i;
      }

      return n(e, t), e.prototype.onInit = function () {
        var t = this;

        if (document.addEventListener("click", function (e) {
          return t.onClick(e);
        }, !0), this.picker = document.createElement("div"), this.picker.className = p.litepicker, this.picker.style.display = "none", this.picker.addEventListener("mouseenter", function (e) {
          return t.onMouseEnter(e);
        }, !0), this.picker.addEventListener("mouseleave", function (e) {
          return t.onMouseLeave(e);
        }, !1), this.options.autoRefresh ? (this.options.element instanceof HTMLElement && this.options.element.addEventListener("keyup", function (e) {
          return t.onInput(e);
        }, !0), this.options.elementEnd instanceof HTMLElement && this.options.elementEnd.addEventListener("keyup", function (e) {
          return t.onInput(e);
        }, !0)) : (this.options.element instanceof HTMLElement && this.options.element.addEventListener("change", function (e) {
          return t.onInput(e);
        }, !0), this.options.elementEnd instanceof HTMLElement && this.options.elementEnd.addEventListener("change", function (e) {
          return t.onInput(e);
        }, !0)), this.options.moduleNavKeyboard) {
          if ("function" != typeof this.enableModuleNavKeyboard) throw new Error("moduleNavKeyboard is on but library does not included. See https://github.com/wakirin/litepicker-module-navkeyboard.");
          this.enableModuleNavKeyboard.call(this, this);
        }

        this.render(), this.options.parentEl ? this.options.parentEl instanceof HTMLElement ? this.options.parentEl.appendChild(this.picker) : document.querySelector(this.options.parentEl).appendChild(this.picker) : this.options.inlineMode ? this.options.element instanceof HTMLInputElement ? this.options.element.parentNode.appendChild(this.picker) : this.options.element.appendChild(this.picker) : document.body.appendChild(this.picker), this.options.mobileFriendly && (this.backdrop = document.createElement("div"), this.backdrop.className = p.litepickerBackdrop, this.backdrop.addEventListener("click", this.hide()), this.options.element && this.options.element.parentNode && this.options.element.parentNode.appendChild(this.backdrop), window.addEventListener("orientationchange", function (e) {
          var i = function i() {
            if (c.isMobile() && t.isShowning()) {
              switch (c.getOrientation()) {
                case "landscape":
                  t.options.numberOfMonths = 2, t.options.numberOfColumns = 2;
                  break;

                default:
                  t.options.numberOfMonths = 1, t.options.numberOfColumns = 1;
              }

              if (t.render(), !t.options.inlineMode) {
                var e = t.picker.getBoundingClientRect();
                t.picker.style.top = "calc(50% - " + e.height / 2 + "px)", t.picker.style.left = "calc(50% - " + e.width / 2 + "px)";
              }
            }

            window.removeEventListener("resize", i);
          };

          window.addEventListener("resize", i);
        })), this.options.inlineMode && (this.show(), this.options.mobileFriendly && c.isMobile() && (window.dispatchEvent(new Event("orientationchange")), window.dispatchEvent(new Event("resize")))), this.updateInput();
      }, e.prototype.parseInput = function () {
        var t = this.options.delimiter,
            e = new RegExp("" + t),
            i = this.options.element instanceof HTMLInputElement ? this.options.element.value.split(t) : [];

        if (this.options.elementEnd) {
          if (this.options.element instanceof HTMLInputElement && this.options.element.value.length && this.options.elementEnd instanceof HTMLInputElement && this.options.elementEnd.value.length) return [new l.DateTime(this.options.element.value, this.options.format), new l.DateTime(this.options.elementEnd.value, this.options.format)];
        } else if (this.options.singleMode) {
          if (this.options.element instanceof HTMLInputElement && this.options.element.value.length) return [new l.DateTime(this.options.element.value, this.options.format)];
        } else if (this.options.element instanceof HTMLInputElement && e.test(this.options.element.value) && i.length && i.length % 2 == 0) {
          var o = i.slice(0, i.length / 2).join(t),
              n = i.slice(i.length / 2).join(t);
          return [new l.DateTime(o, this.options.format), new l.DateTime(n, this.options.format)];
        }

        return [];
      }, e.prototype.updateInput = function () {
        if (this.options.element instanceof HTMLInputElement) {
          if (this.options.singleMode && this.options.startDate) this.options.element.value = this.options.startDate.format(this.options.format, this.options.lang);else if (!this.options.singleMode && this.options.startDate && this.options.endDate) {
            var t = this.options.startDate.format(this.options.format, this.options.lang),
                e = this.options.endDate.format(this.options.format, this.options.lang);
            this.options.elementEnd ? (this.options.element.value = t, this.options.elementEnd.value = e) : this.options.element.value = "" + t + this.options.delimiter + e;
          }
          this.options.startDate || this.options.endDate || (this.options.element.value = "", this.options.elementEnd && (this.options.elementEnd.value = ""));
        }
      }, e.prototype.isSamePicker = function (t) {
        return t.closest("." + p.litepicker) === this.picker;
      }, e.prototype.shouldShown = function (t) {
        return t === this.options.element || this.options.elementEnd && t === this.options.elementEnd;
      }, e.prototype.shouldResetDatePicked = function () {
        return this.options.singleMode || 2 === this.datePicked.length;
      }, e.prototype.shouldSwapDatePicked = function () {
        return 2 === this.datePicked.length && this.datePicked[0].getTime() > this.datePicked[1].getTime();
      }, e.prototype.shouldCheckLockDays = function () {
        return this.options.disallowLockDaysInRange && this.options.lockDays.length && 2 === this.datePicked.length;
      }, e.prototype.shouldCheckBookedDays = function () {
        return this.options.disallowBookedDaysInRange && this.options.bookedDays.length && 2 === this.datePicked.length;
      }, e.prototype.onClick = function (t) {
        var e = this,
            i = t.target;
        if (i && this.picker) if (this.shouldShown(i)) this.show(i);else if (i.closest("." + p.litepicker)) {
          if (i.classList.contains(p.dayItem)) {
            if (t.preventDefault(), !this.isSamePicker(i)) return;
            if (i.classList.contains(p.isLocked)) return;
            if (i.classList.contains(p.isBooked)) return;

            if (this.shouldResetDatePicked() && (this.datePicked.length = 0), this.datePicked[this.datePicked.length] = new l.DateTime(i.dataset.time), this.shouldSwapDatePicked()) {
              var o = this.datePicked[1].clone();
              this.datePicked[1] = this.datePicked[0].clone(), this.datePicked[0] = o.clone();
            }

            if (this.shouldCheckLockDays()) {
              var n = this.options.lockDaysInclusivity;
              this.options.lockDays.filter(function (t) {
                return t instanceof Array ? t[0].isBetween(e.datePicked[0], e.datePicked[1], n) || t[1].isBetween(e.datePicked[0], e.datePicked[1], n) : t.isBetween(e.datePicked[0], e.datePicked[1], n);
              }).length && (this.datePicked.length = 0, "function" == typeof this.options.onError && this.options.onError.call(this, "INVALID_RANGE"));
            }

            if (this.shouldCheckBookedDays()) {
              var s = this.options.bookedDaysInclusivity;
              this.options.hotelMode && 2 === this.datePicked.length && (s = "()");
              var r = this.options.bookedDays.filter(function (t) {
                return t instanceof Array ? t[0].isBetween(e.datePicked[0], e.datePicked[1], s) || t[1].isBetween(e.datePicked[0], e.datePicked[1], s) : t.isBetween(e.datePicked[0], e.datePicked[1]);
              }).length,
                  a = this.options.anyBookedDaysAsCheckout && 1 === this.datePicked.length;
              r && !a && (this.datePicked.length = 0, "function" == typeof this.options.onError && this.options.onError.call(this, "INVALID_RANGE"));
            }

            return this.render(), void (this.options.autoApply && (this.options.singleMode && this.datePicked.length ? (this.setDate(this.datePicked[0]), this.hide()) : this.options.singleMode || 2 !== this.datePicked.length || (this.setDateRange(this.datePicked[0], this.datePicked[1]), this.hide())));
          }

          if (i.classList.contains(p.buttonPreviousMonth)) {
            if (t.preventDefault(), !this.isSamePicker(i)) return;
            var h = 0,
                d = this.options.moveByOneMonth ? 1 : this.options.numberOfMonths;

            if (this.options.splitView) {
              var u = i.closest("." + p.monthItem);
              h = c.findNestedMonthItem(u), d = 1;
            }

            return this.calendars[h].setMonth(this.calendars[h].getMonth() - d), this.gotoDate(this.calendars[h], h), void ("function" == typeof this.options.onChangeMonth && this.options.onChangeMonth.call(this, this.calendars[h], h));
          }

          if (i.classList.contains(p.buttonNextMonth)) {
            if (t.preventDefault(), !this.isSamePicker(i)) return;
            h = 0, d = this.options.moveByOneMonth ? 1 : this.options.numberOfMonths;

            if (this.options.splitView) {
              u = i.closest("." + p.monthItem);
              h = c.findNestedMonthItem(u), d = 1;
            }

            return this.calendars[h].setMonth(this.calendars[h].getMonth() + d), this.gotoDate(this.calendars[h], h), void ("function" == typeof this.options.onChangeMonth && this.options.onChangeMonth.call(this, this.calendars[h], h));
          }

          if (i.classList.contains(p.buttonCancel)) {
            if (t.preventDefault(), !this.isSamePicker(i)) return;
            this.hide();
          }

          if (i.classList.contains(p.buttonApply)) {
            if (t.preventDefault(), !this.isSamePicker(i)) return;
            this.options.singleMode && this.datePicked.length ? this.setDate(this.datePicked[0]) : this.options.singleMode || 2 !== this.datePicked.length || this.setDateRange(this.datePicked[0], this.datePicked[1]), this.hide();
          }
        } else this.hide();
      }, e.prototype.showTooltip = function (t, e) {
        var i = this.picker.querySelector("." + p.containerTooltip);
        i.style.visibility = "visible", i.innerHTML = e;
        var o = this.picker.getBoundingClientRect(),
            n = i.getBoundingClientRect(),
            s = t.getBoundingClientRect(),
            r = s.top,
            a = s.left;

        if (this.options.inlineMode && this.options.parentEl) {
          var l = this.picker.parentNode.getBoundingClientRect();
          r -= l.top, a -= l.left;
        } else r -= o.top, a -= o.left;

        r -= n.height, a -= n.width / 2, a += s.width / 2, i.style.top = r + "px", i.style.left = a + "px", "function" == typeof this.options.onShowTooltip && this.options.onShowTooltip.call(this, i, t);
      }, e.prototype.hideTooltip = function () {
        this.picker.querySelector("." + p.containerTooltip).style.visibility = "hidden";
      }, e.prototype.shouldAllowMouseEnter = function (t) {
        return !this.options.singleMode && !t.classList.contains(p.isLocked) && !t.classList.contains(p.isBooked);
      }, e.prototype.shouldAllowRepick = function () {
        return this.options.elementEnd && this.options.allowRepick && this.options.startDate && this.options.endDate;
      }, e.prototype.isDayItem = function (t) {
        return t.classList.contains(p.dayItem);
      }, e.prototype.onMouseEnter = function (t) {
        var e = this,
            i = t.target;

        if (this.isDayItem(i) && ("function" == typeof this.options.onDayHover && this.options.onDayHover.call(this, l.DateTime.parseDateTime(i.dataset.time), i.classList.toString().split(/\s/), i), this.shouldAllowMouseEnter(i))) {
          if (this.shouldAllowRepick() && (this.triggerElement === this.options.element ? this.datePicked[0] = this.options.endDate.clone() : this.triggerElement === this.options.elementEnd && (this.datePicked[0] = this.options.startDate.clone())), 1 !== this.datePicked.length) return;
          var o = this.picker.querySelector("." + p.dayItem + '[data-time="' + this.datePicked[0].getTime() + '"]'),
              n = this.datePicked[0].clone(),
              s = new l.DateTime(i.dataset.time),
              r = !1;

          if (n.getTime() > s.getTime()) {
            var a = n.clone();
            n = s.clone(), s = a.clone(), r = !0;
          }

          if (Array.prototype.slice.call(this.picker.querySelectorAll("." + p.dayItem)).forEach(function (t) {
            var i = new l.DateTime(t.dataset.time),
                o = e.renderDay(i);
            i.isBetween(n, s) && o.classList.add(p.isInRange), t.className = o.className;
          }), i.classList.add(p.isEndDate), r ? (o && o.classList.add(p.isFlipped), i.classList.add(p.isFlipped)) : (o && o.classList.remove(p.isFlipped), i.classList.remove(p.isFlipped)), this.options.showTooltip) {
            var c = s.diff(n, "day");

            if (this.options.hotelMode || (c += 1), c > 0) {
              var h = this.pluralSelector(c),
                  d = c + " " + (this.options.tooltipText[h] ? this.options.tooltipText[h] : "[" + h + "]");
              this.showTooltip(i, d);
            } else this.hideTooltip();
          }
        }
      }, e.prototype.onMouseLeave = function (t) {
        t.target;
        this.options.allowRepick && (!this.options.allowRepick || this.options.startDate || this.options.endDate) && (this.datePicked.length = 0, this.render());
      }, e.prototype.onInput = function (t) {
        var e = this.parseInput(),
            i = e[0],
            o = e[1],
            n = this.options.format;

        if (this.options.elementEnd ? i instanceof l.DateTime && o instanceof l.DateTime && i.format(n) === this.options.element.value && o.format(n) === this.options.elementEnd.value : this.options.singleMode ? i instanceof l.DateTime && i.format(n) === this.options.element.value : i instanceof l.DateTime && o instanceof l.DateTime && "" + i.format(n) + this.options.delimiter + o.format(n) === this.options.element.value) {
          if (o && i.getTime() > o.getTime()) {
            var s = i.clone();
            i = o.clone(), o = s.clone();
          }

          this.options.startDate = new l.DateTime(i, this.options.format, this.options.lang), o && (this.options.endDate = new l.DateTime(o, this.options.format, this.options.lang)), this.updateInput(), this.render();
          var r = i.clone(),
              a = 0;
          (this.options.elementEnd ? i.format(n) === t.target.value : t.target.value.startsWith(i.format(n))) || (r = o.clone(), a = this.options.numberOfMonths - 1), "function" == typeof this.options.onSelect && this.options.onSelect.call(this, this.getStartDate(), this.getEndDate()), this.gotoDate(r, a);
        }
      }, e.prototype.isShowning = function () {
        return this.picker && "none" !== this.picker.style.display;
      }, e.prototype.loadPolyfillsForIE11 = function () {
        Object.entries || (Object.entries = function (t) {
          for (var e = Object.keys(t), i = e.length, o = new Array(i); i;) {
            o[i -= 1] = [e[i], t[e[i]]];
          }

          return o;
        }), Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector), Element.prototype.closest || (Element.prototype.closest = function (t) {
          var e = this;

          do {
            if (e.matches(t)) return e;
            e = e.parentElement || e.parentNode;
          } while (null !== e && 1 === e.nodeType);

          return null;
        });
      }, e;
    }(a.Calendar);

    e.Litepicker = h;
  }, function (t, e, i) {
    "use strict";

    Object.defineProperty(e, "__esModule", {
      value: !0
    });
    var o = i(3);
    e.Litepicker = o.Litepicker, i(9), i(10), window.Litepicker = o.Litepicker, e["default"] = o.Litepicker;
  }, function (t, e, i) {
    "use strict";

    var o = this && this.__importStar || function (t) {
      if (t && t.__esModule) return t;
      var e = {};
      if (null != t) for (var i in t) {
        Object.hasOwnProperty.call(t, i) && (e[i] = t[i]);
      }
      return e["default"] = t, e;
    };

    Object.defineProperty(e, "__esModule", {
      value: !0
    });

    var n = i(0),
        s = o(i(1)),
        r = i(2),
        a = function () {
      function t() {
        this.options = {
          element: null,
          elementEnd: null,
          parentEl: null,
          firstDay: 1,
          format: "YYYY-MM-DD",
          lang: "en-US",
          delimiter: " - ",
          numberOfMonths: 1,
          numberOfColumns: 1,
          startDate: null,
          endDate: null,
          zIndex: 9999,
          minDate: null,
          maxDate: null,
          minDays: null,
          maxDays: null,
          selectForward: !1,
          selectBackward: !1,
          splitView: !1,
          inlineMode: !1,
          singleMode: !0,
          autoApply: !0,
          allowRepick: !1,
          showWeekNumbers: !1,
          showTooltip: !0,
          hotelMode: !1,
          disableWeekends: !1,
          scrollToDate: !0,
          mobileFriendly: !0,
          useResetBtn: !1,
          autoRefresh: !1,
          moveByOneMonth: !1,
          lockDaysFormat: "YYYY-MM-DD",
          lockDays: [],
          disallowLockDaysInRange: !1,
          lockDaysInclusivity: "[]",
          bookedDaysFormat: "YYYY-MM-DD",
          bookedDays: [],
          disallowBookedDaysInRange: !1,
          bookedDaysInclusivity: "[]",
          anyBookedDaysAsCheckout: !1,
          highlightedDaysFormat: "YYYY-MM-DD",
          highlightedDays: [],
          dropdowns: {
            minYear: 1990,
            maxYear: null,
            months: !1,
            years: !1
          },
          buttonText: {
            apply: "Apply",
            cancel: "Cancel",
            previousMonth: '<svg width="11" height="16" xmlns="http://www.w3.org/2000/svg"><path d="M7.919 0l2.748 2.667L5.333 8l5.334 5.333L7.919 16 0 8z" fill-rule="nonzero"/></svg>',
            nextMonth: '<svg width="11" height="16" xmlns="http://www.w3.org/2000/svg"><path d="M2.748 16L0 13.333 5.333 8 0 2.667 2.748 0l7.919 8z" fill-rule="nonzero"/></svg>',
            reset: '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">\n        <path d="M0 0h24v24H0z" fill="none"/>\n        <path d="M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z"/>\n      </svg>'
          },
          tooltipText: {
            one: "jour",
            other: "jours"
          },
          tooltipPluralSelector: null,
          onShow: null,
          onHide: null,
          onSelect: null,
          onError: null,
          onRender: null,
          onRenderDay: null,
          onChangeMonth: null,
          onChangeYear: null,
          onDayHover: null,
          onShowTooltip: null,
          resetBtnCallback: null,
          moduleRanges: null,
          moduleNavKeyboard: null
        }, this.calendars = [], this.datePicked = [];
      }

      return t.prototype.render = function () {
        var t = this,
            e = document.createElement("div");
        e.className = s.containerMain;
        var i = document.createElement("div");
        i.className = s.containerMonths, s["columns" + this.options.numberOfColumns] && (i.classList.remove(s.columns2, s.columns3, s.columns4), i.classList.add(s["columns" + this.options.numberOfColumns])), this.options.splitView && i.classList.add(s.splitView), this.options.showWeekNumbers && i.classList.add(s.showWeekNumbers);

        for (var o = this.calendars[0].clone(), n = o.getMonth(), r = o.getMonth() + this.options.numberOfMonths, a = 0, l = n; l < r; l += 1) {
          var p = o.clone();
          p.setDate(1), this.options.splitView ? p = this.calendars[a].clone() : p.setMonth(l), i.appendChild(this.renderMonth(p)), a += 1;
        }

        if (this.picker.innerHTML = "", e.appendChild(i), this.options.useResetBtn) {
          var c = document.createElement("a");
          c.href = "#", c.className = s.resetButton, c.innerHTML = this.options.buttonText.reset, c.addEventListener("click", function (e) {
            e.preventDefault(), t.clearSelection(), "function" == typeof t.options.resetBtnCallback && t.options.resetBtnCallback.call(t);
          }), e.querySelector("." + s.monthItem + ":last-child").querySelector("." + s.monthItemHeader).appendChild(c);
        }

        if (this.picker.appendChild(e), this.options.autoApply && !this.options.footerHTML || this.picker.appendChild(this.renderFooter()), this.options.showTooltip && this.picker.appendChild(this.renderTooltip()), this.options.moduleRanges) {
          if ("function" != typeof this.enableModuleRanges) throw new Error("moduleRanges is on but library does not included. See https://github.com/wakirin/litepicker-module-ranges.");
          this.enableModuleRanges.call(this, this);
        }

        "function" == typeof this.options.onRender && this.options.onRender.call(this, this.picker);
      }, t.prototype.renderMonth = function (t) {
        var e = this,
            i = t.clone(),
            o = 32 - new Date(i.getFullYear(), i.getMonth(), 32).getDate(),
            a = document.createElement("div");
        a.className = s.monthItem;
        var l = document.createElement("div");
        l.className = s.monthItemHeader;
        var p = document.createElement("div");

        if (this.options.dropdowns.months) {
          var c = document.createElement("select");
          c.className = s.monthItemName;

          for (var h = 0; h < 12; h += 1) {
            var d = document.createElement("option"),
                u = new n.DateTime(new Date(t.getFullYear(), h, 1, 0, 0, 0));
            d.value = String(h), d.text = u.toLocaleString(this.options.lang, {
              month: "long"
            }), d.disabled = this.options.minDate && u.isBefore(new n.DateTime(this.options.minDate), "month") || this.options.maxDate && u.isAfter(new n.DateTime(this.options.maxDate), "month"), d.selected = u.getMonth() === t.getMonth(), c.appendChild(d);
          }

          c.addEventListener("change", function (t) {
            var i = t.target,
                o = 0;

            if (e.options.splitView) {
              var n = i.closest("." + s.monthItem);
              o = r.findNestedMonthItem(n);
            }

            e.calendars[o].setMonth(Number(i.value)), e.render(), "function" == typeof e.options.onChangeMonth && e.options.onChangeMonth.call(e, e.calendars[o], o);
          }), p.appendChild(c);
        } else {
          var m = document.createElement("strong");
          m.className = s.monthItemName, m.innerHTML = t.toLocaleString(this.options.lang, {
            month: "long"
          }), p.appendChild(m);
        }

        if (this.options.dropdowns.years) {
          var f = document.createElement("select");
          f.className = s.monthItemYear;
          var g = this.options.dropdowns.minYear,
              y = this.options.dropdowns.maxYear ? this.options.dropdowns.maxYear : new Date().getFullYear();
          if (t.getFullYear() > y) (d = document.createElement("option")).value = String(t.getFullYear()), d.text = String(t.getFullYear()), d.selected = !0, d.disabled = !0, f.appendChild(d);

          for (h = y; h >= g; h -= 1) {
            var d = document.createElement("option"),
                k = new n.DateTime(new Date(h, 0, 1, 0, 0, 0));
            d.value = h, d.text = h, d.disabled = this.options.minDate && k.isBefore(new n.DateTime(this.options.minDate), "year") || this.options.maxDate && k.isAfter(new n.DateTime(this.options.maxDate), "year"), d.selected = t.getFullYear() === h, f.appendChild(d);
          }

          if (t.getFullYear() < g) (d = document.createElement("option")).value = String(t.getFullYear()), d.text = String(t.getFullYear()), d.selected = !0, d.disabled = !0, f.appendChild(d);

          if ("asc" === this.options.dropdowns.years) {
            var v = Array.prototype.slice.call(f.childNodes).reverse();
            f.innerHTML = "", v.forEach(function (t) {
              t.innerHTML = t.value, f.appendChild(t);
            });
          }

          f.addEventListener("change", function (t) {
            var i = t.target,
                o = 0;

            if (e.options.splitView) {
              var n = i.closest("." + s.monthItem);
              o = r.findNestedMonthItem(n);
            }

            e.calendars[o].setFullYear(Number(i.value)), e.render(), "function" == typeof e.options.onChangeYear && e.options.onChangeYear.call(e, e.calendars[o], o);
          }), p.appendChild(f);
        } else {
          var D = document.createElement("span");
          D.className = s.monthItemYear, D.innerHTML = String(t.getFullYear()), p.appendChild(D);
        }

        var b = document.createElement("a");
        b.href = "#", b.className = s.buttonPreviousMonth, b.innerHTML = this.options.buttonText.previousMonth;
        var w = document.createElement("a");
        w.href = "#", w.className = s.buttonNextMonth, w.innerHTML = this.options.buttonText.nextMonth, l.appendChild(b), l.appendChild(p), l.appendChild(w), this.options.minDate && i.isSameOrBefore(new n.DateTime(this.options.minDate), "month") && a.classList.add(s.noPreviousMonth), this.options.maxDate && i.isSameOrAfter(new n.DateTime(this.options.maxDate), "month") && a.classList.add(s.noNextMonth);
        var M = document.createElement("div");
        M.className = s.monthItemWeekdaysRow, this.options.showWeekNumbers && (M.innerHTML = "<div>W</div>");

        for (var x = 1; x <= 7; x += 1) {
          var T = 3 + this.options.firstDay + x,
              _ = document.createElement("div");

          _.innerHTML = this.weekdayName(T), _.title = this.weekdayName(T, "long"), M.appendChild(_);
        }

        var L = document.createElement("div");
        L.className = s.containerDays;
        var S = this.calcSkipDays(i);
        this.options.showWeekNumbers && S && L.appendChild(this.renderWeekNumber(i));

        for (var E = 0; E < S; E += 1) {
          var I = document.createElement("div");
          L.appendChild(I);
        }

        for (E = 1; E <= o; E += 1) {
          i.setDate(E), this.options.showWeekNumbers && i.getDay() === this.options.firstDay && L.appendChild(this.renderWeekNumber(i)), L.appendChild(this.renderDay(i));
        }

        return a.appendChild(l), a.appendChild(M), a.appendChild(L), a;
      }, t.prototype.renderDay = function (t) {
        var e = this;
        t.setHours();
        var i = document.createElement("a");

        if (i.href = "#", i.className = s.dayItem, i.innerHTML = String(t.getDate()), i.dataset.time = String(t.getTime()), t.toDateString() === new Date().toDateString() && i.classList.add(s.isToday), this.datePicked.length ? (this.datePicked[0].toDateString() === t.toDateString() && (i.classList.add(s.isStartDate), this.options.singleMode && i.classList.add(s.isEndDate)), 2 === this.datePicked.length && this.datePicked[1].toDateString() === t.toDateString() && i.classList.add(s.isEndDate), 2 === this.datePicked.length && t.isBetween(this.datePicked[0], this.datePicked[1]) && i.classList.add(s.isInRange)) : this.options.startDate && (this.options.startDate.toDateString() === t.toDateString() && (i.classList.add(s.isStartDate), this.options.singleMode && i.classList.add(s.isEndDate)), this.options.endDate && this.options.endDate.toDateString() === t.toDateString() && i.classList.add(s.isEndDate), this.options.startDate && this.options.endDate && t.isBetween(this.options.startDate, this.options.endDate) && i.classList.add(s.isInRange)), this.options.minDate && t.isBefore(new n.DateTime(this.options.minDate)) && i.classList.add(s.isLocked), this.options.maxDate && t.isAfter(new n.DateTime(this.options.maxDate)) && i.classList.add(s.isLocked), this.options.minDays && 1 === this.datePicked.length) {
          var o = Number(!this.options.hotelMode),
              r = this.datePicked[0].clone().subtract(this.options.minDays - o, "day"),
              a = this.datePicked[0].clone().add(this.options.minDays - o, "day");
          t.isBetween(r, this.datePicked[0], "(]") && i.classList.add(s.isLocked), t.isBetween(this.datePicked[0], a, "[)") && i.classList.add(s.isLocked);
        }

        if (this.options.maxDays && 1 === this.datePicked.length) {
          o = Number(this.options.hotelMode), r = this.datePicked[0].clone().subtract(this.options.maxDays + o, "day"), a = this.datePicked[0].clone().add(this.options.maxDays + o, "day");
          t.isSameOrBefore(r) && i.classList.add(s.isLocked), t.isSameOrAfter(a) && i.classList.add(s.isLocked);
        }

        (this.options.selectForward && 1 === this.datePicked.length && t.isBefore(this.datePicked[0]) && i.classList.add(s.isLocked), this.options.selectBackward && 1 === this.datePicked.length && t.isAfter(this.datePicked[0]) && i.classList.add(s.isLocked), this.options.lockDays.length) && this.options.lockDays.filter(function (i) {
          return i instanceof Array ? t.isBetween(i[0], i[1], e.options.lockDaysInclusivity) : i.isSame(t, "day");
        }).length && i.classList.add(s.isLocked);
        this.options.highlightedDays.length && this.options.highlightedDays.filter(function (e) {
          return e instanceof Array ? t.isBetween(e[0], e[1], "[]") : e.isSame(t, "day");
        }).length && i.classList.add(s.isHighlighted);

        if (this.datePicked.length <= 1 && this.options.bookedDays.length) {
          var l = this.options.bookedDaysInclusivity;
          this.options.hotelMode && 1 === this.datePicked.length && (l = "()");
          var p = t.clone();
          p.subtract(1, "day"), t.clone().add(1, "day");
          var c = this.dateIsBooked(t, l),
              h = this.dateIsBooked(p, "[]"),
              d = this.dateIsBooked(t, "(]"),
              u = 0 === this.datePicked.length && c || 1 === this.datePicked.length && h && c || 1 === this.datePicked.length && h && d,
              m = this.options.anyBookedDaysAsCheckout && 1 === this.datePicked.length;
          u && !m && i.classList.add(s.isBooked);
        }

        return !this.options.disableWeekends || 6 !== t.getDay() && 0 !== t.getDay() || i.classList.add(s.isLocked), "function" == typeof this.options.onRenderDay && this.options.onRenderDay.call(this, i), i;
      }, t.prototype.renderFooter = function () {
        var t = document.createElement("div");

        if (t.className = s.containerFooter, this.options.footerHTML ? t.innerHTML = this.options.footerHTML : t.innerHTML = '\n      <span class="' + s.previewDateRange + '"></span>\n      <button type="button" class="' + s.buttonCancel + '">' + this.options.buttonText.cancel + '</button>\n      <button type="button" class="' + s.buttonApply + '">' + this.options.buttonText.apply + "</button>\n      ", this.options.singleMode) {
          if (1 === this.datePicked.length) {
            var e = this.datePicked[0].format(this.options.format, this.options.lang);
            t.querySelector("." + s.previewDateRange).innerHTML = e;
          }
        } else if (1 === this.datePicked.length && t.querySelector("." + s.buttonApply).setAttribute("disabled", ""), 2 === this.datePicked.length) {
          e = this.datePicked[0].format(this.options.format, this.options.lang);
          var i = this.datePicked[1].format(this.options.format, this.options.lang);
          t.querySelector("." + s.previewDateRange).innerHTML = "" + e + this.options.delimiter + i;
        }

        return t;
      }, t.prototype.renderWeekNumber = function (t) {
        var e = document.createElement("div"),
            i = t.getWeek(this.options.firstDay);
        return e.className = s.weekNumber, e.innerHTML = 53 === i && 0 === t.getMonth() ? "53 / 1" : i, e;
      }, t.prototype.renderTooltip = function () {
        var t = document.createElement("div");
        return t.className = s.containerTooltip, t;
      }, t.prototype.dateIsBooked = function (t, e) {
        return this.options.bookedDays.filter(function (i) {
          return i instanceof Array ? t.isBetween(i[0], i[1], e) : i.isSame(t, "day");
        }).length;
      }, t.prototype.weekdayName = function (t, e) {
        return void 0 === e && (e = "short"), new Date(1970, 0, t, 12, 0, 0, 0).toLocaleString(this.options.lang, {
          weekday: e
        });
      }, t.prototype.calcSkipDays = function (t) {
        var e = t.getDay() - this.options.firstDay;
        return e < 0 && (e += 7), e;
      }, t;
    }();

    e.Calendar = a;
  }, function (t, e, i) {
    (e = t.exports = i(7)(!1)).push([t.i, ':root{--litepickerBgColor: #fff;--litepickerMonthHeaderTextColor: #333;--litepickerMonthButton: #9e9e9e;--litepickerMonthButtonHover: #2196f3;--litepickerMonthWidth: calc(var(--litepickerDayWidth) * 7);--litepickerMonthWeekdayColor: #9e9e9e;--litepickerDayColor: #333;--litepickerDayColorHover: #2196f3;--litepickerDayIsTodayColor: #f44336;--litepickerDayIsInRange: #bbdefb;--litepickerDayIsLockedColor: #9e9e9e;--litepickerDayIsBookedColor: #9e9e9e;--litepickerDayIsStartColor: #fff;--litepickerDayIsStartBg: #2196f3;--litepickerDayIsEndColor: #fff;--litepickerDayIsEndBg: #2196f3;--litepickerDayWidth: 38px;--litepickerButtonCancelColor: #fff;--litepickerButtonCancelBg: #9e9e9e;--litepickerButtonApplyColor: #fff;--litepickerButtonApplyBg: #2196f3;--litepickerButtonResetBtn: #909090;--litepickerButtonResetBtnHover: #2196f3;--litepickerHighlightedDayColor: #333;--litepickerHighlightedDayBg: #ffeb3b}.show-week-numbers{--litepickerMonthWidth: calc(var(--litepickerDayWidth) * 8)}.litepicker{font-family:-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;font-size:0.8em;display:none}.litepicker .container__main{display:-webkit-box;display:-ms-flexbox;display:flex}.litepicker .container__months{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:var(--litepickerBgColor);border-radius:5px;-webkit-box-shadow:0 0 5px #ddd;box-shadow:0 0 5px #ddd;width:calc(var(--litepickerMonthWidth) + 10px);-webkit-box-sizing:content-box;box-sizing:content-box}.litepicker .container__months.columns-2{width:calc((var(--litepickerMonthWidth) * 2) + 20px)}.litepicker .container__months.columns-3{width:calc((var(--litepickerMonthWidth) * 3) + 30px)}.litepicker .container__months.columns-4{width:calc((var(--litepickerMonthWidth) * 4) + 40px)}.litepicker .container__months.split-view .month-item-header .button-previous-month,.litepicker .container__months.split-view .month-item-header .button-next-month{visibility:visible}.litepicker .container__months .month-item{padding:5px;width:var(--litepickerMonthWidth);-webkit-box-sizing:content-box;box-sizing:content-box}.litepicker .container__months .month-item-header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;font-weight:500;padding:10px 5px;text-align:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:var(--litepickerMonthHeaderTextColor)}.litepicker .container__months .month-item-header div{-webkit-box-flex:1;-ms-flex:1;flex:1}.litepicker .container__months .month-item-header div>.month-item-name{margin-right:5px}.litepicker .container__months .month-item-header div>.month-item-year{padding:0}.litepicker .container__months .month-item-header .reset-button{color:var(--litepickerButtonResetBtn)}.litepicker .container__months .month-item-header .reset-button>svg,.litepicker .container__months .month-item-header .reset-button>img{fill:var(--litepickerButtonResetBtn);pointer-events:none}.litepicker .container__months .month-item-header .reset-button:hover{color:var(--litepickerButtonResetBtnHover)}.litepicker .container__months .month-item-header .reset-button:hover>svg{fill:var(--litepickerButtonResetBtnHover)}.litepicker .container__months .month-item-header .button-previous-month,.litepicker .container__months .month-item-header .button-next-month{visibility:hidden;text-decoration:none;color:var(--litepickerMonthButton);padding:3px 5px;border-radius:3px;-webkit-transition:color 0.3s, border 0.3s;transition:color 0.3s, border 0.3s;cursor:default}.litepicker .container__months .month-item-header .button-previous-month>svg,.litepicker .container__months .month-item-header .button-previous-month>img,.litepicker .container__months .month-item-header .button-next-month>svg,.litepicker .container__months .month-item-header .button-next-month>img{fill:var(--litepickerMonthButton);pointer-events:none}.litepicker .container__months .month-item-header .button-previous-month:hover,.litepicker .container__months .month-item-header .button-next-month:hover{color:var(--litepickerMonthButtonHover)}.litepicker .container__months .month-item-header .button-previous-month:hover>svg,.litepicker .container__months .month-item-header .button-next-month:hover>svg{fill:var(--litepickerMonthButtonHover)}.litepicker .container__months .month-item-weekdays-row{display:-webkit-box;display:-ms-flexbox;display:flex;justify-self:center;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start;color:var(--litepickerMonthWeekdayColor)}.litepicker .container__months .month-item-weekdays-row>div{padding:5px 0;font-size:85%;-webkit-box-flex:1;-ms-flex:1;flex:1;width:var(--litepickerDayWidth);text-align:center}.litepicker .container__months .month-item:first-child .button-previous-month{visibility:visible}.litepicker .container__months .month-item:last-child .button-next-month{visibility:visible}.litepicker .container__months .month-item.no-previous-month .button-previous-month{visibility:hidden}.litepicker .container__months .month-item.no-next-month .button-next-month{visibility:hidden}.litepicker .container__days{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;justify-self:center;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start;text-align:center;-webkit-box-sizing:content-box;box-sizing:content-box}.litepicker .container__days>div,.litepicker .container__days>a{padding:5px 0;width:var(--litepickerDayWidth)}.litepicker .container__days .day-item{color:var(--litepickerDayColor);text-align:center;text-decoration:none;border-radius:3px;-webkit-transition:color 0.3s, border 0.3s;transition:color 0.3s, border 0.3s;cursor:default}.litepicker .container__days .day-item:hover{color:var(--litepickerDayColorHover);-webkit-box-shadow:inset 0 0 0 1px var(--litepickerDayColorHover);box-shadow:inset 0 0 0 1px var(--litepickerDayColorHover)}.litepicker .container__days .day-item.is-today{color:var(--litepickerDayIsTodayColor)}.litepicker .container__days .day-item.is-locked{color:var(--litepickerDayIsLockedColor)}.litepicker .container__days .day-item.is-locked:hover{color:var(--litepickerDayIsLockedColor);-webkit-box-shadow:none;box-shadow:none;cursor:default}.litepicker .container__days .day-item.is-booked{color:var(--litepickerDayIsBookedColor)}.litepicker .container__days .day-item.is-booked:hover{color:var(--litepickerDayIsBookedColor);-webkit-box-shadow:none;box-shadow:none;cursor:default}.litepicker .container__days .day-item.is-in-range{background-color:var(--litepickerDayIsInRange);border-radius:0}.litepicker .container__days .day-item.is-start-date{color:var(--litepickerDayIsStartColor);background-color:var(--litepickerDayIsStartBg);border-top-left-radius:5px;border-bottom-left-radius:5px;border-top-right-radius:0;border-bottom-right-radius:0}.litepicker .container__days .day-item.is-start-date.is-flipped{border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:5px;border-bottom-right-radius:5px}.litepicker .container__days .day-item.is-end-date{color:var(--litepickerDayIsEndColor);background-color:var(--litepickerDayIsEndBg);border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:5px;border-bottom-right-radius:5px}.litepicker .container__days .day-item.is-end-date.is-flipped{border-top-left-radius:5px;border-bottom-left-radius:5px;border-top-right-radius:0;border-bottom-right-radius:0}.litepicker .container__days .day-item.is-start-date.is-end-date{border-top-left-radius:5px;border-bottom-left-radius:5px;border-top-right-radius:5px;border-bottom-right-radius:5px}.litepicker .container__days .day-item.is-highlighted{color:var(--litepickerHighlightedDayColor);background-color:var(--litepickerHighlightedDayBg)}.litepicker .container__days .week-number{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;color:#9e9e9e;font-size:85%}.litepicker .container__footer{text-align:right;padding:10px 5px;margin:0 5px;background-color:#fafafa;-webkit-box-shadow:inset 0px 3px 3px 0px #ddd;box-shadow:inset 0px 3px 3px 0px #ddd;border-bottom-left-radius:5px;border-bottom-right-radius:5px}.litepicker .container__footer .preview-date-range{margin-right:10px;font-size:90%}.litepicker .container__footer .button-cancel{background-color:var(--litepickerButtonCancelBg);color:var(--litepickerButtonCancelColor);border:0;padding:3px 7px 4px;border-radius:3px}.litepicker .container__footer .button-cancel>svg,.litepicker .container__footer .button-cancel>img{pointer-events:none}.litepicker .container__footer .button-apply{background-color:var(--litepickerButtonApplyBg);color:var(--litepickerButtonApplyColor);border:0;padding:3px 7px 4px;border-radius:3px;margin-left:10px;margin-right:10px}.litepicker .container__footer .button-apply:disabled{opacity:0.7}.litepicker .container__footer .button-apply>svg,.litepicker .container__footer .button-apply>img{pointer-events:none}.litepicker .container__tooltip{position:absolute;margin-top:-4px;padding:4px 8px;border-radius:4px;background-color:#fff;-webkit-box-shadow:0 1px 3px rgba(0,0,0,0.25);box-shadow:0 1px 3px rgba(0,0,0,0.25);white-space:nowrap;font-size:11px;pointer-events:none;visibility:hidden}.litepicker .container__tooltip:before{position:absolute;bottom:-5px;left:calc(50% - 5px);border-top:5px solid rgba(0,0,0,0.12);border-right:5px solid transparent;border-left:5px solid transparent;content:""}.litepicker .container__tooltip:after{position:absolute;bottom:-4px;left:calc(50% - 4px);border-top:4px solid #fff;border-right:4px solid transparent;border-left:4px solid transparent;content:""}.litepicker-open{overflow:hidden}.litepicker-backdrop{display:none;background-color:#000;opacity:0.3;position:fixed;top:0;right:0;bottom:0;left:0}\n', ""]), e.locals = {
      showWeekNumbers: "show-week-numbers",
      litepicker: "litepicker",
      containerMain: "container__main",
      containerMonths: "container__months",
      columns2: "columns-2",
      columns3: "columns-3",
      columns4: "columns-4",
      splitView: "split-view",
      monthItemHeader: "month-item-header",
      buttonPreviousMonth: "button-previous-month",
      buttonNextMonth: "button-next-month",
      monthItem: "month-item",
      monthItemName: "month-item-name",
      monthItemYear: "month-item-year",
      resetButton: "reset-button",
      monthItemWeekdaysRow: "month-item-weekdays-row",
      noPreviousMonth: "no-previous-month",
      noNextMonth: "no-next-month",
      containerDays: "container__days",
      dayItem: "day-item",
      isToday: "is-today",
      isLocked: "is-locked",
      isBooked: "is-booked",
      isInRange: "is-in-range",
      isStartDate: "is-start-date",
      isFlipped: "is-flipped",
      isEndDate: "is-end-date",
      isHighlighted: "is-highlighted",
      weekNumber: "week-number",
      containerFooter: "container__footer",
      previewDateRange: "preview-date-range",
      buttonCancel: "button-cancel",
      buttonApply: "button-apply",
      containerTooltip: "container__tooltip",
      litepickerOpen: "litepicker-open",
      litepickerBackdrop: "litepicker-backdrop"
    };
  }, function (t, e, i) {
    "use strict";

    t.exports = function (t) {
      var e = [];
      return e.toString = function () {
        return this.map(function (e) {
          var i = function (t, e) {
            var i = t[1] || "",
                o = t[3];
            if (!o) return i;

            if (e && "function" == typeof btoa) {
              var n = (r = o, a = btoa(unescape(encodeURIComponent(JSON.stringify(r)))), l = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a), "/*# ".concat(l, " */")),
                  s = o.sources.map(function (t) {
                return "/*# sourceURL=".concat(o.sourceRoot).concat(t, " */");
              });
              return [i].concat(s).concat([n]).join("\n");
            }

            var r, a, l;
            return [i].join("\n");
          }(e, t);

          return e[2] ? "@media ".concat(e[2], "{").concat(i, "}") : i;
        }).join("");
      }, e.i = function (t, i) {
        "string" == typeof t && (t = [[null, t, ""]]);

        for (var o = {}, n = 0; n < this.length; n++) {
          var s = this[n][0];
          null != s && (o[s] = !0);
        }

        for (var r = 0; r < t.length; r++) {
          var a = t[r];
          null != a[0] && o[a[0]] || (i && !a[2] ? a[2] = i : i && (a[2] = "(".concat(a[2], ") and (").concat(i, ")")), e.push(a));
        }
      }, e;
    };
  }, function (t, e, i) {
    "use strict";

    var o,
        n = {},
        s = function s() {
      return void 0 === o && (o = Boolean(window && document && document.all && !window.atob)), o;
    },
        r = function () {
      var t = {};
      return function (e) {
        if (void 0 === t[e]) {
          var i = document.querySelector(e);
          if (window.HTMLIFrameElement && i instanceof window.HTMLIFrameElement) try {
            i = i.contentDocument.head;
          } catch (t) {
            i = null;
          }
          t[e] = i;
        }

        return t[e];
      };
    }();

    function a(t, e) {
      for (var i = [], o = {}, n = 0; n < t.length; n++) {
        var s = t[n],
            r = e.base ? s[0] + e.base : s[0],
            a = {
          css: s[1],
          media: s[2],
          sourceMap: s[3]
        };
        o[r] ? o[r].parts.push(a) : i.push(o[r] = {
          id: r,
          parts: [a]
        });
      }

      return i;
    }

    function l(t, e) {
      for (var i = 0; i < t.length; i++) {
        var o = t[i],
            s = n[o.id],
            r = 0;

        if (s) {
          for (s.refs++; r < s.parts.length; r++) {
            s.parts[r](o.parts[r]);
          }

          for (; r < o.parts.length; r++) {
            s.parts.push(g(o.parts[r], e));
          }
        } else {
          for (var a = []; r < o.parts.length; r++) {
            a.push(g(o.parts[r], e));
          }

          n[o.id] = {
            id: o.id,
            refs: 1,
            parts: a
          };
        }
      }
    }

    function p(t) {
      var e = document.createElement("style");

      if (void 0 === t.attributes.nonce) {
        var o = i.nc;
        o && (t.attributes.nonce = o);
      }

      if (Object.keys(t.attributes).forEach(function (i) {
        e.setAttribute(i, t.attributes[i]);
      }), "function" == typeof t.insert) t.insert(e);else {
        var n = r(t.insert || "head");
        if (!n) throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
        n.appendChild(e);
      }
      return e;
    }

    var c,
        h = (c = [], function (t, e) {
      return c[t] = e, c.filter(Boolean).join("\n");
    });

    function d(t, e, i, o) {
      var n = i ? "" : o.css;
      if (t.styleSheet) t.styleSheet.cssText = h(e, n);else {
        var s = document.createTextNode(n),
            r = t.childNodes;
        r[e] && t.removeChild(r[e]), r.length ? t.insertBefore(s, r[e]) : t.appendChild(s);
      }
    }

    function u(t, e, i) {
      var o = i.css,
          n = i.media,
          s = i.sourceMap;
      if (n && t.setAttribute("media", n), s && btoa && (o += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s)))), " */")), t.styleSheet) t.styleSheet.cssText = o;else {
        for (; t.firstChild;) {
          t.removeChild(t.firstChild);
        }

        t.appendChild(document.createTextNode(o));
      }
    }

    var m = null,
        f = 0;

    function g(t, e) {
      var i, o, n;

      if (e.singleton) {
        var s = f++;
        i = m || (m = p(e)), o = d.bind(null, i, s, !1), n = d.bind(null, i, s, !0);
      } else i = p(e), o = u.bind(null, i, e), n = function n() {
        !function (t) {
          if (null === t.parentNode) return !1;
          t.parentNode.removeChild(t);
        }(i);
      };

      return o(t), function (e) {
        if (e) {
          if (e.css === t.css && e.media === t.media && e.sourceMap === t.sourceMap) return;
          o(t = e);
        } else n();
      };
    }

    t.exports = function (t, e) {
      (e = e || {}).attributes = "object" == _typeof(e.attributes) ? e.attributes : {}, e.singleton || "boolean" == typeof e.singleton || (e.singleton = s());
      var i = a(t, e);
      return l(i, e), function (t) {
        for (var o = [], s = 0; s < i.length; s++) {
          var r = i[s],
              p = n[r.id];
          p && (p.refs--, o.push(p));
        }

        t && l(a(t, e), e);

        for (var c = 0; c < o.length; c++) {
          var h = o[c];

          if (0 === h.refs) {
            for (var d = 0; d < h.parts.length; d++) {
              h.parts[d]();
            }

            delete n[h.id];
          }
        }
      };
    };
  }, function (t, e, i) {
    "use strict";

    var o = this && this.__assign || function () {
      return (o = Object.assign || function (t) {
        for (var e, i = 1, o = arguments.length; i < o; i++) {
          for (var n in e = arguments[i]) {
            Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
          }
        }

        return t;
      }).apply(this, arguments);
    },
        n = this && this.__importStar || function (t) {
      if (t && t.__esModule) return t;
      var e = {};
      if (null != t) for (var i in t) {
        Object.hasOwnProperty.call(t, i) && (e[i] = t[i]);
      }
      return e["default"] = t, e;
    };

    Object.defineProperty(e, "__esModule", {
      value: !0
    });
    var s = i(0),
        r = i(3),
        a = n(i(1)),
        l = i(2);
    r.Litepicker.prototype.show = function (t) {
      void 0 === t && (t = null);
      var e = t || this.options.element;
      if (this.triggerElement = e, this.options.inlineMode) return this.picker.style.position = "static", this.picker.style.display = "inline-block", this.picker.style.top = null, this.picker.style.left = null, this.picker.style.bottom = null, void (this.picker.style.right = null);
      if (this.options.scrollToDate) if (!this.options.startDate || t && t !== this.options.element) {
        if (t && this.options.endDate && t === this.options.elementEnd) {
          var i = this.options.endDate.clone();
          i.setDate(1), this.options.numberOfMonths > 1 && i.setMonth(i.getMonth() - (this.options.numberOfMonths - 1)), this.calendars[0] = i.clone();
        }
      } else {
        var o = this.options.startDate.clone();
        o.setDate(1), this.calendars[0] = o.clone();
      }

      if (this.options.mobileFriendly && l.isMobile()) {
        this.picker.style.position = "fixed", this.picker.style.display = "block", "portrait" === l.getOrientation() ? (this.options.numberOfMonths = 1, this.options.numberOfColumns = 1) : (this.options.numberOfMonths = 2, this.options.numberOfColumns = 2), this.render();
        var n = this.picker.getBoundingClientRect();
        return this.picker.style.top = "calc(50% - " + n.height / 2 + "px)", this.picker.style.left = "calc(50% - " + n.width / 2 + "px)", this.picker.style.right = null, this.picker.style.bottom = null, this.picker.style.zIndex = this.options.zIndex, this.backdrop.style.display = "block", this.backdrop.style.zIndex = this.options.zIndex - 1, document.body.classList.add(a.litepickerOpen), "function" == typeof this.options.onShow && this.options.onShow.call(this), void (t ? t.blur() : this.options.element.blur());
      }

      this.render(), this.picker.style.position = "absolute", this.picker.style.display = "block", this.picker.style.zIndex = this.options.zIndex;
      var s = e.getBoundingClientRect(),
          r = this.picker.getBoundingClientRect(),
          p = s.bottom,
          c = s.left,
          h = 0,
          d = 0,
          u = 0,
          m = 0;

      if (this.options.parentEl) {
        var f = this.picker.parentNode.getBoundingClientRect();
        p -= f.bottom, (p += s.height) + r.height > window.innerHeight && s.top - f.top - s.height > 0 && (u = s.top - f.top - s.height), (c -= f.left) + r.width > window.innerWidth && s.right - f.right - r.width > 0 && (m = s.right - f.right - r.width);
      } else h = window.scrollX || window.pageXOffset, d = window.scrollY || window.pageYOffset, p + r.height > window.innerHeight && s.top - r.height > 0 && (u = s.top - r.height), c + r.width > window.innerWidth && s.right - r.width > 0 && (m = s.right - r.width);

      this.picker.style.top = (u || p) + d + "px", this.picker.style.left = (m || c) + h + "px", this.picker.style.right = null, this.picker.style.bottom = null, "function" == typeof this.options.onShow && this.options.onShow.call(this);
    }, r.Litepicker.prototype.hide = function () {
      this.isShowning() && (this.datePicked.length = 0, this.updateInput(), this.options.inlineMode ? this.render() : (this.picker.style.display = "none", "function" == typeof this.options.onHide && this.options.onHide.call(this), this.options.mobileFriendly && (document.body.classList.remove(a.litepickerOpen), this.backdrop.style.display = "none")));
    }, r.Litepicker.prototype.getDate = function () {
      return this.getStartDate();
    }, r.Litepicker.prototype.getStartDate = function () {
      return this.options.startDate ? this.options.startDate.clone().getDateInstance() : null;
    }, r.Litepicker.prototype.getEndDate = function () {
      return this.options.endDate ? this.options.endDate.clone().getDateInstance() : null;
    }, r.Litepicker.prototype.setDate = function (t) {
      this.setStartDate(t), "function" == typeof this.options.onSelect && this.options.onSelect.call(this, this.getDate());
    }, r.Litepicker.prototype.setStartDate = function (t) {
      t && (this.options.startDate = new s.DateTime(t, this.options.format, this.options.lang), this.updateInput());
    }, r.Litepicker.prototype.setEndDate = function (t) {
      t && (this.options.endDate = new s.DateTime(t, this.options.format, this.options.lang), this.options.startDate.getTime() > this.options.endDate.getTime() && (this.options.endDate = this.options.startDate.clone(), this.options.startDate = new s.DateTime(t, this.options.format, this.options.lang)), this.updateInput());
    }, r.Litepicker.prototype.setDateRange = function (t, e) {
      this.triggerElement = void 0, this.setStartDate(t), this.setEndDate(e), this.updateInput(), "function" == typeof this.options.onSelect && this.options.onSelect.call(this, this.getStartDate(), this.getEndDate());
    }, r.Litepicker.prototype.gotoDate = function (t, e) {
      void 0 === e && (e = 0);
      var i = new s.DateTime(t);
      i.setDate(1), this.calendars[e] = i.clone(), this.render();
    }, r.Litepicker.prototype.setLockDays = function (t) {
      this.options.lockDays = s.DateTime.convertArray(t, this.options.lockDaysFormat), this.render();
    }, r.Litepicker.prototype.setBookedDays = function (t) {
      this.options.bookedDays = s.DateTime.convertArray(t, this.options.bookedDaysFormat), this.render();
    }, r.Litepicker.prototype.setHighlightedDays = function (t) {
      this.options.highlightedDays = s.DateTime.convertArray(t, this.options.highlightedDaysFormat), this.render();
    }, r.Litepicker.prototype.setOptions = function (t) {
      delete t.element, delete t.elementEnd, delete t.parentEl, t.startDate && (t.startDate = new s.DateTime(t.startDate, this.options.format, this.options.lang)), t.endDate && (t.endDate = new s.DateTime(t.endDate, this.options.format, this.options.lang));
      var e = o(o({}, this.options.dropdowns), t.dropdowns),
          i = o(o({}, this.options.buttonText), t.buttonText),
          n = o(o({}, this.options.tooltipText), t.tooltipText);
      this.options = o(o({}, this.options), t), this.options.dropdowns = o({}, e), this.options.buttonText = o({}, i), this.options.tooltipText = o({}, n), !this.options.singleMode || this.options.startDate instanceof s.DateTime || (this.options.startDate = null, this.options.endDate = null), this.options.singleMode || this.options.startDate instanceof s.DateTime && this.options.endDate instanceof s.DateTime || (this.options.startDate = null, this.options.endDate = null);

      for (var r = 0; r < this.options.numberOfMonths; r += 1) {
        var a = this.options.startDate ? this.options.startDate.clone() : new s.DateTime();
        a.setDate(1), a.setMonth(a.getMonth() + r), this.calendars[r] = a;
      }

      this.options.lockDays.length && (this.options.lockDays = s.DateTime.convertArray(this.options.lockDays, this.options.lockDaysFormat)), this.options.bookedDays.length && (this.options.bookedDays = s.DateTime.convertArray(this.options.bookedDays, this.options.bookedDaysFormat)), this.options.highlightedDays.length && (this.options.highlightedDays = s.DateTime.convertArray(this.options.highlightedDays, this.options.highlightedDaysFormat)), this.render(), this.options.inlineMode && this.show(), this.updateInput();
    }, r.Litepicker.prototype.clearSelection = function () {
      this.options.startDate = null, this.options.endDate = null, this.datePicked.length = 0, this.updateInput(), this.isShowning() && this.render();
    }, r.Litepicker.prototype.destroy = function () {
      this.picker && this.picker.parentNode && (this.picker.parentNode.removeChild(this.picker), this.picker = null), this.backdrop && this.backdrop.parentNode && this.backdrop.parentNode.removeChild(this.backdrop);
    };
  }, function (t, e, i) {
    "use strict";

    Object.defineProperty(e, "__esModule", {
      value: !0
    });
  }]).Litepicker;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./assets/lib/date-range.js":
/*!**********************************!*\
  !*** ./assets/lib/date-range.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.symbol */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.symbol.to-string-tag */ "./node_modules/core-js/modules/es.symbol.to-string-tag.js");

__webpack_require__(/*! core-js/modules/es.array.concat */ "./node_modules/core-js/modules/es.array.concat.js");

__webpack_require__(/*! core-js/modules/es.array.filter */ "./node_modules/core-js/modules/es.array.filter.js");

__webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/es.array.includes */ "./node_modules/core-js/modules/es.array.includes.js");

__webpack_require__(/*! core-js/modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.join */ "./node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! core-js/modules/es.array.map */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.array.splice */ "./node_modules/core-js/modules/es.array.splice.js");

__webpack_require__(/*! core-js/modules/es.date.to-string */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.function.bind */ "./node_modules/core-js/modules/es.function.bind.js");

__webpack_require__(/*! core-js/modules/es.json.to-string-tag */ "./node_modules/core-js/modules/es.json.to-string-tag.js");

__webpack_require__(/*! core-js/modules/es.math.to-string-tag */ "./node_modules/core-js/modules/es.math.to-string-tag.js");

__webpack_require__(/*! core-js/modules/es.number.constructor */ "./node_modules/core-js/modules/es.number.constructor.js");

__webpack_require__(/*! core-js/modules/es.object.assign */ "./node_modules/core-js/modules/es.object.assign.js");

__webpack_require__(/*! core-js/modules/es.object.create */ "./node_modules/core-js/modules/es.object.create.js");

__webpack_require__(/*! core-js/modules/es.object.define-property */ "./node_modules/core-js/modules/es.object.define-property.js");

__webpack_require__(/*! core-js/modules/es.object.keys */ "./node_modules/core-js/modules/es.object.keys.js");

__webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 *
 *     Litepicker module ranges v0.0.4 (https://github.com/wakirin/Litepicker-module-ranges)
 *     Package: litepicker-module-ranges (https://www.npmjs.com/package/litepicker-module-ranges)
 *     License: MIT (https://github.com/wakirin/Litepicker-module-ranges/blob/master/LICENCE.md)
 *     Copyright 2019-2020 Rinat G.
 *
 *     Hash: 633939847f21d7631f31
 *     Generated on: 1592908186387
 *
 */
!function (e, t) {
  if ("object" == ( false ? undefined : _typeof(exports)) && "object" == ( false ? undefined : _typeof(module))) module.exports = t();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else { var r, n; }
}(window, function () {
  return function (e) {
    var t = {};

    function n(r) {
      if (t[r]) return t[r].exports;
      var o = t[r] = {
        i: r,
        l: !1,
        exports: {}
      };
      return e[r].call(o.exports, o, o.exports, n), o.l = !0, o.exports;
    }

    return n.m = e, n.c = t, n.d = function (e, t, r) {
      n.o(e, t) || Object.defineProperty(e, t, {
        enumerable: !0,
        get: r
      });
    }, n.r = function (e) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(e, "__esModule", {
        value: !0
      });
    }, n.t = function (e, t) {
      if (1 & t && (e = n(e)), 8 & t) return e;
      if (4 & t && "object" == _typeof(e) && e && e.__esModule) return e;
      var r = Object.create(null);
      if (n.r(r), Object.defineProperty(r, "default", {
        enumerable: !0,
        value: e
      }), 2 & t && "string" != typeof e) for (var o in e) {
        n.d(r, o, function (t) {
          return e[t];
        }.bind(null, o));
      }
      return r;
    }, n.n = function (e) {
      var t = e && e.__esModule ? function () {
        return e["default"];
      } : function () {
        return e;
      };
      return n.d(t, "a", t), t;
    }, n.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, n.p = "", n(n.s = 0);
  }([function (e, t, n) {
    "use strict";

    var r = this && this.__assign || function () {
      return (r = Object.assign || function (e) {
        for (var t, n = 1, r = arguments.length; n < r; n++) {
          for (var o in t = arguments[n]) {
            Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
          }
        }

        return e;
      }).apply(this, arguments);
    },
        o = this && this.__importStar || function (e) {
      if (e && e.__esModule) return e;
      var t = {};
      if (null != e) for (var n in e) {
        Object.hasOwnProperty.call(e, n) && (t[n] = e[n]);
      }
      return t["default"] = e, t;
    };

    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var i = o(n(1));
    n(5);

    var a,
        c,
        s = window.Litepicker,
        u = new Date(),
        l = new Date(),
        d = function d(e, t) {
      var n = new Date(e);
      return n.setDate(n.getDate() - t), n;
    },
        f = {
      "Cette Semaine": [d(u, -7), l],
      "Ce mois": (a = u, c = new Date(a), [c, new Date(a.getFullYear(), a.getMonth() + 1, 0)]),
      "Mois prochain": function (e) {
        var t = new Date(e);
        return t.setDate(1), t.setMonth(e.getMonth() + 1), [t, new Date(e.getFullYear(), e.getMonth() + 2, 0)];
      }(u),
      "2 Mois": function (e) {
        var t = new Date(e);
        return t.setDate(1), t.setMonth(e.getMonth() + 1), [t, new Date(e.getFullYear(), e.getMonth() + 3, 0)];
      }(u),
      "6 Mois": function (e) {
        var t = new Date(e);
        return t.setDate(1), t.setMonth(e.getMonth() + 1), [t, new Date(e.getFullYear(), e.getMonth() + 7, 0)];
      }(u),
      "1 an": function (e) {
        var t = new Date(e);
        return t.setDate(1), t.setMonth(e.getMonth() + 1), [t, new Date(e.getFullYear(), e.getMonth() + 13, 0)];
      }(u)
    };

    s.prototype.enableModuleRanges = function (e) {
      if (e.options.singleMode) console.warn("Litepicker: module ranges are disabled since singleMode is enabled.");else {
        var t = r(r({}, {
          position: "left",
          ranges: {}
        }), e.options.moduleRanges);
        Object.keys(t.ranges).length || (t.ranges = r({}, f));
        var n = document.createElement("div");
        n.className = i.containerPredefinedRanges, Object.keys(t.ranges).forEach(function (r) {
          var o = t.ranges[r],
              i = document.createElement("div");
          i.innerText = r, i.dataset.start = o[0].getTime(), i.dataset.end = o[1].getTime(), i.addEventListener("click", function (t) {
            var n = t.target;
            n && (e.setDateRange(Number(n.dataset.start), Number(n.dataset.end)), e.gotoDate(Number(n.dataset.start)));
          }), n.appendChild(i);
        });
        var o = e.picker.querySelector("." + i.containerMain);
        ["bottom", "right"].includes(t.position) ? o.appendChild(n) : o.prepend(n), ["top", "bottom"].includes(t.position) ? (n.classList.add(i.flexRow), o.classList.add(i.flexColumn)) : o.classList.remove(i.flexColumn);
      }
    };
  }, function (e, t, n) {
    var r = n(2),
        o = n(3);
    "string" == typeof (o = o.__esModule ? o["default"] : o) && (o = [[e.i, o, ""]]);
    var i = {
      insert: "head",
      singleton: !1
    };
    r(o, i);
    e.exports = o.locals || {};
  }, function (e, t, n) {
    "use strict";

    var r,
        o = function o() {
      return void 0 === r && (r = Boolean(window && document && document.all && !window.atob)), r;
    },
        i = function () {
      var e = {};
      return function (t) {
        if (void 0 === e[t]) {
          var n = document.querySelector(t);
          if (window.HTMLIFrameElement && n instanceof window.HTMLIFrameElement) try {
            n = n.contentDocument.head;
          } catch (e) {
            n = null;
          }
          e[t] = n;
        }

        return e[t];
      };
    }(),
        a = [];

    function c(e) {
      for (var t = -1, n = 0; n < a.length; n++) {
        if (a[n].identifier === e) {
          t = n;
          break;
        }
      }

      return t;
    }

    function s(e, t) {
      for (var n = {}, r = [], o = 0; o < e.length; o++) {
        var i = e[o],
            s = t.base ? i[0] + t.base : i[0],
            u = n[s] || 0,
            l = "".concat(s, " ").concat(u);
        n[s] = u + 1;
        var d = c(l),
            f = {
          css: i[1],
          media: i[2],
          sourceMap: i[3]
        };
        -1 !== d ? (a[d].references++, a[d].updater(f)) : a.push({
          identifier: l,
          updater: b(f, t),
          references: 1
        }), r.push(l);
      }

      return r;
    }

    function u(e) {
      var t = document.createElement("style"),
          r = e.attributes || {};

      if (void 0 === r.nonce) {
        var o = n.nc;
        o && (r.nonce = o);
      }

      if (Object.keys(r).forEach(function (e) {
        t.setAttribute(e, r[e]);
      }), "function" == typeof e.insert) e.insert(t);else {
        var a = i(e.insert || "head");
        if (!a) throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
        a.appendChild(t);
      }
      return t;
    }

    var l,
        d = (l = [], function (e, t) {
      return l[e] = t, l.filter(Boolean).join("\n");
    });

    function f(e, t, n, r) {
      var o = n ? "" : r.media ? "@media ".concat(r.media, " {").concat(r.css, "}") : r.css;
      if (e.styleSheet) e.styleSheet.cssText = d(t, o);else {
        var i = document.createTextNode(o),
            a = e.childNodes;
        a[t] && e.removeChild(a[t]), a.length ? e.insertBefore(i, a[t]) : e.appendChild(i);
      }
    }

    function p(e, t, n) {
      var r = n.css,
          o = n.media,
          i = n.sourceMap;
      if (o ? e.setAttribute("media", o) : e.removeAttribute("media"), i && btoa && (r += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i)))), " */")), e.styleSheet) e.styleSheet.cssText = r;else {
        for (; e.firstChild;) {
          e.removeChild(e.firstChild);
        }

        e.appendChild(document.createTextNode(r));
      }
    }

    var m = null,
        v = 0;

    function b(e, t) {
      var n, r, o;

      if (t.singleton) {
        var i = v++;
        n = m || (m = u(t)), r = f.bind(null, n, i, !1), o = f.bind(null, n, i, !0);
      } else n = u(t), r = p.bind(null, n, t), o = function o() {
        !function (e) {
          if (null === e.parentNode) return !1;
          e.parentNode.removeChild(e);
        }(n);
      };

      return r(e), function (t) {
        if (t) {
          if (t.css === e.css && t.media === e.media && t.sourceMap === e.sourceMap) return;
          r(e = t);
        } else o();
      };
    }

    e.exports = function (e, t) {
      (t = t || {}).singleton || "boolean" == typeof t.singleton || (t.singleton = o());
      var n = s(e = e || [], t);
      return function (e) {
        if (e = e || [], "[object Array]" === Object.prototype.toString.call(e)) {
          for (var r = 0; r < n.length; r++) {
            var o = c(n[r]);
            a[o].references--;
          }

          for (var i = s(e, t), u = 0; u < n.length; u++) {
            var l = c(n[u]);
            0 === a[l].references && (a[l].updater(), a.splice(l, 1));
          }

          n = i;
        }
      };
    };
  }, function (e, t, n) {
    (t = n(4)(!1)).push([e.i, ".container__main.flex-column{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.container__main .container__predefined-ranges{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;max-width:100px;width:100px;background:#fff;padding:5px;-webkit-box-shadow:0 0 5px #ddd;box-shadow:0 0 5px #ddd;border-radius:3px;margin:5px 3px}.container__main .container__predefined-ranges.flex-row{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:distribute;justify-content:space-around;max-width:none;width:auto}.container__main .container__predefined-ranges>div{padding:3px 0;color:#2196F3}.container__main .container__predefined-ranges>div:hover{cursor:default;opacity:.6}\n", ""]), t.locals = {
      containerMain: "container__main",
      flexColumn: "flex-column",
      containerPredefinedRanges: "container__predefined-ranges",
      flexRow: "flex-row"
    }, e.exports = t;
  }, function (e, t, n) {
    "use strict";

    e.exports = function (e) {
      var t = [];
      return t.toString = function () {
        return this.map(function (t) {
          var n = function (e, t) {
            var n = e[1] || "",
                r = e[3];
            if (!r) return n;

            if (t && "function" == typeof btoa) {
              var o = (a = r, c = btoa(unescape(encodeURIComponent(JSON.stringify(a)))), s = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c), "/*# ".concat(s, " */")),
                  i = r.sources.map(function (e) {
                return "/*# sourceURL=".concat(r.sourceRoot || "").concat(e, " */");
              });
              return [n].concat(i).concat([o]).join("\n");
            }

            var a, c, s;
            return [n].join("\n");
          }(t, e);

          return t[2] ? "@media ".concat(t[2], " {").concat(n, "}") : n;
        }).join("");
      }, t.i = function (e, n, r) {
        "string" == typeof e && (e = [[null, e, ""]]);
        var o = {};
        if (r) for (var i = 0; i < this.length; i++) {
          var a = this[i][0];
          null != a && (o[a] = !0);
        }

        for (var c = 0; c < e.length; c++) {
          var s = [].concat(e[c]);
          r && o[s[0]] || (n && (s[2] ? s[2] = "".concat(n, " and ").concat(s[2]) : s[2] = n), t.push(s));
        }
      }, t;
    };
  }, function (e, t, n) {
    "use strict";

    Object.defineProperty(t, "__esModule", {
      value: !0
    });
  }]);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvbGliL2RhdGUtcGlja2VyLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9saWIvZGF0ZS1yYW5nZS5qcyJdLCJuYW1lcyI6WyJ0IiwiZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJ3aW5kb3ciLCJpIiwibyIsIm4iLCJsIiwiY2FsbCIsIm0iLCJjIiwiZCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwiX19lc01vZHVsZSIsImNyZWF0ZSIsImJpbmQiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZGF0ZUluc3RhbmNlIiwicGFyc2VEYXRlVGltZSIsIkRhdGUiLCJsYW5nIiwiTmFOIiwiY2xvbmUiLCJnZXREYXRlSW5zdGFuY2UiLCJ0ZXN0IiwiZ2V0RGF0ZVplcm9UaW1lIiwiTnVtYmVyIiwicmVnZXgiLCJleGVjIiwicHVzaCIsImxlbmd0aCIsInllYXIiLCJtb250aCIsInNob3J0TW9udGgiLCJsb25nTW9udGgiLCJkYXkiLCJpbmRleCIsImEiLCJlbnRyaWVzIiwiaCIsInUiLCJmb3JtYXRQYXR0ZXJucyIsImdyb3VwIiwiZiIsInBhdHRlcm4iLCJnIiwiUmVnRXhwIiwieSIsImsiLCJ2Iiwic2hvcnRNb250aHMiLCJpbmRleE9mIiwibG9uZ01vbnRocyIsIkQiLCJjb252ZXJ0QXJyYXkiLCJtYXAiLCJBcnJheSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiTU9OVEhfSlMiLCJ0b0xvY2FsZVN0cmluZyIsImpvaW4iLCJ0b0RhdGVTdHJpbmciLCJnZXRTZWNvbmRzIiwiZ2V0RGF5IiwiZ2V0VGltZSIsInNldE1vbnRoIiwic2V0SG91cnMiLCJzZXRTZWNvbmRzIiwic2V0RGF0ZSIsInNldEZ1bGxZZWFyIiwiZ2V0V2VlayIsInRpbWVzdGFtcCIsIk1hdGgiLCJjZWlsIiwiaXNCZXR3ZWVuIiwiaXNCZWZvcmUiLCJFcnJvciIsImlzU2FtZU9yQmVmb3JlIiwiaXNBZnRlciIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWUiLCJhZGQiLCJzdWJ0cmFjdCIsImRpZmYiLCJyb3VuZCIsImZvcm1hdCIsInN1YnN0cmluZyIsImZvcm1hdFRva2VucyIsInJlcGxhY2UiLCJTdHJpbmciLCJzbGljZSIsIkRhdGVUaW1lIiwiaW5zZXJ0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiX2xhc3RFbGVtZW50SW5zZXJ0ZWRCeVN0eWxlTG9hZGVyIiwiZGlzYWJsZUxpdGVwaWNrZXJTdHlsZXMiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsImxvY2FscyIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwiaXNNb2JpbGUiLCJnZXRPcmllbnRhdGlvbiIsImZpbmROZXN0ZWRNb250aEl0ZW0iLCJwYXJlbnROb2RlIiwiY2hpbGROb2RlcyIsIml0ZW0iLCJfX2V4dGVuZHMiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImNvbnN0cnVjdG9yIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJhcHBseSIsIl9faW1wb3J0U3RhciIsIm9wdGlvbnMiLCJlbGVtZW50IiwiZGF0YXNldCIsImtleXMiLCJmb3JFYWNoIiwiZHJvcGRvd25zIiwiYnV0dG9uVGV4dCIsInRvb2x0aXBUZXh0IiwiZWxlbWVudEVuZCIsImFsbG93UmVwaWNrIiwibG9ja0RheXMiLCJsb2NrRGF5c0Zvcm1hdCIsImJvb2tlZERheXMiLCJib29rZWREYXlzRm9ybWF0IiwiaGlnaGxpZ2h0ZWREYXlzIiwiaGlnaGxpZ2h0ZWREYXlzRm9ybWF0IiwiaG90ZWxNb2RlIiwiYm9va2VkRGF5c0luY2x1c2l2aXR5IiwiZGlzYWxsb3dCb29rZWREYXlzSW5SYW5nZSIsInNlbGVjdEZvcndhcmQiLCJwYXJzZUlucHV0Iiwic3RhcnREYXRlIiwic2luZ2xlTW9kZSIsImVuZERhdGUiLCJpc05hTiIsIm51bWJlck9mTW9udGhzIiwiY2FsZW5kYXJzIiwic2hvd1Rvb2x0aXAiLCJ0b29sdGlwUGx1cmFsU2VsZWN0b3IiLCJwbHVyYWxTZWxlY3RvciIsIkludGwiLCJQbHVyYWxSdWxlcyIsInNlbGVjdCIsImFicyIsImxvYWRQb2x5ZmlsbHNGb3JJRTExIiwib25Jbml0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uQ2xpY2siLCJwaWNrZXIiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwibGl0ZXBpY2tlciIsInN0eWxlIiwiZGlzcGxheSIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsImF1dG9SZWZyZXNoIiwiSFRNTEVsZW1lbnQiLCJvbklucHV0IiwibW9kdWxlTmF2S2V5Ym9hcmQiLCJlbmFibGVNb2R1bGVOYXZLZXlib2FyZCIsInJlbmRlciIsInBhcmVudEVsIiwiaW5saW5lTW9kZSIsIkhUTUxJbnB1dEVsZW1lbnQiLCJib2R5IiwibW9iaWxlRnJpZW5kbHkiLCJiYWNrZHJvcCIsImxpdGVwaWNrZXJCYWNrZHJvcCIsImhpZGUiLCJpc1Nob3duaW5nIiwibnVtYmVyT2ZDb2x1bW5zIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwiaGVpZ2h0IiwibGVmdCIsIndpZHRoIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNob3ciLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJ1cGRhdGVJbnB1dCIsImRlbGltaXRlciIsInNwbGl0IiwiaXNTYW1lUGlja2VyIiwiY2xvc2VzdCIsInNob3VsZFNob3duIiwic2hvdWxkUmVzZXREYXRlUGlja2VkIiwiZGF0ZVBpY2tlZCIsInNob3VsZFN3YXBEYXRlUGlja2VkIiwic2hvdWxkQ2hlY2tMb2NrRGF5cyIsImRpc2FsbG93TG9ja0RheXNJblJhbmdlIiwic2hvdWxkQ2hlY2tCb29rZWREYXlzIiwidGFyZ2V0IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJkYXlJdGVtIiwicHJldmVudERlZmF1bHQiLCJpc0xvY2tlZCIsImlzQm9va2VkIiwidGltZSIsImxvY2tEYXlzSW5jbHVzaXZpdHkiLCJmaWx0ZXIiLCJvbkVycm9yIiwiYW55Qm9va2VkRGF5c0FzQ2hlY2tvdXQiLCJhdXRvQXBwbHkiLCJzZXREYXRlUmFuZ2UiLCJidXR0b25QcmV2aW91c01vbnRoIiwibW92ZUJ5T25lTW9udGgiLCJzcGxpdFZpZXciLCJtb250aEl0ZW0iLCJnb3RvRGF0ZSIsIm9uQ2hhbmdlTW9udGgiLCJidXR0b25OZXh0TW9udGgiLCJidXR0b25DYW5jZWwiLCJidXR0b25BcHBseSIsImNvbnRhaW5lclRvb2x0aXAiLCJ2aXNpYmlsaXR5IiwiaW5uZXJIVE1MIiwib25TaG93VG9vbHRpcCIsImhpZGVUb29sdGlwIiwic2hvdWxkQWxsb3dNb3VzZUVudGVyIiwic2hvdWxkQWxsb3dSZXBpY2siLCJpc0RheUl0ZW0iLCJvbkRheUhvdmVyIiwidG9TdHJpbmciLCJ0cmlnZ2VyRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyZW5kZXJEYXkiLCJpc0luUmFuZ2UiLCJpc0VuZERhdGUiLCJpc0ZsaXBwZWQiLCJyZW1vdmUiLCJzdGFydHNXaXRoIiwib25TZWxlY3QiLCJnZXRTdGFydERhdGUiLCJnZXRFbmREYXRlIiwiRWxlbWVudCIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwicGFyZW50RWxlbWVudCIsIm5vZGVUeXBlIiwiQ2FsZW5kYXIiLCJMaXRlcGlja2VyIiwiZmlyc3REYXkiLCJ6SW5kZXgiLCJtaW5EYXRlIiwibWF4RGF0ZSIsIm1pbkRheXMiLCJtYXhEYXlzIiwic2VsZWN0QmFja3dhcmQiLCJzaG93V2Vla051bWJlcnMiLCJkaXNhYmxlV2Vla2VuZHMiLCJzY3JvbGxUb0RhdGUiLCJ1c2VSZXNldEJ0biIsIm1pblllYXIiLCJtYXhZZWFyIiwibW9udGhzIiwieWVhcnMiLCJjYW5jZWwiLCJwcmV2aW91c01vbnRoIiwibmV4dE1vbnRoIiwicmVzZXQiLCJvbmUiLCJvdGhlciIsIm9uU2hvdyIsIm9uSGlkZSIsIm9uUmVuZGVyIiwib25SZW5kZXJEYXkiLCJvbkNoYW5nZVllYXIiLCJyZXNldEJ0bkNhbGxiYWNrIiwibW9kdWxlUmFuZ2VzIiwiY29udGFpbmVyTWFpbiIsImNvbnRhaW5lck1vbnRocyIsImNvbHVtbnMyIiwiY29sdW1uczMiLCJjb2x1bW5zNCIsInJlbmRlck1vbnRoIiwiaHJlZiIsInJlc2V0QnV0dG9uIiwiY2xlYXJTZWxlY3Rpb24iLCJtb250aEl0ZW1IZWFkZXIiLCJmb290ZXJIVE1MIiwicmVuZGVyRm9vdGVyIiwicmVuZGVyVG9vbHRpcCIsImVuYWJsZU1vZHVsZVJhbmdlcyIsIm1vbnRoSXRlbU5hbWUiLCJ0ZXh0IiwiZGlzYWJsZWQiLCJzZWxlY3RlZCIsIm1vbnRoSXRlbVllYXIiLCJyZXZlcnNlIiwiYiIsInciLCJub1ByZXZpb3VzTW9udGgiLCJub05leHRNb250aCIsIk0iLCJtb250aEl0ZW1XZWVrZGF5c1JvdyIsIngiLCJUIiwiXyIsIndlZWtkYXlOYW1lIiwidGl0bGUiLCJMIiwiY29udGFpbmVyRGF5cyIsIlMiLCJjYWxjU2tpcERheXMiLCJyZW5kZXJXZWVrTnVtYmVyIiwiRSIsIkkiLCJpc1RvZGF5IiwiaXNTdGFydERhdGUiLCJpc0hpZ2hsaWdodGVkIiwiZGF0ZUlzQm9va2VkIiwiY29udGFpbmVyRm9vdGVyIiwicHJldmlld0RhdGVSYW5nZSIsInNldEF0dHJpYnV0ZSIsIndlZWtOdW1iZXIiLCJ3ZWVrZGF5IiwibGl0ZXBpY2tlck9wZW4iLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiY29uY2F0Iiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJCb29sZWFuIiwiYWxsIiwiYXRvYiIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImJhc2UiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInBhcnRzIiwiaWQiLCJyZWZzIiwiYXR0cmlidXRlcyIsIm5vbmNlIiwibmMiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwicmVtb3ZlQ2hpbGQiLCJwb3NpdGlvbiIsImJvdHRvbSIsInJpZ2h0IiwiYmx1ciIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsInNjcm9sbFgiLCJwYWdlWE9mZnNldCIsInNjcm9sbFkiLCJwYWdlWU9mZnNldCIsInNldFN0YXJ0RGF0ZSIsInNldEVuZERhdGUiLCJzZXRMb2NrRGF5cyIsInNldEJvb2tlZERheXMiLCJzZXRIaWdobGlnaHRlZERheXMiLCJzZXRPcHRpb25zIiwiZGVzdHJveSIsImNvbnNvbGUiLCJ3YXJuIiwicmFuZ2VzIiwiY29udGFpbmVyUHJlZGVmaW5lZFJhbmdlcyIsImlubmVyVGV4dCIsInN0YXJ0IiwiZW5kIiwiaW5jbHVkZXMiLCJwcmVwZW5kIiwiZmxleFJvdyIsImZsZXhDb2x1bW4iLCJpZGVudGlmaWVyIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzcGxpY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBRSxVQUFVQSxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDZCw0Q0FBbUJDLE9BQW5CLE1BQThCLDBDQUFtQkMsTUFBbkIsRUFBOUIsR0FBMkRBLE1BQU0sQ0FBQ0QsT0FBUCxHQUFpQkQsQ0FBQyxFQUE3RSxHQUFtRixRQUE0Q0csaUNBQXFCLEVBQWYsb0NBQW1CSCxDQUFuQjtBQUFBO0FBQUE7QUFBQSxvR0FBbEQsR0FBMEUsU0FBN0o7QUFDSCxDQUZBLENBRUVJLE1BRkYsRUFFVSxZQUFZO0FBQ25CLFNBQVEsVUFBVUwsQ0FBVixFQUFhO0FBQ2pCLFFBQUlDLENBQUMsR0FBRyxFQUFSOztBQUNBLGFBQVNLLENBQVQsQ0FBV0MsQ0FBWCxFQUFjO0FBQ1YsVUFBSU4sQ0FBQyxDQUFDTSxDQUFELENBQUwsRUFBVSxPQUFPTixDQUFDLENBQUNNLENBQUQsQ0FBRCxDQUFLTCxPQUFaO0FBQ1YsVUFBSU0sQ0FBQyxHQUFJUCxDQUFDLENBQUNNLENBQUQsQ0FBRCxHQUFPO0FBQUVELFNBQUMsRUFBRUMsQ0FBTDtBQUFRRSxTQUFDLEVBQUUsQ0FBQyxDQUFaO0FBQWVQLGVBQU8sRUFBRTtBQUF4QixPQUFoQjtBQUNBLGFBQU9GLENBQUMsQ0FBQ08sQ0FBRCxDQUFELENBQUtHLElBQUwsQ0FBVUYsQ0FBQyxDQUFDTixPQUFaLEVBQXFCTSxDQUFyQixFQUF3QkEsQ0FBQyxDQUFDTixPQUExQixFQUFtQ0ksQ0FBbkMsR0FBd0NFLENBQUMsQ0FBQ0MsQ0FBRixHQUFNLENBQUMsQ0FBL0MsRUFBbURELENBQUMsQ0FBQ04sT0FBNUQ7QUFDSDs7QUFDRCxXQUNLSSxDQUFDLENBQUNLLENBQUYsR0FBTVgsQ0FBUCxFQUNDTSxDQUFDLENBQUNNLENBQUYsR0FBTVgsQ0FEUCxFQUVDSyxDQUFDLENBQUNPLENBQUYsR0FBTSxVQUFVYixDQUFWLEVBQWFDLENBQWIsRUFBZ0JNLENBQWhCLEVBQW1CO0FBQ3RCRCxPQUFDLENBQUNDLENBQUYsQ0FBSVAsQ0FBSixFQUFPQyxDQUFQLEtBQWFhLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQmYsQ0FBdEIsRUFBeUJDLENBQXpCLEVBQTRCO0FBQUVlLGtCQUFVLEVBQUUsQ0FBQyxDQUFmO0FBQWtCQyxXQUFHLEVBQUVWO0FBQXZCLE9BQTVCLENBQWI7QUFDSCxLQUpELEVBS0NELENBQUMsQ0FBQ1ksQ0FBRixHQUFNLFVBQVVsQixDQUFWLEVBQWE7QUFDaEIscUJBQWUsT0FBT21CLE1BQXRCLElBQWdDQSxNQUFNLENBQUNDLFdBQXZDLElBQXNETixNQUFNLENBQUNDLGNBQVAsQ0FBc0JmLENBQXRCLEVBQXlCbUIsTUFBTSxDQUFDQyxXQUFoQyxFQUE2QztBQUFFQyxhQUFLLEVBQUU7QUFBVCxPQUE3QyxDQUF0RCxFQUF5SFAsTUFBTSxDQUFDQyxjQUFQLENBQXNCZixDQUF0QixFQUF5QixZQUF6QixFQUF1QztBQUFFcUIsYUFBSyxFQUFFLENBQUM7QUFBVixPQUF2QyxDQUF6SDtBQUNILEtBUEQsRUFRQ2YsQ0FBQyxDQUFDTixDQUFGLEdBQU0sVUFBVUEsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ25CLFVBQUssSUFBSUEsQ0FBSixLQUFVRCxDQUFDLEdBQUdNLENBQUMsQ0FBQ04sQ0FBRCxDQUFmLEdBQXFCLElBQUlDLENBQTlCLEVBQWtDLE9BQU9ELENBQVA7QUFDbEMsVUFBSSxJQUFJQyxDQUFKLElBQVMsb0JBQW1CRCxDQUFuQixDQUFULElBQWlDQSxDQUFqQyxJQUFzQ0EsQ0FBQyxDQUFDc0IsVUFBNUMsRUFBd0QsT0FBT3RCLENBQVA7QUFDeEQsVUFBSU8sQ0FBQyxHQUFHTyxNQUFNLENBQUNTLE1BQVAsQ0FBYyxJQUFkLENBQVI7QUFDQSxVQUFLakIsQ0FBQyxDQUFDWSxDQUFGLENBQUlYLENBQUosR0FBUU8sTUFBTSxDQUFDQyxjQUFQLENBQXNCUixDQUF0QixFQUF5QixTQUF6QixFQUFvQztBQUFFUyxrQkFBVSxFQUFFLENBQUMsQ0FBZjtBQUFrQkssYUFBSyxFQUFFckI7QUFBekIsT0FBcEMsQ0FBUixFQUEyRSxJQUFJQyxDQUFKLElBQVMsWUFBWSxPQUFPRCxDQUE1RyxFQUNJLEtBQUssSUFBSVEsQ0FBVCxJQUFjUixDQUFkO0FBQ0lNLFNBQUMsQ0FBQ08sQ0FBRixDQUNJTixDQURKLEVBRUlDLENBRkosRUFHSSxVQUFVUCxDQUFWLEVBQWE7QUFDVCxpQkFBT0QsQ0FBQyxDQUFDQyxDQUFELENBQVI7QUFDSCxTQUZELENBRUV1QixJQUZGLENBRU8sSUFGUCxFQUVhaEIsQ0FGYixDQUhKO0FBREo7QUFRSixhQUFPRCxDQUFQO0FBQ0gsS0F0QkQsRUF1QkNELENBQUMsQ0FBQ0UsQ0FBRixHQUFNLFVBQVVSLENBQVYsRUFBYTtBQUNoQixVQUFJQyxDQUFDLEdBQ0RELENBQUMsSUFBSUEsQ0FBQyxDQUFDc0IsVUFBUCxHQUNNLFlBQVk7QUFDUixlQUFPdEIsQ0FBQyxXQUFSO0FBQ0gsT0FIUCxHQUlNLFlBQVk7QUFDUixlQUFPQSxDQUFQO0FBQ0gsT0FQWDtBQVFBLGFBQU9NLENBQUMsQ0FBQ08sQ0FBRixDQUFJWixDQUFKLEVBQU8sR0FBUCxFQUFZQSxDQUFaLEdBQWdCQSxDQUF2QjtBQUNILEtBakNELEVBa0NDSyxDQUFDLENBQUNDLENBQUYsR0FBTSxVQUFVUCxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDbkIsYUFBT2EsTUFBTSxDQUFDVyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ2hCLElBQWhDLENBQXFDVixDQUFyQyxFQUF3Q0MsQ0FBeEMsQ0FBUDtBQUNILEtBcENELEVBcUNDSyxDQUFDLENBQUNxQixDQUFGLEdBQU0sRUFyQ1AsRUFzQ0FyQixDQUFDLENBQUVBLENBQUMsQ0FBQ3NCLENBQUYsR0FBTSxDQUFSLENBdkNMO0FBeUNILEdBaERNLENBZ0RKLENBQ0MsVUFBVTVCLENBQVYsRUFBYUMsQ0FBYixFQUFnQkssQ0FBaEIsRUFBbUI7QUFDZjs7QUFDQVEsVUFBTSxDQUFDQyxjQUFQLENBQXNCZCxDQUF0QixFQUF5QixZQUF6QixFQUF1QztBQUFFb0IsV0FBSyxFQUFFLENBQUM7QUFBVixLQUF2Qzs7QUFDQSxRQUFJZCxDQUFDLEdBQUksWUFBWTtBQUNqQixlQUFTUCxDQUFULENBQVdDLENBQVgsRUFBY0ssQ0FBZCxFQUFpQkMsQ0FBakIsRUFBb0I7QUFDaEIsYUFBSyxDQUFMLEtBQVdOLENBQVgsS0FBaUJBLENBQUMsR0FBRyxJQUFyQixHQUE0QixLQUFLLENBQUwsS0FBV0ssQ0FBWCxLQUFpQkEsQ0FBQyxHQUFHLElBQXJCLENBQTVCLEVBQXdELEtBQUssQ0FBTCxLQUFXQyxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsT0FBckIsQ0FBeEQsRUFBd0YsS0FBS3NCLFlBQUwsR0FBb0J2QixDQUFDLEdBQUdOLENBQUMsQ0FBQzhCLGFBQUYsQ0FBZ0I3QixDQUFoQixFQUFtQkssQ0FBbkIsRUFBc0JDLENBQXRCLENBQUgsR0FBOEJOLENBQUMsR0FBR0QsQ0FBQyxDQUFDOEIsYUFBRixDQUFnQjdCLENBQWhCLENBQUgsR0FBd0JELENBQUMsQ0FBQzhCLGFBQUYsQ0FBZ0IsSUFBSUMsSUFBSixFQUFoQixDQUFwSyxFQUFtTSxLQUFLQyxJQUFMLEdBQVl6QixDQUEvTTtBQUNIOztBQUNELGFBQ0tQLENBQUMsQ0FBQzhCLGFBQUYsR0FBa0IsVUFBVTdCLENBQVYsRUFBYUssQ0FBYixFQUFnQkMsQ0FBaEIsRUFBbUI7QUFDbEMsWUFBSyxLQUFLLENBQUwsS0FBV0QsQ0FBWCxLQUFpQkEsQ0FBQyxHQUFHLFlBQXJCLEdBQW9DLEtBQUssQ0FBTCxLQUFXQyxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsT0FBckIsQ0FBcEMsRUFBbUUsQ0FBQ04sQ0FBekUsRUFBNkUsT0FBTyxJQUFJOEIsSUFBSixDQUFTRSxHQUFULENBQVA7QUFDN0UsWUFBSWhDLENBQUMsWUFBWThCLElBQWpCLEVBQXVCLE9BQU8sSUFBSUEsSUFBSixDQUFTOUIsQ0FBVCxDQUFQO0FBQ3ZCLFlBQUlBLENBQUMsWUFBWUQsQ0FBakIsRUFBb0IsT0FBT0MsQ0FBQyxDQUFDaUMsS0FBRixHQUFVQyxlQUFWLEVBQVA7QUFDcEIsWUFBSSxjQUFjQyxJQUFkLENBQW1CbkMsQ0FBbkIsQ0FBSixFQUEyQixPQUFPRCxDQUFDLENBQUNxQyxlQUFGLENBQWtCLElBQUlOLElBQUosQ0FBU08sTUFBTSxDQUFDckMsQ0FBRCxDQUFmLENBQWxCLENBQVA7O0FBQzNCLFlBQUksWUFBWSxPQUFPQSxDQUF2QixFQUEwQjtBQUN0QixlQUFLLElBQUlPLENBQUMsR0FBRyxFQUFSLEVBQVlvQixDQUFDLEdBQUcsSUFBckIsRUFBMkIsU0FBU0EsQ0FBQyxHQUFHNUIsQ0FBQyxDQUFDdUMsS0FBRixDQUFRQyxJQUFSLENBQWFsQyxDQUFiLENBQWIsQ0FBM0I7QUFBNEQscUJBQVNzQixDQUFDLENBQUMsQ0FBRCxDQUFWLElBQWlCcEIsQ0FBQyxDQUFDaUMsSUFBRixDQUFPYixDQUFQLENBQWpCO0FBQTVEOztBQUNBLGNBQUlwQixDQUFDLENBQUNrQyxNQUFOLEVBQWM7QUFDVixnQkFBSXhCLENBQUMsR0FBRztBQUFFeUIsa0JBQUksRUFBRSxJQUFSO0FBQWNDLG1CQUFLLEVBQUUsSUFBckI7QUFBMkJDLHdCQUFVLEVBQUUsSUFBdkM7QUFBNkNDLHVCQUFTLEVBQUUsSUFBeEQ7QUFBOERDLGlCQUFHLEVBQUUsSUFBbkU7QUFBeUUxQixtQkFBSyxFQUFFO0FBQWhGLGFBQVI7QUFDQWIsYUFBQyxDQUFDLENBQUQsQ0FBRCxDQUFLd0MsS0FBTCxHQUFhLENBQWIsS0FBbUI5QixDQUFDLENBQUNHLEtBQUYsSUFBVyxLQUE5Qjs7QUFDQSxpQkFBSyxJQUFJNEIsQ0FBQyxHQUFHLENBQVIsRUFBV3hDLENBQUMsR0FBR0ssTUFBTSxDQUFDb0MsT0FBUCxDQUFlMUMsQ0FBZixDQUFwQixFQUF1Q3lDLENBQUMsR0FBR3hDLENBQUMsQ0FBQ2lDLE1BQTdDLEVBQXFETyxDQUFDLEVBQXRELEVBQTBEO0FBQ3RELGtCQUFJdEIsQ0FBQyxHQUFHbEIsQ0FBQyxDQUFDd0MsQ0FBRCxDQUFUO0FBQUEsa0JBQ0lyQyxDQUFDLEdBQUdlLENBQUMsQ0FBQyxDQUFELENBRFQ7QUFBQSxrQkFFSXdCLENBQUMsR0FBR3hCLENBQUMsQ0FBQyxDQUFELENBRlQ7QUFBQSxrQkFHSWQsQ0FBQyxHQUFHeUIsTUFBTSxDQUFDMUIsQ0FBRCxDQUhkO0FBQUEsa0JBSUl3QyxDQUFDLEdBQUdwRCxDQUFDLENBQUNxRCxjQUFGLENBQWlCRixDQUFDLENBQUMsQ0FBRCxDQUFsQixFQUF1QjVDLENBQXZCLENBSlI7QUFBQSxrQkFLSUksQ0FBQyxHQUFHeUMsQ0FBQyxDQUFDRSxLQUxWO0FBQUEsa0JBTUlDLENBQUMsR0FBR0gsQ0FBQyxDQUFDSSxPQU5WO0FBT0N0QyxlQUFDLENBQUNQLENBQUQsQ0FBRCxHQUFPRSxDQUFDLEdBQUcsQ0FBWixFQUFpQkssQ0FBQyxDQUFDRyxLQUFGLElBQVdrQyxDQUE1QixFQUFpQ3JDLENBQUMsQ0FBQ0csS0FBRixJQUFXLEtBQTVDO0FBQ0g7O0FBQ0QsZ0JBQUlvQyxDQUFDLEdBQUcsSUFBSUMsTUFBSixDQUFXLE1BQU14QyxDQUFDLENBQUNHLEtBQVIsR0FBZ0IsR0FBM0IsQ0FBUjs7QUFDQSxnQkFBSW9DLENBQUMsQ0FBQ3JCLElBQUYsQ0FBT25DLENBQVAsQ0FBSixFQUFlO0FBQ1gsa0JBQUkwRCxDQUFDLEdBQUdGLENBQUMsQ0FBQ2pCLElBQUYsQ0FBT3ZDLENBQVAsQ0FBUjtBQUFBLGtCQUNJMkQsQ0FBQyxHQUFHdEIsTUFBTSxDQUFDcUIsQ0FBQyxDQUFDekMsQ0FBQyxDQUFDeUIsSUFBSCxDQUFGLENBRGQ7QUFBQSxrQkFFSWtCLENBQUMsR0FBRyxJQUZSO0FBR0EzQyxlQUFDLENBQUMwQixLQUFGLEdBQVdpQixDQUFDLEdBQUd2QixNQUFNLENBQUNxQixDQUFDLENBQUN6QyxDQUFDLENBQUMwQixLQUFILENBQUYsQ0FBTixHQUFxQixDQUFwQyxHQUF5QzFCLENBQUMsQ0FBQzJCLFVBQUYsR0FBZ0JnQixDQUFDLEdBQUc3RCxDQUFDLENBQUM4RCxXQUFGLENBQWN2RCxDQUFkLEVBQWlCd0QsT0FBakIsQ0FBeUJKLENBQUMsQ0FBQ3pDLENBQUMsQ0FBQzJCLFVBQUgsQ0FBMUIsQ0FBcEIsR0FBaUUzQixDQUFDLENBQUM0QixTQUFGLEtBQWdCZSxDQUFDLEdBQUc3RCxDQUFDLENBQUNnRSxVQUFGLENBQWF6RCxDQUFiLEVBQWdCd0QsT0FBaEIsQ0FBd0JKLENBQUMsQ0FBQ3pDLENBQUMsQ0FBQzRCLFNBQUgsQ0FBekIsQ0FBcEIsQ0FBMUc7QUFDQSxrQkFBSW1CLENBQUMsR0FBRzNCLE1BQU0sQ0FBQ3FCLENBQUMsQ0FBQ3pDLENBQUMsQ0FBQzZCLEdBQUgsQ0FBRixDQUFOLElBQW9CLENBQTVCO0FBQ0EscUJBQU8sSUFBSWhCLElBQUosQ0FBUzZCLENBQVQsRUFBWUMsQ0FBWixFQUFlSSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCLENBQTNCLENBQVA7QUFDSDtBQUNKO0FBQ0o7O0FBQ0QsZUFBT2pFLENBQUMsQ0FBQ3FDLGVBQUYsQ0FBa0IsSUFBSU4sSUFBSixDQUFTOUIsQ0FBVCxDQUFsQixDQUFQO0FBQ0gsT0FoQ0QsRUFpQ0NELENBQUMsQ0FBQ2tFLFlBQUYsR0FBaUIsVUFBVWpFLENBQVYsRUFBYUssQ0FBYixFQUFnQjtBQUM5QixlQUFPTCxDQUFDLENBQUNrRSxHQUFGLENBQU0sVUFBVWxFLENBQVYsRUFBYTtBQUN0QixpQkFBT0EsQ0FBQyxZQUFZbUUsS0FBYixHQUNEbkUsQ0FBQyxDQUFDa0UsR0FBRixDQUFNLFVBQVVsRSxDQUFWLEVBQWE7QUFDZixtQkFBTyxJQUFJRCxDQUFKLENBQU1DLENBQU4sRUFBU0ssQ0FBVCxDQUFQO0FBQ0gsV0FGRCxDQURDLEdBSUQsSUFBSU4sQ0FBSixDQUFNQyxDQUFOLEVBQVNLLENBQVQsQ0FKTjtBQUtILFNBTk0sQ0FBUDtBQU9ILE9BekNELEVBMENDTixDQUFDLENBQUNxQyxlQUFGLEdBQW9CLFVBQVVyQyxDQUFWLEVBQWE7QUFDOUIsZUFBTyxJQUFJK0IsSUFBSixDQUFTL0IsQ0FBQyxDQUFDcUUsV0FBRixFQUFULEVBQTBCckUsQ0FBQyxDQUFDc0UsUUFBRixFQUExQixFQUF3Q3RFLENBQUMsQ0FBQ3VFLE9BQUYsRUFBeEMsRUFBcUQsQ0FBckQsRUFBd0QsQ0FBeEQsRUFBMkQsQ0FBM0QsRUFBOEQsQ0FBOUQsQ0FBUDtBQUNILE9BNUNELEVBNkNDdkUsQ0FBQyxDQUFDOEQsV0FBRixHQUFnQixVQUFVN0QsQ0FBVixFQUFhO0FBQzFCLGVBQU9ELENBQUMsQ0FBQ3dFLFFBQUYsQ0FBV0wsR0FBWCxDQUFlLFVBQVVuRSxDQUFWLEVBQWE7QUFDL0IsaUJBQU8sSUFBSStCLElBQUosQ0FBUyxJQUFULEVBQWUvQixDQUFmLEVBQWtCeUUsY0FBbEIsQ0FBaUN4RSxDQUFqQyxFQUFvQztBQUFFMkMsaUJBQUssRUFBRTtBQUFULFdBQXBDLENBQVA7QUFDSCxTQUZNLENBQVA7QUFHSCxPQWpERCxFQWtEQzVDLENBQUMsQ0FBQ2dFLFVBQUYsR0FBZSxVQUFVL0QsQ0FBVixFQUFhO0FBQ3pCLGVBQU9ELENBQUMsQ0FBQ3dFLFFBQUYsQ0FBV0wsR0FBWCxDQUFlLFVBQVVuRSxDQUFWLEVBQWE7QUFDL0IsaUJBQU8sSUFBSStCLElBQUosQ0FBUyxJQUFULEVBQWUvQixDQUFmLEVBQWtCeUUsY0FBbEIsQ0FBaUN4RSxDQUFqQyxFQUFvQztBQUFFMkMsaUJBQUssRUFBRTtBQUFULFdBQXBDLENBQVA7QUFDSCxTQUZNLENBQVA7QUFHSCxPQXRERCxFQXVEQzVDLENBQUMsQ0FBQ3FELGNBQUYsR0FBbUIsVUFBVXBELENBQVYsRUFBYUssQ0FBYixFQUFnQjtBQUNoQyxnQkFBUUwsQ0FBUjtBQUNJLGVBQUssSUFBTDtBQUNBLGVBQUssTUFBTDtBQUNJLG1CQUFPO0FBQUVxRCxtQkFBSyxFQUFFLE1BQVQ7QUFBaUJFLHFCQUFPLEVBQUUsVUFBVXZELENBQUMsQ0FBQ3lDLE1BQVosR0FBcUI7QUFBL0MsYUFBUDs7QUFDSixlQUFLLEdBQUw7QUFDSSxtQkFBTztBQUFFWSxtQkFBSyxFQUFFLE9BQVQ7QUFBa0JFLHFCQUFPLEVBQUU7QUFBM0IsYUFBUDs7QUFDSixlQUFLLElBQUw7QUFDSSxtQkFBTztBQUFFRixtQkFBSyxFQUFFLE9BQVQ7QUFBa0JFLHFCQUFPLEVBQUU7QUFBM0IsYUFBUDs7QUFDSixlQUFLLEtBQUw7QUFDSSxtQkFBTztBQUFFRixtQkFBSyxFQUFFLFlBQVQ7QUFBdUJFLHFCQUFPLEVBQUUsTUFBTXhELENBQUMsQ0FBQzhELFdBQUYsQ0FBY3hELENBQWQsRUFBaUJvRSxJQUFqQixDQUFzQixHQUF0QixDQUFOLEdBQW1DO0FBQW5FLGFBQVA7O0FBQ0osZUFBSyxNQUFMO0FBQ0ksbUJBQU87QUFBRXBCLG1CQUFLLEVBQUUsV0FBVDtBQUFzQkUscUJBQU8sRUFBRSxNQUFNeEQsQ0FBQyxDQUFDZ0UsVUFBRixDQUFhMUQsQ0FBYixFQUFnQm9FLElBQWhCLENBQXFCLEdBQXJCLENBQU4sR0FBa0M7QUFBakUsYUFBUDs7QUFDSixlQUFLLEdBQUw7QUFDSSxtQkFBTztBQUFFcEIsbUJBQUssRUFBRSxLQUFUO0FBQWdCRSxxQkFBTyxFQUFFO0FBQXpCLGFBQVA7O0FBQ0osZUFBSyxJQUFMO0FBQ0ksbUJBQU87QUFBRUYsbUJBQUssRUFBRSxLQUFUO0FBQWdCRSxxQkFBTyxFQUFFO0FBQXpCLGFBQVA7QUFmUjtBQWlCSCxPQXpFRCxFQTBFQ3hELENBQUMsQ0FBQ3lCLFNBQUYsQ0FBWVUsZUFBWixHQUE4QixZQUFZO0FBQ3ZDLGVBQU8sS0FBS04sWUFBWjtBQUNILE9BNUVELEVBNkVDN0IsQ0FBQyxDQUFDeUIsU0FBRixDQUFZZ0QsY0FBWixHQUE2QixVQUFVekUsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQzFDLGVBQU8sS0FBSzRCLFlBQUwsQ0FBa0I0QyxjQUFsQixDQUFpQ3pFLENBQWpDLEVBQW9DQyxDQUFwQyxDQUFQO0FBQ0gsT0EvRUQsRUFnRkNELENBQUMsQ0FBQ3lCLFNBQUYsQ0FBWWtELFlBQVosR0FBMkIsWUFBWTtBQUNwQyxlQUFPLEtBQUs5QyxZQUFMLENBQWtCOEMsWUFBbEIsRUFBUDtBQUNILE9BbEZELEVBbUZDM0UsQ0FBQyxDQUFDeUIsU0FBRixDQUFZbUQsVUFBWixHQUF5QixZQUFZO0FBQ2xDLGVBQU8sS0FBSy9DLFlBQUwsQ0FBa0IrQyxVQUFsQixFQUFQO0FBQ0gsT0FyRkQsRUFzRkM1RSxDQUFDLENBQUN5QixTQUFGLENBQVlvRCxNQUFaLEdBQXFCLFlBQVk7QUFDOUIsZUFBTyxLQUFLaEQsWUFBTCxDQUFrQmdELE1BQWxCLEVBQVA7QUFDSCxPQXhGRCxFQXlGQzdFLENBQUMsQ0FBQ3lCLFNBQUYsQ0FBWXFELE9BQVosR0FBc0IsWUFBWTtBQUMvQixlQUFPLEtBQUtqRCxZQUFMLENBQWtCaUQsT0FBbEIsRUFBUDtBQUNILE9BM0ZELEVBNEZDOUUsQ0FBQyxDQUFDeUIsU0FBRixDQUFZOEMsT0FBWixHQUFzQixZQUFZO0FBQy9CLGVBQU8sS0FBSzFDLFlBQUwsQ0FBa0IwQyxPQUFsQixFQUFQO0FBQ0gsT0E5RkQsRUErRkN2RSxDQUFDLENBQUN5QixTQUFGLENBQVk2QyxRQUFaLEdBQXVCLFlBQVk7QUFDaEMsZUFBTyxLQUFLekMsWUFBTCxDQUFrQnlDLFFBQWxCLEVBQVA7QUFDSCxPQWpHRCxFQWtHQ3RFLENBQUMsQ0FBQ3lCLFNBQUYsQ0FBWTRDLFdBQVosR0FBMEIsWUFBWTtBQUNuQyxlQUFPLEtBQUt4QyxZQUFMLENBQWtCd0MsV0FBbEIsRUFBUDtBQUNILE9BcEdELEVBcUdDckUsQ0FBQyxDQUFDeUIsU0FBRixDQUFZc0QsUUFBWixHQUF1QixVQUFVL0UsQ0FBVixFQUFhO0FBQ2pDLGVBQU8sS0FBSzZCLFlBQUwsQ0FBa0JrRCxRQUFsQixDQUEyQi9FLENBQTNCLENBQVA7QUFDSCxPQXZHRCxFQXdHQ0EsQ0FBQyxDQUFDeUIsU0FBRixDQUFZdUQsUUFBWixHQUF1QixVQUFVaEYsQ0FBVixFQUFhQyxDQUFiLEVBQWdCSyxDQUFoQixFQUFtQkMsQ0FBbkIsRUFBc0I7QUFDMUMsYUFBSyxDQUFMLEtBQVdQLENBQVgsS0FBaUJBLENBQUMsR0FBRyxDQUFyQixHQUF5QixLQUFLLENBQUwsS0FBV0MsQ0FBWCxLQUFpQkEsQ0FBQyxHQUFHLENBQXJCLENBQXpCLEVBQWtELEtBQUssQ0FBTCxLQUFXSyxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsQ0FBckIsQ0FBbEQsRUFBMkUsS0FBSyxDQUFMLEtBQVdDLENBQVgsS0FBaUJBLENBQUMsR0FBRyxDQUFyQixDQUEzRSxFQUFvRyxLQUFLc0IsWUFBTCxDQUFrQm1ELFFBQWxCLENBQTJCaEYsQ0FBM0IsRUFBOEJDLENBQTlCLEVBQWlDSyxDQUFqQyxFQUFvQ0MsQ0FBcEMsQ0FBcEc7QUFDSCxPQTFHRCxFQTJHQ1AsQ0FBQyxDQUFDeUIsU0FBRixDQUFZd0QsVUFBWixHQUF5QixVQUFVakYsQ0FBVixFQUFhO0FBQ25DLGVBQU8sS0FBSzZCLFlBQUwsQ0FBa0JvRCxVQUFsQixDQUE2QmpGLENBQTdCLENBQVA7QUFDSCxPQTdHRCxFQThHQ0EsQ0FBQyxDQUFDeUIsU0FBRixDQUFZeUQsT0FBWixHQUFzQixVQUFVbEYsQ0FBVixFQUFhO0FBQ2hDLGVBQU8sS0FBSzZCLFlBQUwsQ0FBa0JxRCxPQUFsQixDQUEwQmxGLENBQTFCLENBQVA7QUFDSCxPQWhIRCxFQWlIQ0EsQ0FBQyxDQUFDeUIsU0FBRixDQUFZMEQsV0FBWixHQUEwQixVQUFVbkYsQ0FBVixFQUFhO0FBQ3BDLGVBQU8sS0FBSzZCLFlBQUwsQ0FBa0JzRCxXQUFsQixDQUE4Qm5GLENBQTlCLENBQVA7QUFDSCxPQW5IRCxFQW9IQ0EsQ0FBQyxDQUFDeUIsU0FBRixDQUFZMkQsT0FBWixHQUFzQixVQUFVcEYsQ0FBVixFQUFhO0FBQ2hDLFlBQUlDLENBQUMsR0FBRyxJQUFJOEIsSUFBSixDQUFTLEtBQUtzRCxTQUFMLEVBQVQsQ0FBUjtBQUFBLFlBQ0kvRSxDQUFDLEdBQUcsQ0FBQyxLQUFLdUUsTUFBTCxNQUFpQixJQUFJN0UsQ0FBckIsQ0FBRCxJQUE0QixDQURwQztBQUVBQyxTQUFDLENBQUNpRixPQUFGLENBQVVqRixDQUFDLENBQUNzRSxPQUFGLEtBQWNqRSxDQUF4QjtBQUNBLFlBQUlDLENBQUMsR0FBR04sQ0FBQyxDQUFDNkUsT0FBRixFQUFSO0FBQ0EsZUFBTzdFLENBQUMsQ0FBQzhFLFFBQUYsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxHQUFrQjlFLENBQUMsQ0FBQzRFLE1BQUYsT0FBZTdFLENBQWYsSUFBb0JDLENBQUMsQ0FBQzhFLFFBQUYsQ0FBVyxDQUFYLEVBQWMsSUFBSyxDQUFDLElBQUk5RSxDQUFDLENBQUM0RSxNQUFGLEVBQUosR0FBaUIsQ0FBbEIsSUFBdUIsQ0FBMUMsQ0FBdEMsRUFBcUYsSUFBSVMsSUFBSSxDQUFDQyxJQUFMLENBQVUsQ0FBQ2hGLENBQUMsR0FBR04sQ0FBQyxDQUFDNkUsT0FBRixFQUFMLElBQW9CLE1BQTlCLENBQWhHO0FBQ0gsT0ExSEQsRUEySEM5RSxDQUFDLENBQUN5QixTQUFGLENBQVlTLEtBQVosR0FBb0IsWUFBWTtBQUM3QixlQUFPLElBQUlsQyxDQUFKLENBQU0sS0FBS21DLGVBQUwsRUFBTixDQUFQO0FBQ0gsT0E3SEQsRUE4SENuQyxDQUFDLENBQUN5QixTQUFGLENBQVkrRCxTQUFaLEdBQXdCLFVBQVV4RixDQUFWLEVBQWFDLENBQWIsRUFBZ0JLLENBQWhCLEVBQW1CO0FBQ3hDLGdCQUFTLEtBQUssQ0FBTCxLQUFXQSxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsSUFBckIsR0FBNEJBLENBQXJDO0FBQ0k7QUFDQSxlQUFLLElBQUw7QUFDSSxtQkFBTyxLQUFLK0UsU0FBTCxLQUFtQnJGLENBQUMsQ0FBQzhFLE9BQUYsRUFBbkIsSUFBa0MsS0FBS08sU0FBTCxLQUFtQnBGLENBQUMsQ0FBQzZFLE9BQUYsRUFBNUQ7O0FBQ0osZUFBSyxJQUFMO0FBQ0ksbUJBQU8sS0FBS08sU0FBTCxNQUFvQnJGLENBQUMsQ0FBQzhFLE9BQUYsRUFBcEIsSUFBbUMsS0FBS08sU0FBTCxLQUFtQnBGLENBQUMsQ0FBQzZFLE9BQUYsRUFBN0Q7O0FBQ0osZUFBSyxJQUFMO0FBQ0ksbUJBQU8sS0FBS08sU0FBTCxLQUFtQnJGLENBQUMsQ0FBQzhFLE9BQUYsRUFBbkIsSUFBa0MsS0FBS08sU0FBTCxNQUFvQnBGLENBQUMsQ0FBQzZFLE9BQUYsRUFBN0Q7O0FBQ0osZUFBSyxJQUFMO0FBQ0ksbUJBQU8sS0FBS08sU0FBTCxNQUFvQnJGLENBQUMsQ0FBQzhFLE9BQUYsRUFBcEIsSUFBbUMsS0FBS08sU0FBTCxNQUFvQnBGLENBQUMsQ0FBQzZFLE9BQUYsRUFBOUQ7QUFUUjtBQVdILE9BMUlELEVBMklDOUUsQ0FBQyxDQUFDeUIsU0FBRixDQUFZZ0UsUUFBWixHQUF1QixVQUFVekYsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ3BDLGdCQUFTLEtBQUssQ0FBTCxLQUFXQSxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsU0FBckIsR0FBaUNBLENBQTFDO0FBQ0ksZUFBSyxRQUFMO0FBQ0EsZUFBSyxTQUFMO0FBQ0ksbUJBQU9ELENBQUMsQ0FBQzhFLE9BQUYsS0FBYyxLQUFLQSxPQUFMLEVBQXJCOztBQUNKLGVBQUssS0FBTDtBQUNBLGVBQUssTUFBTDtBQUNJLG1CQUFPLElBQUkvQyxJQUFKLENBQVMvQixDQUFDLENBQUNxRSxXQUFGLEVBQVQsRUFBMEJyRSxDQUFDLENBQUNzRSxRQUFGLEVBQTFCLEVBQXdDdEUsQ0FBQyxDQUFDdUUsT0FBRixFQUF4QyxFQUFxRE8sT0FBckQsS0FBaUUsSUFBSS9DLElBQUosQ0FBUyxLQUFLc0MsV0FBTCxFQUFULEVBQTZCLEtBQUtDLFFBQUwsRUFBN0IsRUFBOEMsS0FBS0MsT0FBTCxFQUE5QyxFQUE4RE8sT0FBOUQsRUFBeEU7O0FBQ0osZUFBSyxPQUFMO0FBQ0EsZUFBSyxRQUFMO0FBQ0ksbUJBQU8sSUFBSS9DLElBQUosQ0FBUy9CLENBQUMsQ0FBQ3FFLFdBQUYsRUFBVCxFQUEwQnJFLENBQUMsQ0FBQ3NFLFFBQUYsRUFBMUIsRUFBd0MsQ0FBeEMsRUFBMkNRLE9BQTNDLEtBQXVELElBQUkvQyxJQUFKLENBQVMsS0FBS3NDLFdBQUwsRUFBVCxFQUE2QixLQUFLQyxRQUFMLEVBQTdCLEVBQThDLENBQTlDLEVBQWlEUSxPQUFqRCxFQUE5RDs7QUFDSixlQUFLLE1BQUw7QUFDQSxlQUFLLE9BQUw7QUFDSSxtQkFBTzlFLENBQUMsQ0FBQ3FFLFdBQUYsS0FBa0IsS0FBS0EsV0FBTCxFQUF6QjtBQVpSOztBQWNBLGNBQU0sSUFBSXFCLEtBQUosQ0FBVSx5QkFBVixDQUFOO0FBQ0gsT0EzSkQsRUE0SkMxRixDQUFDLENBQUN5QixTQUFGLENBQVlrRSxjQUFaLEdBQTZCLFVBQVUzRixDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDMUMsZ0JBQVMsS0FBSyxDQUFMLEtBQVdBLENBQVgsS0FBaUJBLENBQUMsR0FBRyxTQUFyQixHQUFpQ0EsQ0FBMUM7QUFDSSxlQUFLLFFBQUw7QUFDQSxlQUFLLFNBQUw7QUFDSSxtQkFBT0QsQ0FBQyxDQUFDOEUsT0FBRixNQUFlLEtBQUtBLE9BQUwsRUFBdEI7O0FBQ0osZUFBSyxLQUFMO0FBQ0EsZUFBSyxNQUFMO0FBQ0ksbUJBQU8sSUFBSS9DLElBQUosQ0FBUy9CLENBQUMsQ0FBQ3FFLFdBQUYsRUFBVCxFQUEwQnJFLENBQUMsQ0FBQ3NFLFFBQUYsRUFBMUIsRUFBd0N0RSxDQUFDLENBQUN1RSxPQUFGLEVBQXhDLEVBQXFETyxPQUFyRCxNQUFrRSxJQUFJL0MsSUFBSixDQUFTLEtBQUtzQyxXQUFMLEVBQVQsRUFBNkIsS0FBS0MsUUFBTCxFQUE3QixFQUE4QyxLQUFLQyxPQUFMLEVBQTlDLEVBQThETyxPQUE5RCxFQUF6RTs7QUFDSixlQUFLLE9BQUw7QUFDQSxlQUFLLFFBQUw7QUFDSSxtQkFBTyxJQUFJL0MsSUFBSixDQUFTL0IsQ0FBQyxDQUFDcUUsV0FBRixFQUFULEVBQTBCckUsQ0FBQyxDQUFDc0UsUUFBRixFQUExQixFQUF3QyxDQUF4QyxFQUEyQ1EsT0FBM0MsTUFBd0QsSUFBSS9DLElBQUosQ0FBUyxLQUFLc0MsV0FBTCxFQUFULEVBQTZCLEtBQUtDLFFBQUwsRUFBN0IsRUFBOEMsQ0FBOUMsRUFBaURRLE9BQWpELEVBQS9EO0FBVFI7O0FBV0EsY0FBTSxJQUFJWSxLQUFKLENBQVUsK0JBQVYsQ0FBTjtBQUNILE9BektELEVBMEtDMUYsQ0FBQyxDQUFDeUIsU0FBRixDQUFZbUUsT0FBWixHQUFzQixVQUFVNUYsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ25DLGdCQUFTLEtBQUssQ0FBTCxLQUFXQSxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsU0FBckIsR0FBaUNBLENBQTFDO0FBQ0ksZUFBSyxRQUFMO0FBQ0EsZUFBSyxTQUFMO0FBQ0ksbUJBQU8sS0FBSzZFLE9BQUwsS0FBaUI5RSxDQUFDLENBQUM4RSxPQUFGLEVBQXhCOztBQUNKLGVBQUssS0FBTDtBQUNBLGVBQUssTUFBTDtBQUNJLG1CQUFPLElBQUkvQyxJQUFKLENBQVMsS0FBS3NDLFdBQUwsRUFBVCxFQUE2QixLQUFLQyxRQUFMLEVBQTdCLEVBQThDLEtBQUtDLE9BQUwsRUFBOUMsRUFBOERPLE9BQTlELEtBQTBFLElBQUkvQyxJQUFKLENBQVMvQixDQUFDLENBQUNxRSxXQUFGLEVBQVQsRUFBMEJyRSxDQUFDLENBQUNzRSxRQUFGLEVBQTFCLEVBQXdDdEUsQ0FBQyxDQUFDdUUsT0FBRixFQUF4QyxFQUFxRE8sT0FBckQsRUFBakY7O0FBQ0osZUFBSyxPQUFMO0FBQ0EsZUFBSyxRQUFMO0FBQ0ksbUJBQU8sSUFBSS9DLElBQUosQ0FBUyxLQUFLc0MsV0FBTCxFQUFULEVBQTZCLEtBQUtDLFFBQUwsRUFBN0IsRUFBOEMsQ0FBOUMsRUFBaURRLE9BQWpELEtBQTZELElBQUkvQyxJQUFKLENBQVMvQixDQUFDLENBQUNxRSxXQUFGLEVBQVQsRUFBMEJyRSxDQUFDLENBQUNzRSxRQUFGLEVBQTFCLEVBQXdDLENBQXhDLEVBQTJDUSxPQUEzQyxFQUFwRTs7QUFDSixlQUFLLE1BQUw7QUFDQSxlQUFLLE9BQUw7QUFDSSxtQkFBTyxLQUFLVCxXQUFMLEtBQXFCckUsQ0FBQyxDQUFDcUUsV0FBRixFQUE1QjtBQVpSOztBQWNBLGNBQU0sSUFBSXFCLEtBQUosQ0FBVSx3QkFBVixDQUFOO0FBQ0gsT0ExTEQsRUEyTEMxRixDQUFDLENBQUN5QixTQUFGLENBQVlvRSxhQUFaLEdBQTRCLFVBQVU3RixDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDekMsZ0JBQVMsS0FBSyxDQUFMLEtBQVdBLENBQVgsS0FBaUJBLENBQUMsR0FBRyxTQUFyQixHQUFpQ0EsQ0FBMUM7QUFDSSxlQUFLLFFBQUw7QUFDQSxlQUFLLFNBQUw7QUFDSSxtQkFBTyxLQUFLNkUsT0FBTCxNQUFrQjlFLENBQUMsQ0FBQzhFLE9BQUYsRUFBekI7O0FBQ0osZUFBSyxLQUFMO0FBQ0EsZUFBSyxNQUFMO0FBQ0ksbUJBQU8sSUFBSS9DLElBQUosQ0FBUyxLQUFLc0MsV0FBTCxFQUFULEVBQTZCLEtBQUtDLFFBQUwsRUFBN0IsRUFBOEMsS0FBS0MsT0FBTCxFQUE5QyxFQUE4RE8sT0FBOUQsTUFBMkUsSUFBSS9DLElBQUosQ0FBUy9CLENBQUMsQ0FBQ3FFLFdBQUYsRUFBVCxFQUEwQnJFLENBQUMsQ0FBQ3NFLFFBQUYsRUFBMUIsRUFBd0N0RSxDQUFDLENBQUN1RSxPQUFGLEVBQXhDLEVBQXFETyxPQUFyRCxFQUFsRjs7QUFDSixlQUFLLE9BQUw7QUFDQSxlQUFLLFFBQUw7QUFDSSxtQkFBTyxJQUFJL0MsSUFBSixDQUFTLEtBQUtzQyxXQUFMLEVBQVQsRUFBNkIsS0FBS0MsUUFBTCxFQUE3QixFQUE4QyxDQUE5QyxFQUFpRFEsT0FBakQsTUFBOEQsSUFBSS9DLElBQUosQ0FBUy9CLENBQUMsQ0FBQ3FFLFdBQUYsRUFBVCxFQUEwQnJFLENBQUMsQ0FBQ3NFLFFBQUYsRUFBMUIsRUFBd0MsQ0FBeEMsRUFBMkNRLE9BQTNDLEVBQXJFO0FBVFI7O0FBV0EsY0FBTSxJQUFJWSxLQUFKLENBQVUsOEJBQVYsQ0FBTjtBQUNILE9BeE1ELEVBeU1DMUYsQ0FBQyxDQUFDeUIsU0FBRixDQUFZcUUsTUFBWixHQUFxQixVQUFVOUYsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ2xDLGdCQUFTLEtBQUssQ0FBTCxLQUFXQSxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsU0FBckIsR0FBaUNBLENBQTFDO0FBQ0ksZUFBSyxRQUFMO0FBQ0EsZUFBSyxTQUFMO0FBQ0ksbUJBQU8sS0FBSzZFLE9BQUwsT0FBbUI5RSxDQUFDLENBQUM4RSxPQUFGLEVBQTFCOztBQUNKLGVBQUssS0FBTDtBQUNBLGVBQUssTUFBTDtBQUNJLG1CQUFPLElBQUkvQyxJQUFKLENBQVMsS0FBS3NDLFdBQUwsRUFBVCxFQUE2QixLQUFLQyxRQUFMLEVBQTdCLEVBQThDLEtBQUtDLE9BQUwsRUFBOUMsRUFBOERPLE9BQTlELE9BQTRFLElBQUkvQyxJQUFKLENBQVMvQixDQUFDLENBQUNxRSxXQUFGLEVBQVQsRUFBMEJyRSxDQUFDLENBQUNzRSxRQUFGLEVBQTFCLEVBQXdDdEUsQ0FBQyxDQUFDdUUsT0FBRixFQUF4QyxFQUFxRE8sT0FBckQsRUFBbkY7O0FBQ0osZUFBSyxPQUFMO0FBQ0EsZUFBSyxRQUFMO0FBQ0ksbUJBQU8sSUFBSS9DLElBQUosQ0FBUyxLQUFLc0MsV0FBTCxFQUFULEVBQTZCLEtBQUtDLFFBQUwsRUFBN0IsRUFBOEMsQ0FBOUMsRUFBaURRLE9BQWpELE9BQStELElBQUkvQyxJQUFKLENBQVMvQixDQUFDLENBQUNxRSxXQUFGLEVBQVQsRUFBMEJyRSxDQUFDLENBQUNzRSxRQUFGLEVBQTFCLEVBQXdDLENBQXhDLEVBQTJDUSxPQUEzQyxFQUF0RTtBQVRSOztBQVdBLGNBQU0sSUFBSVksS0FBSixDQUFVLHVCQUFWLENBQU47QUFDSCxPQXRORCxFQXVOQzFGLENBQUMsQ0FBQ3lCLFNBQUYsQ0FBWXNFLEdBQVosR0FBa0IsVUFBVS9GLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUMvQixnQkFBUyxLQUFLLENBQUwsS0FBV0EsQ0FBWCxLQUFpQkEsQ0FBQyxHQUFHLFNBQXJCLEdBQWlDQSxDQUExQztBQUNJLGVBQUssUUFBTDtBQUNBLGVBQUssU0FBTDtBQUNJLGlCQUFLZ0YsVUFBTCxDQUFnQixLQUFLTCxVQUFMLEtBQW9CNUUsQ0FBcEM7QUFDQTs7QUFDSixlQUFLLEtBQUw7QUFDQSxlQUFLLE1BQUw7QUFDSSxpQkFBS2tGLE9BQUwsQ0FBYSxLQUFLWCxPQUFMLEtBQWlCdkUsQ0FBOUI7QUFDQTs7QUFDSixlQUFLLE9BQUw7QUFDQSxlQUFLLFFBQUw7QUFDSSxpQkFBSytFLFFBQUwsQ0FBYyxLQUFLVCxRQUFMLEtBQWtCdEUsQ0FBaEM7QUFYUjs7QUFhQSxlQUFPLElBQVA7QUFDSCxPQXRPRCxFQXVPQ0EsQ0FBQyxDQUFDeUIsU0FBRixDQUFZdUUsUUFBWixHQUF1QixVQUFVaEcsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ3BDLGdCQUFTLEtBQUssQ0FBTCxLQUFXQSxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsU0FBckIsR0FBaUNBLENBQTFDO0FBQ0ksZUFBSyxRQUFMO0FBQ0EsZUFBSyxTQUFMO0FBQ0ksaUJBQUtnRixVQUFMLENBQWdCLEtBQUtMLFVBQUwsS0FBb0I1RSxDQUFwQztBQUNBOztBQUNKLGVBQUssS0FBTDtBQUNBLGVBQUssTUFBTDtBQUNJLGlCQUFLa0YsT0FBTCxDQUFhLEtBQUtYLE9BQUwsS0FBaUJ2RSxDQUE5QjtBQUNBOztBQUNKLGVBQUssT0FBTDtBQUNBLGVBQUssUUFBTDtBQUNJLGlCQUFLK0UsUUFBTCxDQUFjLEtBQUtULFFBQUwsS0FBa0J0RSxDQUFoQztBQVhSOztBQWFBLGVBQU8sSUFBUDtBQUNILE9BdFBELEVBdVBDQSxDQUFDLENBQUN5QixTQUFGLENBQVl3RSxJQUFaLEdBQW1CLFVBQVVqRyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDaEMsYUFBSyxDQUFMLEtBQVdBLENBQVgsS0FBaUJBLENBQUMsR0FBRyxTQUFyQjs7QUFDQSxnQkFBUUEsQ0FBUjtBQUNJO0FBQ0EsZUFBSyxRQUFMO0FBQ0EsZUFBSyxTQUFMO0FBQ0ksbUJBQU8sS0FBSzZFLE9BQUwsS0FBaUI5RSxDQUFDLENBQUM4RSxPQUFGLEVBQXhCOztBQUNKLGVBQUssS0FBTDtBQUNBLGVBQUssTUFBTDtBQUNJLG1CQUFPUSxJQUFJLENBQUNZLEtBQUwsQ0FBVyxDQUFDLEtBQUtiLFNBQUwsS0FBbUJyRixDQUFDLENBQUM4RSxPQUFGLEVBQXBCLElBQW1DLEtBQTlDLENBQVA7O0FBQ0osZUFBSyxPQUFMO0FBQ0EsZUFBSyxRQUFMO0FBVEo7QUFXSCxPQXBRRCxFQXFRQzlFLENBQUMsQ0FBQ3lCLFNBQUYsQ0FBWTBFLE1BQVosR0FBcUIsVUFBVWxHLENBQVYsRUFBYUssQ0FBYixFQUFnQjtBQUNsQyxhQUFLLENBQUwsS0FBV0EsQ0FBWCxLQUFpQkEsQ0FBQyxHQUFHLE9BQXJCOztBQUNBLGFBQUssSUFBSUMsQ0FBQyxHQUFHLEVBQVIsRUFBWUMsQ0FBQyxHQUFHLEVBQWhCLEVBQW9Cb0IsQ0FBQyxHQUFHLElBQTdCLEVBQW1DLFNBQVNBLENBQUMsR0FBRzVCLENBQUMsQ0FBQ3VDLEtBQUYsQ0FBUUMsSUFBUixDQUFhdkMsQ0FBYixDQUFiLENBQW5DO0FBQW9FLG1CQUFTMkIsQ0FBQyxDQUFDLENBQUQsQ0FBVixJQUFpQnBCLENBQUMsQ0FBQ2lDLElBQUYsQ0FBT2IsQ0FBUCxDQUFqQjtBQUFwRTs7QUFDQSxZQUFJcEIsQ0FBQyxDQUFDa0MsTUFBTixFQUFjO0FBQ1ZsQyxXQUFDLENBQUMsQ0FBRCxDQUFELENBQUt3QyxLQUFMLEdBQWEsQ0FBYixLQUFtQnpDLENBQUMsSUFBSU4sQ0FBQyxDQUFDbUcsU0FBRixDQUFZLENBQVosRUFBZTVGLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBS3dDLEtBQXBCLENBQXhCOztBQUNBLGVBQUssSUFBSTlCLENBQUMsR0FBRyxDQUFSLEVBQVcrQixDQUFDLEdBQUduQyxNQUFNLENBQUNvQyxPQUFQLENBQWUxQyxDQUFmLENBQXBCLEVBQXVDVSxDQUFDLEdBQUcrQixDQUFDLENBQUNQLE1BQTdDLEVBQXFEeEIsQ0FBQyxFQUF0RCxFQUEwRDtBQUN0RCxnQkFBSVQsQ0FBQyxHQUFHd0MsQ0FBQyxDQUFDL0IsQ0FBRCxDQUFUO0FBQUEsZ0JBQ0lTLENBQUMsR0FBR2xCLENBQUMsQ0FBQyxDQUFELENBRFQ7QUFBQSxnQkFFSUcsQ0FBQyxHQUFHSCxDQUFDLENBQUMsQ0FBRCxDQUZUO0FBQUEsZ0JBR0kwQyxDQUFDLEdBQUdiLE1BQU0sQ0FBQ1gsQ0FBRCxDQUhkO0FBSUNwQixhQUFDLElBQUksS0FBSzhGLFlBQUwsQ0FBa0J6RixDQUFDLENBQUMsQ0FBRCxDQUFuQixFQUF3Qk4sQ0FBeEIsQ0FBTixFQUFtQ0UsQ0FBQyxDQUFDMkMsQ0FBQyxHQUFHLENBQUwsQ0FBRCxLQUFhNUMsQ0FBQyxJQUFJTixDQUFDLENBQUNtRyxTQUFGLENBQVl4RixDQUFDLENBQUNvQyxLQUFGLEdBQVVwQyxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUs4QixNQUEzQixFQUFtQ2xDLENBQUMsQ0FBQzJDLENBQUMsR0FBRyxDQUFMLENBQUQsQ0FBU0gsS0FBNUMsQ0FBbEIsQ0FBbkMsRUFBMEdHLENBQUMsS0FBSzNDLENBQUMsQ0FBQ2tDLE1BQUYsR0FBVyxDQUFqQixLQUF1Qm5DLENBQUMsSUFBSU4sQ0FBQyxDQUFDbUcsU0FBRixDQUFZeEYsQ0FBQyxDQUFDb0MsS0FBRixHQUFVcEMsQ0FBQyxDQUFDLENBQUQsQ0FBRCxDQUFLOEIsTUFBM0IsQ0FBNUIsQ0FBMUc7QUFDSDtBQUNKOztBQUNELGVBQU9uQyxDQUFDLENBQUMrRixPQUFGLENBQVUsS0FBVixFQUFpQixFQUFqQixDQUFQO0FBQ0gsT0FuUkQsRUFvUkN0RyxDQUFDLENBQUN5QixTQUFGLENBQVk0RCxTQUFaLEdBQXdCLFlBQVk7QUFDakMsZUFBTyxJQUFJdEQsSUFBSixDQUFTLEtBQUtzQyxXQUFMLEVBQVQsRUFBNkIsS0FBS0MsUUFBTCxFQUE3QixFQUE4QyxLQUFLQyxPQUFMLEVBQTlDLEVBQThELENBQTlELEVBQWlFLENBQWpFLEVBQW9FLENBQXBFLEVBQXVFLENBQXZFLEVBQTBFTyxPQUExRSxFQUFQO0FBQ0gsT0F0UkQsRUF1UkM5RSxDQUFDLENBQUN5QixTQUFGLENBQVk0RSxZQUFaLEdBQTJCLFVBQVVwRyxDQUFWLEVBQWFLLENBQWIsRUFBZ0I7QUFDeEMsZ0JBQVFMLENBQVI7QUFDSSxlQUFLLElBQUw7QUFDSSxtQkFBT3NHLE1BQU0sQ0FBQyxLQUFLbEMsV0FBTCxFQUFELENBQU4sQ0FBMkJtQyxLQUEzQixDQUFpQyxDQUFDLENBQWxDLENBQVA7O0FBQ0osZUFBSyxNQUFMO0FBQ0ksbUJBQU9ELE1BQU0sQ0FBQyxLQUFLbEMsV0FBTCxFQUFELENBQWI7O0FBQ0osZUFBSyxHQUFMO0FBQ0ksbUJBQU9rQyxNQUFNLENBQUMsS0FBS2pDLFFBQUwsS0FBa0IsQ0FBbkIsQ0FBYjs7QUFDSixlQUFLLElBQUw7QUFDSSxtQkFBTyxDQUFDLE9BQU8sS0FBS0EsUUFBTCxLQUFrQixDQUF6QixDQUFELEVBQThCa0MsS0FBOUIsQ0FBb0MsQ0FBQyxDQUFyQyxDQUFQOztBQUNKLGVBQUssS0FBTDtBQUNJLG1CQUFPeEcsQ0FBQyxDQUFDOEQsV0FBRixDQUFjeEQsQ0FBZCxFQUFpQixLQUFLZ0UsUUFBTCxFQUFqQixDQUFQOztBQUNKLGVBQUssTUFBTDtBQUNJLG1CQUFPdEUsQ0FBQyxDQUFDZ0UsVUFBRixDQUFhMUQsQ0FBYixFQUFnQixLQUFLZ0UsUUFBTCxFQUFoQixDQUFQOztBQUNKLGVBQUssR0FBTDtBQUNJLG1CQUFPaUMsTUFBTSxDQUFDLEtBQUtoQyxPQUFMLEVBQUQsQ0FBYjs7QUFDSixlQUFLLElBQUw7QUFDSSxtQkFBTyxDQUFDLE1BQU0sS0FBS0EsT0FBTCxFQUFQLEVBQXVCaUMsS0FBdkIsQ0FBNkIsQ0FBQyxDQUE5QixDQUFQOztBQUNKO0FBQ0ksbUJBQU8sRUFBUDtBQWxCUjtBQW9CSCxPQTVTRCxFQTZTQ3hHLENBQUMsQ0FBQ3VDLEtBQUYsR0FBVSxxQ0E3U1gsRUE4U0N2QyxDQUFDLENBQUN3RSxRQUFGLEdBQWEsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixFQUFnQixDQUFoQixFQUFtQixDQUFuQixFQUFzQixDQUF0QixFQUF5QixDQUF6QixFQUE0QixDQUE1QixFQUErQixFQUEvQixFQUFtQyxFQUFuQyxDQTlTZCxFQStTQXhFLENBaFRKO0FBa1RILEtBdFRPLEVBQVI7O0FBdVRBQyxLQUFDLENBQUN3RyxRQUFGLEdBQWFsRyxDQUFiO0FBQ0gsR0E1VEYsRUE2VEMsVUFBVVAsQ0FBVixFQUFhQyxDQUFiLEVBQWdCSyxDQUFoQixFQUFtQjtBQUNmLFFBQUlDLENBQUMsR0FBR0QsQ0FBQyxDQUFDLENBQUQsQ0FBVDtBQUNBLGdCQUFZLE9BQU9DLENBQW5CLEtBQXlCQSxDQUFDLEdBQUcsQ0FBQyxDQUFDUCxDQUFDLENBQUNNLENBQUgsRUFBTUMsQ0FBTixFQUFTLEVBQVQsQ0FBRCxDQUE3QjtBQUNBLFFBQUlDLENBQUMsR0FBRztBQUNKa0csWUFBTSxFQUFFLGdCQUFVMUcsQ0FBVixFQUFhO0FBQ2pCLFlBQUlDLENBQUMsR0FBRzBHLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixNQUF2QixDQUFSO0FBQUEsWUFDSXRHLENBQUMsR0FBR0QsTUFBTSxDQUFDd0csaUNBRGY7QUFFQXhHLGNBQU0sQ0FBQ3lHLHVCQUFQLEtBQW1DeEcsQ0FBQyxHQUFJQSxDQUFDLENBQUN5RyxXQUFGLEdBQWdCOUcsQ0FBQyxDQUFDK0csWUFBRixDQUFlaEgsQ0FBZixFQUFrQk0sQ0FBQyxDQUFDeUcsV0FBcEIsQ0FBaEIsR0FBbUQ5RyxDQUFDLENBQUNnSCxXQUFGLENBQWNqSCxDQUFkLENBQXZELEdBQTJFQyxDQUFDLENBQUMrRyxZQUFGLENBQWVoSCxDQUFmLEVBQWtCQyxDQUFDLENBQUNpSCxVQUFwQixDQUE1RSxFQUE4RzdHLE1BQU0sQ0FBQ3dHLGlDQUFQLEdBQTJDN0csQ0FBNUw7QUFDSCxPQUxHO0FBTUptSCxlQUFTLEVBQUUsQ0FBQztBQU5SLEtBQVI7QUFRQTdHLEtBQUMsQ0FBQyxDQUFELENBQUQsQ0FBS0MsQ0FBTCxFQUFRQyxDQUFSO0FBQ0FELEtBQUMsQ0FBQzZHLE1BQUYsS0FBYXBILENBQUMsQ0FBQ0UsT0FBRixHQUFZSyxDQUFDLENBQUM2RyxNQUEzQjtBQUNILEdBMVVGLEVBMlVDLFVBQVVwSCxDQUFWLEVBQWFDLENBQWIsRUFBZ0JLLENBQWhCLEVBQW1CO0FBQ2Y7O0FBQ0EsYUFBU0MsQ0FBVCxHQUFhO0FBQ1QsYUFBT0YsTUFBTSxDQUFDZ0gsVUFBUCxDQUFrQix5QkFBbEIsRUFBNkNDLE9BQTdDLEdBQXVELFVBQXZELEdBQW9FLFdBQTNFO0FBQ0g7O0FBQ0R4RyxVQUFNLENBQUNDLGNBQVAsQ0FBc0JkLENBQXRCLEVBQXlCLFlBQXpCLEVBQXVDO0FBQUVvQixXQUFLLEVBQUUsQ0FBQztBQUFWLEtBQXZDLEdBQ0twQixDQUFDLENBQUNzSCxRQUFGLEdBQWEsWUFBWTtBQUN0QixVQUFJdkgsQ0FBQyxHQUFHLGVBQWVPLENBQUMsRUFBeEI7QUFDQSxhQUFPRixNQUFNLENBQUNnSCxVQUFQLENBQWtCLGtCQUFrQnJILENBQUMsR0FBRyxPQUFILEdBQWEsUUFBaEMsSUFBNEMsVUFBOUQsRUFBMEVzSCxPQUFqRjtBQUNILEtBSkwsRUFLS3JILENBQUMsQ0FBQ3VILGNBQUYsR0FBbUJqSCxDQUx4QixFQU1LTixDQUFDLENBQUN3SCxtQkFBRixHQUF3QixVQUFVekgsQ0FBVixFQUFhO0FBQ2xDLFdBQUssSUFBSUMsQ0FBQyxHQUFHRCxDQUFDLENBQUMwSCxVQUFGLENBQWFDLFVBQXJCLEVBQWlDckgsQ0FBQyxHQUFHLENBQTFDLEVBQTZDQSxDQUFDLEdBQUdMLENBQUMsQ0FBQ3lDLE1BQW5ELEVBQTJEcEMsQ0FBQyxJQUFJLENBQWhFLEVBQW1FO0FBQy9ELFlBQUlMLENBQUMsQ0FBQzJILElBQUYsQ0FBT3RILENBQVAsTUFBY04sQ0FBbEIsRUFBcUIsT0FBT00sQ0FBUDtBQUN4Qjs7QUFDRCxhQUFPLENBQVA7QUFDSCxLQVhMO0FBWUgsR0E1VkYsRUE2VkMsVUFBVU4sQ0FBVixFQUFhQyxDQUFiLEVBQWdCSyxDQUFoQixFQUFtQjtBQUNmOztBQUNBLFFBQUlDLEVBQUo7QUFBQSxRQUNJQyxDQUFDLEdBQ0ksUUFBUSxLQUFLcUgsU0FBZCxLQUNFdEgsRUFBQyxHQUFHLFdBQVVQLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUNsQixhQUFPLENBQUNNLEVBQUMsR0FDTE8sTUFBTSxDQUFDZ0gsY0FBUCxJQUNDO0FBQUVDLGlCQUFTLEVBQUU7QUFBYixtQkFBNkIzRCxLQUE3QixJQUNHLFVBQVVwRSxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDWkQsU0FBQyxDQUFDK0gsU0FBRixHQUFjOUgsQ0FBZDtBQUNILE9BSkwsSUFLQSxVQUFVRCxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDWixhQUFLLElBQUlLLENBQVQsSUFBY0wsQ0FBZDtBQUFpQkEsV0FBQyxDQUFDeUIsY0FBRixDQUFpQnBCLENBQWpCLE1BQXdCTixDQUFDLENBQUNNLENBQUQsQ0FBRCxHQUFPTCxDQUFDLENBQUNLLENBQUQsQ0FBaEM7QUFBakI7QUFDSCxPQVJFLEVBUUFOLENBUkEsRUFRR0MsQ0FSSCxDQUFQO0FBU0gsS0FWQSxFQVdELFVBQVVELENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUNaLGVBQVNLLENBQVQsR0FBYTtBQUNULGFBQUswSCxXQUFMLEdBQW1CaEksQ0FBbkI7QUFDSDs7QUFDRE8sUUFBQyxDQUFDUCxDQUFELEVBQUlDLENBQUosQ0FBRCxFQUFVRCxDQUFDLENBQUN5QixTQUFGLEdBQWMsU0FBU3hCLENBQVQsR0FBYWEsTUFBTSxDQUFDUyxNQUFQLENBQWN0QixDQUFkLENBQWIsSUFBa0NLLENBQUMsQ0FBQ21CLFNBQUYsR0FBY3hCLENBQUMsQ0FBQ3dCLFNBQWpCLEVBQTZCLElBQUluQixDQUFKLEVBQTlELENBQXhCO0FBQ0gsS0FqQkQsQ0FGUjtBQUFBLFFBb0JJc0IsQ0FBQyxHQUNJLFFBQVEsS0FBS3FHLFFBQWQsSUFDQSxZQUFZO0FBQ1IsYUFBTyxDQUFDckcsQ0FBQyxHQUNMZCxNQUFNLENBQUNvSCxNQUFQLElBQ0EsVUFBVWxJLENBQVYsRUFBYTtBQUNULGFBQUssSUFBSUMsQ0FBSixFQUFPSyxDQUFDLEdBQUcsQ0FBWCxFQUFjQyxDQUFDLEdBQUc0SCxTQUFTLENBQUN6RixNQUFqQyxFQUF5Q3BDLENBQUMsR0FBR0MsQ0FBN0MsRUFBZ0RELENBQUMsRUFBakQ7QUFBcUQsZUFBSyxJQUFJRSxDQUFULElBQWVQLENBQUMsR0FBR2tJLFNBQVMsQ0FBQzdILENBQUQsQ0FBNUI7QUFBa0NRLGtCQUFNLENBQUNXLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDaEIsSUFBaEMsQ0FBcUNULENBQXJDLEVBQXdDTyxDQUF4QyxNQUErQ1IsQ0FBQyxDQUFDUSxDQUFELENBQUQsR0FBT1AsQ0FBQyxDQUFDTyxDQUFELENBQXZEO0FBQWxDO0FBQXJEOztBQUNBLGVBQU9SLENBQVA7QUFDSCxPQUxFLEVBS0FvSSxLQUxBLENBS00sSUFMTixFQUtZRCxTQUxaLENBQVA7QUFNSCxLQTdCVDtBQUFBLFFBOEJJakgsQ0FBQyxHQUNJLFFBQVEsS0FBS21ILFlBQWQsSUFDQSxVQUFVckksQ0FBVixFQUFhO0FBQ1QsVUFBSUEsQ0FBQyxJQUFJQSxDQUFDLENBQUNzQixVQUFYLEVBQXVCLE9BQU90QixDQUFQO0FBQ3ZCLFVBQUlDLENBQUMsR0FBRyxFQUFSO0FBQ0EsVUFBSSxRQUFRRCxDQUFaLEVBQWUsS0FBSyxJQUFJTSxDQUFULElBQWNOLENBQWQ7QUFBaUJjLGNBQU0sQ0FBQ1ksY0FBUCxDQUFzQmhCLElBQXRCLENBQTJCVixDQUEzQixFQUE4Qk0sQ0FBOUIsTUFBcUNMLENBQUMsQ0FBQ0ssQ0FBRCxDQUFELEdBQU9OLENBQUMsQ0FBQ00sQ0FBRCxDQUE3QztBQUFqQjtBQUNmLGFBQVFMLENBQUMsV0FBRCxHQUFZRCxDQUFiLEVBQWlCQyxDQUF4QjtBQUNILEtBckNUOztBQXNDQWEsVUFBTSxDQUFDQyxjQUFQLENBQXNCZCxDQUF0QixFQUF5QixZQUF6QixFQUF1QztBQUFFb0IsV0FBSyxFQUFFLENBQUM7QUFBVixLQUF2Qzs7QUFDQSxRQUFJNEIsQ0FBQyxHQUFHM0MsQ0FBQyxDQUFDLENBQUQsQ0FBVDtBQUFBLFFBQ0lHLENBQUMsR0FBR0gsQ0FBQyxDQUFDLENBQUQsQ0FEVDtBQUFBLFFBRUlxQixDQUFDLEdBQUdULENBQUMsQ0FBQ1osQ0FBQyxDQUFDLENBQUQsQ0FBRixDQUZUO0FBQUEsUUFHSU0sQ0FBQyxHQUFHTixDQUFDLENBQUMsQ0FBRCxDQUhUO0FBQUEsUUFJSTZDLENBQUMsR0FBSSxVQUFVbkQsQ0FBVixFQUFhO0FBQ2QsZUFBU0MsQ0FBVCxDQUFXQSxDQUFYLEVBQWM7QUFDVixZQUFJSyxDQUFDLEdBQUdOLENBQUMsQ0FBQ1UsSUFBRixDQUFPLElBQVAsS0FBZ0IsSUFBeEI7QUFDQ0osU0FBQyxDQUFDZ0ksT0FBRixHQUFZMUcsQ0FBQyxDQUFDQSxDQUFDLENBQUMsRUFBRCxFQUFLdEIsQ0FBQyxDQUFDZ0ksT0FBUCxDQUFGLEVBQW1CckksQ0FBQyxDQUFDc0ksT0FBRixDQUFVQyxPQUE3QixDQUFkLEVBQ0kxSCxNQUFNLENBQUMySCxJQUFQLENBQVluSSxDQUFDLENBQUNnSSxPQUFkLEVBQXVCSSxPQUF2QixDQUErQixVQUFVMUksQ0FBVixFQUFhO0FBQ3ZDLHFCQUFXTSxDQUFDLENBQUNnSSxPQUFGLENBQVV0SSxDQUFWLENBQVgsSUFBMkIsWUFBWU0sQ0FBQyxDQUFDZ0ksT0FBRixDQUFVdEksQ0FBVixDQUF4QyxLQUEwRE0sQ0FBQyxDQUFDZ0ksT0FBRixDQUFVdEksQ0FBVixJQUFlLFdBQVdNLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVXRJLENBQVYsQ0FBcEY7QUFDSCxTQUZELENBREo7QUFJQSxZQUFJTyxDQUFDLEdBQUdxQixDQUFDLENBQUNBLENBQUMsQ0FBQyxFQUFELEVBQUt0QixDQUFDLENBQUNnSSxPQUFGLENBQVVLLFNBQWYsQ0FBRixFQUE2QjFJLENBQUMsQ0FBQzBJLFNBQS9CLENBQVQ7QUFBQSxZQUNJbkksQ0FBQyxHQUFHb0IsQ0FBQyxDQUFDQSxDQUFDLENBQUMsRUFBRCxFQUFLdEIsQ0FBQyxDQUFDZ0ksT0FBRixDQUFVTSxVQUFmLENBQUYsRUFBOEIzSSxDQUFDLENBQUMySSxVQUFoQyxDQURUO0FBQUEsWUFFSTFILENBQUMsR0FBR1UsQ0FBQyxDQUFDQSxDQUFDLENBQUMsRUFBRCxFQUFLdEIsQ0FBQyxDQUFDZ0ksT0FBRixDQUFVTyxXQUFmLENBQUYsRUFBK0I1SSxDQUFDLENBQUM0SSxXQUFqQyxDQUZUO0FBR0N2SSxTQUFDLENBQUNnSSxPQUFGLEdBQVkxRyxDQUFDLENBQUNBLENBQUMsQ0FBQyxFQUFELEVBQUt0QixDQUFDLENBQUNnSSxPQUFQLENBQUYsRUFBbUJySSxDQUFuQixDQUFkLEVBQ0tLLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVUssU0FBVixHQUFzQi9HLENBQUMsQ0FBQyxFQUFELEVBQUtyQixDQUFMLENBRDVCLEVBRUtELENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVU0sVUFBVixHQUF1QmhILENBQUMsQ0FBQyxFQUFELEVBQUtwQixDQUFMLENBRjdCLEVBR0tGLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVU8sV0FBVixHQUF3QmpILENBQUMsQ0FBQyxFQUFELEVBQUtWLENBQUwsQ0FIOUIsRUFJSVosQ0FBQyxDQUFDZ0ksT0FBRixDQUFVUSxVQUFWLEtBQXlCeEksQ0FBQyxDQUFDZ0ksT0FBRixDQUFVUyxXQUFWLEdBQXdCLENBQUMsQ0FBbEQsQ0FKSixFQUtJekksQ0FBQyxDQUFDZ0ksT0FBRixDQUFVVSxRQUFWLENBQW1CdEcsTUFBbkIsS0FBOEJwQyxDQUFDLENBQUNnSSxPQUFGLENBQVVVLFFBQVYsR0FBcUJ2SSxDQUFDLENBQUNnRyxRQUFGLENBQVd2QyxZQUFYLENBQXdCNUQsQ0FBQyxDQUFDZ0ksT0FBRixDQUFVVSxRQUFsQyxFQUE0QzFJLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVVcsY0FBdEQsQ0FBbkQsQ0FMSixFQU1JM0ksQ0FBQyxDQUFDZ0ksT0FBRixDQUFVWSxVQUFWLENBQXFCeEcsTUFBckIsS0FBZ0NwQyxDQUFDLENBQUNnSSxPQUFGLENBQVVZLFVBQVYsR0FBdUJ6SSxDQUFDLENBQUNnRyxRQUFGLENBQVd2QyxZQUFYLENBQXdCNUQsQ0FBQyxDQUFDZ0ksT0FBRixDQUFVWSxVQUFsQyxFQUE4QzVJLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVWEsZ0JBQXhELENBQXZELENBTkosRUFPSTdJLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVWMsZUFBVixDQUEwQjFHLE1BQTFCLEtBQXFDcEMsQ0FBQyxDQUFDZ0ksT0FBRixDQUFVYyxlQUFWLEdBQTRCM0ksQ0FBQyxDQUFDZ0csUUFBRixDQUFXdkMsWUFBWCxDQUF3QjVELENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVWMsZUFBbEMsRUFBbUQ5SSxDQUFDLENBQUNnSSxPQUFGLENBQVVlLHFCQUE3RCxDQUFqRSxDQVBKLEVBUUksQ0FBQy9JLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVWdCLFNBQVgsSUFBd0IsMkJBQTJCckosQ0FBbkQsS0FBeURLLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVWlCLHFCQUFWLEdBQWtDLElBQTNGLENBUkosRUFTSSxDQUFDakosQ0FBQyxDQUFDZ0ksT0FBRixDQUFVZ0IsU0FBWCxJQUF3QiwrQkFBK0JySixDQUF2RCxLQUE2REssQ0FBQyxDQUFDZ0ksT0FBRixDQUFVa0IseUJBQVYsR0FBc0MsQ0FBQyxDQUFwRyxDQVRKLEVBVUksQ0FBQ2xKLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVWdCLFNBQVgsSUFBd0IsbUJBQW1CckosQ0FBM0MsS0FBaURLLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVW1CLGFBQVYsR0FBMEIsQ0FBQyxDQUE1RSxDQVZKO0FBV0EsWUFBSXhHLENBQUMsR0FBRzNDLENBQUMsQ0FBQ29KLFVBQUYsRUFBUjtBQUFBLFlBQ0kvSCxDQUFDLEdBQUdzQixDQUFDLENBQUMsQ0FBRCxDQURUO0FBQUEsWUFFSXJDLENBQUMsR0FBR3FDLENBQUMsQ0FBQyxDQUFELENBRlQ7QUFHQTNDLFNBQUMsQ0FBQ2dJLE9BQUYsQ0FBVXFCLFNBQVYsS0FBd0JySixDQUFDLENBQUNnSSxPQUFGLENBQVVzQixVQUFWLElBQXdCdEosQ0FBQyxDQUFDZ0ksT0FBRixDQUFVdUIsT0FBMUQsTUFBdUVsSSxDQUFDLEdBQUcsSUFBSWxCLENBQUMsQ0FBQ2dHLFFBQU4sQ0FBZW5HLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVXFCLFNBQXpCLEVBQW9DckosQ0FBQyxDQUFDZ0ksT0FBRixDQUFVbkMsTUFBOUMsRUFBc0Q3RixDQUFDLENBQUNnSSxPQUFGLENBQVV0RyxJQUFoRSxDQUEzRSxHQUNJTCxDQUFDLElBQUlyQixDQUFDLENBQUNnSSxPQUFGLENBQVV1QixPQUFmLEtBQTJCakosQ0FBQyxHQUFHLElBQUlILENBQUMsQ0FBQ2dHLFFBQU4sQ0FBZW5HLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVXVCLE9BQXpCLEVBQWtDdkosQ0FBQyxDQUFDZ0ksT0FBRixDQUFVbkMsTUFBNUMsRUFBb0Q3RixDQUFDLENBQUNnSSxPQUFGLENBQVV0RyxJQUE5RCxDQUEvQixDQURKLEVBRUlMLENBQUMsWUFBWWxCLENBQUMsQ0FBQ2dHLFFBQWYsSUFBMkIsQ0FBQ3FELEtBQUssQ0FBQ25JLENBQUMsQ0FBQ21ELE9BQUYsRUFBRCxDQUFqQyxLQUFtRHhFLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVXFCLFNBQVYsR0FBc0JoSSxDQUF6RSxDQUZKLEVBR0lyQixDQUFDLENBQUNnSSxPQUFGLENBQVVxQixTQUFWLElBQXVCL0ksQ0FBQyxZQUFZSCxDQUFDLENBQUNnRyxRQUF0QyxJQUFrRCxDQUFDcUQsS0FBSyxDQUFDbEosQ0FBQyxDQUFDa0UsT0FBRixFQUFELENBQXhELEtBQTBFeEUsQ0FBQyxDQUFDZ0ksT0FBRixDQUFVdUIsT0FBVixHQUFvQmpKLENBQTlGLENBSEosRUFJSSxDQUFDTixDQUFDLENBQUNnSSxPQUFGLENBQVVzQixVQUFYLElBQXlCdEosQ0FBQyxDQUFDZ0ksT0FBRixDQUFVcUIsU0FBVixZQUErQmxKLENBQUMsQ0FBQ2dHLFFBQTFELEtBQXVFbkcsQ0FBQyxDQUFDZ0ksT0FBRixDQUFVcUIsU0FBVixHQUFzQixJQUE3RixDQUpKLEVBS0lySixDQUFDLENBQUNnSSxPQUFGLENBQVVzQixVQUFWLElBQXlCdEosQ0FBQyxDQUFDZ0ksT0FBRixDQUFVcUIsU0FBVixZQUErQmxKLENBQUMsQ0FBQ2dHLFFBQWpDLElBQTZDbkcsQ0FBQyxDQUFDZ0ksT0FBRixDQUFVdUIsT0FBVixZQUE2QnBKLENBQUMsQ0FBQ2dHLFFBQXJHLEtBQW9IbkcsQ0FBQyxDQUFDZ0ksT0FBRixDQUFVcUIsU0FBVixHQUFzQixJQUF2QixFQUErQnJKLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVXVCLE9BQVYsR0FBb0IsSUFBdEssQ0FMSjs7QUFNQSxhQUFLLElBQUkxRyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHN0MsQ0FBQyxDQUFDZ0ksT0FBRixDQUFVeUIsY0FBOUIsRUFBOEM1RyxDQUFDLElBQUksQ0FBbkQsRUFBc0Q7QUFDbEQsY0FBSXRDLENBQUMsR0FBR1AsQ0FBQyxDQUFDZ0ksT0FBRixDQUFVcUIsU0FBVixZQUErQmxKLENBQUMsQ0FBQ2dHLFFBQWpDLEdBQTRDbkcsQ0FBQyxDQUFDZ0ksT0FBRixDQUFVcUIsU0FBVixDQUFvQnpILEtBQXBCLEVBQTVDLEdBQTBFLElBQUl6QixDQUFDLENBQUNnRyxRQUFOLEVBQWxGO0FBQ0E1RixXQUFDLENBQUNxRSxPQUFGLENBQVUsQ0FBVixHQUFjckUsQ0FBQyxDQUFDa0UsUUFBRixDQUFXbEUsQ0FBQyxDQUFDeUQsUUFBRixLQUFlbkIsQ0FBMUIsQ0FBZCxFQUE2QzdDLENBQUMsQ0FBQzBKLFNBQUYsQ0FBWTdHLENBQVosSUFBaUJ0QyxDQUE5RDtBQUNIOztBQUNELFlBQUlQLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVTJCLFdBQWQsRUFDSSxJQUFJM0osQ0FBQyxDQUFDZ0ksT0FBRixDQUFVNEIscUJBQWQsRUFBcUM1SixDQUFDLENBQUM2SixjQUFGLEdBQW1CN0osQ0FBQyxDQUFDZ0ksT0FBRixDQUFVNEIscUJBQTdCLENBQXJDLEtBRUksSUFBSTtBQUNBLGNBQUk5RyxDQUFDLEdBQUcsSUFBSWdILElBQUksQ0FBQ0MsV0FBVCxDQUFxQi9KLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVXRHLElBQS9CLENBQVI7QUFDQTFCLFdBQUMsQ0FBQzZKLGNBQUYsR0FBbUIvRyxDQUFDLENBQUNrSCxNQUFGLENBQVM5SSxJQUFULENBQWM0QixDQUFkLENBQW5CO0FBQ0gsU0FIRCxDQUdFLE9BQU9wRCxDQUFQLEVBQVU7QUFDUk0sV0FBQyxDQUFDNkosY0FBRixHQUFtQixVQUFVbkssQ0FBVixFQUFhO0FBQzVCLG1CQUFPLE1BQU1zRixJQUFJLENBQUNpRixHQUFMLENBQVN2SyxDQUFULENBQU4sR0FBb0IsS0FBcEIsR0FBNEIsT0FBbkM7QUFDSCxXQUZEO0FBR0g7QUFDVCxlQUFPTSxDQUFDLENBQUNrSyxvQkFBRixJQUEwQmxLLENBQUMsQ0FBQ21LLE1BQUYsRUFBMUIsRUFBc0NuSyxDQUE3QztBQUNIOztBQUNELGFBQ0lFLENBQUMsQ0FBQ1AsQ0FBRCxFQUFJRCxDQUFKLENBQUQsRUFDQ0MsQ0FBQyxDQUFDd0IsU0FBRixDQUFZZ0osTUFBWixHQUFxQixZQUFZO0FBQzlCLFlBQUl6SyxDQUFDLEdBQUcsSUFBUjs7QUFDQSxZQUNLMkcsUUFBUSxDQUFDK0QsZ0JBQVQsQ0FDRyxPQURILEVBRUcsVUFBVXpLLENBQVYsRUFBYTtBQUNULGlCQUFPRCxDQUFDLENBQUMySyxPQUFGLENBQVUxSyxDQUFWLENBQVA7QUFDSCxTQUpKLEVBS0csQ0FBQyxDQUxKLEdBT0EsS0FBSzJLLE1BQUwsR0FBY2pFLFFBQVEsQ0FBQ2tFLGFBQVQsQ0FBdUIsS0FBdkIsQ0FQZCxFQVFBLEtBQUtELE1BQUwsQ0FBWUUsU0FBWixHQUF3Qm5KLENBQUMsQ0FBQ29KLFVBUjFCLEVBU0EsS0FBS0gsTUFBTCxDQUFZSSxLQUFaLENBQWtCQyxPQUFsQixHQUE0QixNQVQ1QixFQVVELEtBQUtMLE1BQUwsQ0FBWUYsZ0JBQVosQ0FDSSxZQURKLEVBRUksVUFBVXpLLENBQVYsRUFBYTtBQUNULGlCQUFPRCxDQUFDLENBQUNrTCxZQUFGLENBQWVqTCxDQUFmLENBQVA7QUFDSCxTQUpMLEVBS0ksQ0FBQyxDQUxMLENBVkMsRUFpQkQsS0FBSzJLLE1BQUwsQ0FBWUYsZ0JBQVosQ0FDSSxZQURKLEVBRUksVUFBVXpLLENBQVYsRUFBYTtBQUNULGlCQUFPRCxDQUFDLENBQUNtTCxZQUFGLENBQWVsTCxDQUFmLENBQVA7QUFDSCxTQUpMLEVBS0ksQ0FBQyxDQUxMLENBakJDLEVBd0JELEtBQUtxSSxPQUFMLENBQWE4QyxXQUFiLElBQ08sS0FBSzlDLE9BQUwsQ0FBYUMsT0FBYixZQUFnQzhDLFdBQWhDLElBQ0csS0FBSy9DLE9BQUwsQ0FBYUMsT0FBYixDQUFxQm1DLGdCQUFyQixDQUNJLE9BREosRUFFSSxVQUFVekssQ0FBVixFQUFhO0FBQ1QsaUJBQU9ELENBQUMsQ0FBQ3NMLE9BQUYsQ0FBVXJMLENBQVYsQ0FBUDtBQUNILFNBSkwsRUFLSSxDQUFDLENBTEwsQ0FESCxFQVFELEtBQUtxSSxPQUFMLENBQWFRLFVBQWIsWUFBbUN1QyxXQUFuQyxJQUNJLEtBQUsvQyxPQUFMLENBQWFRLFVBQWIsQ0FBd0I0QixnQkFBeEIsQ0FDSSxPQURKLEVBRUksVUFBVXpLLENBQVYsRUFBYTtBQUNULGlCQUFPRCxDQUFDLENBQUNzTCxPQUFGLENBQVVyTCxDQUFWLENBQVA7QUFDSCxTQUpMLEVBS0ksQ0FBQyxDQUxMLENBVlYsS0FpQk8sS0FBS3FJLE9BQUwsQ0FBYUMsT0FBYixZQUFnQzhDLFdBQWhDLElBQ0csS0FBSy9DLE9BQUwsQ0FBYUMsT0FBYixDQUFxQm1DLGdCQUFyQixDQUNJLFFBREosRUFFSSxVQUFVekssQ0FBVixFQUFhO0FBQ1QsaUJBQU9ELENBQUMsQ0FBQ3NMLE9BQUYsQ0FBVXJMLENBQVYsQ0FBUDtBQUNILFNBSkwsRUFLSSxDQUFDLENBTEwsQ0FESCxFQVFELEtBQUtxSSxPQUFMLENBQWFRLFVBQWIsWUFBbUN1QyxXQUFuQyxJQUNJLEtBQUsvQyxPQUFMLENBQWFRLFVBQWIsQ0FBd0I0QixnQkFBeEIsQ0FDSSxRQURKLEVBRUksVUFBVXpLLENBQVYsRUFBYTtBQUNULGlCQUFPRCxDQUFDLENBQUNzTCxPQUFGLENBQVVyTCxDQUFWLENBQVA7QUFDSCxTQUpMLEVBS0ksQ0FBQyxDQUxMLENBMUJWLENBeEJDLEVBeURELEtBQUtxSSxPQUFMLENBQWFpRCxpQkExRGpCLEVBMkRFO0FBQ0UsY0FBSSxjQUFjLE9BQU8sS0FBS0MsdUJBQTlCLEVBQXVELE1BQU0sSUFBSTlGLEtBQUosQ0FBVSxzSEFBVixDQUFOO0FBQ3ZELGVBQUs4Rix1QkFBTCxDQUE2QjlLLElBQTdCLENBQWtDLElBQWxDLEVBQXdDLElBQXhDO0FBQ0g7O0FBQ0QsYUFBSytLLE1BQUwsSUFDSSxLQUFLbkQsT0FBTCxDQUFhb0QsUUFBYixHQUNNLEtBQUtwRCxPQUFMLENBQWFvRCxRQUFiLFlBQWlDTCxXQUFqQyxHQUNJLEtBQUsvQyxPQUFMLENBQWFvRCxRQUFiLENBQXNCekUsV0FBdEIsQ0FBa0MsS0FBSzJELE1BQXZDLENBREosR0FFSWpFLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixLQUFLMEIsT0FBTCxDQUFhb0QsUUFBcEMsRUFBOEN6RSxXQUE5QyxDQUEwRCxLQUFLMkQsTUFBL0QsQ0FIVixHQUlNLEtBQUt0QyxPQUFMLENBQWFxRCxVQUFiLEdBQ0EsS0FBS3JELE9BQUwsQ0FBYUMsT0FBYixZQUFnQ3FELGdCQUFoQyxHQUNJLEtBQUt0RCxPQUFMLENBQWFDLE9BQWIsQ0FBcUJiLFVBQXJCLENBQWdDVCxXQUFoQyxDQUE0QyxLQUFLMkQsTUFBakQsQ0FESixHQUVJLEtBQUt0QyxPQUFMLENBQWFDLE9BQWIsQ0FBcUJ0QixXQUFyQixDQUFpQyxLQUFLMkQsTUFBdEMsQ0FISixHQUlBakUsUUFBUSxDQUFDa0YsSUFBVCxDQUFjNUUsV0FBZCxDQUEwQixLQUFLMkQsTUFBL0IsQ0FUVixFQVVJLEtBQUt0QyxPQUFMLENBQWF3RCxjQUFiLEtBQ00sS0FBS0MsUUFBTCxHQUFnQnBGLFFBQVEsQ0FBQ2tFLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBakIsRUFDQSxLQUFLa0IsUUFBTCxDQUFjakIsU0FBZCxHQUEwQm5KLENBQUMsQ0FBQ3FLLGtCQUQ1QixFQUVELEtBQUtELFFBQUwsQ0FBY3JCLGdCQUFkLENBQStCLE9BQS9CLEVBQXdDLEtBQUt1QixJQUFMLEVBQXhDLENBRkMsRUFHRCxLQUFLM0QsT0FBTCxDQUFhQyxPQUFiLElBQXdCLEtBQUtELE9BQUwsQ0FBYUMsT0FBYixDQUFxQmIsVUFBN0MsSUFBMkQsS0FBS1ksT0FBTCxDQUFhQyxPQUFiLENBQXFCYixVQUFyQixDQUFnQ1QsV0FBaEMsQ0FBNEMsS0FBSzhFLFFBQWpELENBSDFELEVBSUQxTCxNQUFNLENBQUNxSyxnQkFBUCxDQUF3QixtQkFBeEIsRUFBNkMsVUFBVXpLLENBQVYsRUFBYTtBQUN0RCxjQUFJSyxDQUFDLEdBQUcsU0FBSkEsQ0FBSSxHQUFZO0FBQ2hCLGdCQUFJTSxDQUFDLENBQUMyRyxRQUFGLE1BQWdCdkgsQ0FBQyxDQUFDa00sVUFBRixFQUFwQixFQUFvQztBQUNoQyxzQkFBUXRMLENBQUMsQ0FBQzRHLGNBQUYsRUFBUjtBQUNJLHFCQUFLLFdBQUw7QUFDS3hILG1CQUFDLENBQUNzSSxPQUFGLENBQVV5QixjQUFWLEdBQTJCLENBQTVCLEVBQWlDL0osQ0FBQyxDQUFDc0ksT0FBRixDQUFVNkQsZUFBVixHQUE0QixDQUE3RDtBQUNBOztBQUNKO0FBQ0tuTSxtQkFBQyxDQUFDc0ksT0FBRixDQUFVeUIsY0FBVixHQUEyQixDQUE1QixFQUFpQy9KLENBQUMsQ0FBQ3NJLE9BQUYsQ0FBVTZELGVBQVYsR0FBNEIsQ0FBN0Q7QUFMUjs7QUFPQSxrQkFBS25NLENBQUMsQ0FBQ3lMLE1BQUYsSUFBWSxDQUFDekwsQ0FBQyxDQUFDc0ksT0FBRixDQUFVcUQsVUFBNUIsRUFBeUM7QUFDckMsb0JBQUkxTCxDQUFDLEdBQUdELENBQUMsQ0FBQzRLLE1BQUYsQ0FBU3dCLHFCQUFULEVBQVI7QUFDQ3BNLGlCQUFDLENBQUM0SyxNQUFGLENBQVNJLEtBQVQsQ0FBZXFCLEdBQWYsR0FBcUIsZ0JBQWdCcE0sQ0FBQyxDQUFDcU0sTUFBRixHQUFXLENBQTNCLEdBQStCLEtBQXJELEVBQThEdE0sQ0FBQyxDQUFDNEssTUFBRixDQUFTSSxLQUFULENBQWV1QixJQUFmLEdBQXNCLGdCQUFnQnRNLENBQUMsQ0FBQ3VNLEtBQUYsR0FBVSxDQUExQixHQUE4QixLQUFsSDtBQUNIO0FBQ0o7O0FBQ0RuTSxrQkFBTSxDQUFDb00sbUJBQVAsQ0FBMkIsUUFBM0IsRUFBcUNuTSxDQUFyQztBQUNILFdBZkQ7O0FBZ0JBRCxnQkFBTSxDQUFDcUssZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBa0NwSyxDQUFsQztBQUNILFNBbEJELENBTEosQ0FWSixFQWtDSSxLQUFLZ0ksT0FBTCxDQUFhcUQsVUFBYixLQUE0QixLQUFLZSxJQUFMLElBQWEsS0FBS3BFLE9BQUwsQ0FBYXdELGNBQWIsSUFBK0JsTCxDQUFDLENBQUMyRyxRQUFGLEVBQS9CLEtBQWdEbEgsTUFBTSxDQUFDc00sYUFBUCxDQUFxQixJQUFJQyxLQUFKLENBQVUsbUJBQVYsQ0FBckIsR0FBc0R2TSxNQUFNLENBQUNzTSxhQUFQLENBQXFCLElBQUlDLEtBQUosQ0FBVSxRQUFWLENBQXJCLENBQXRHLENBQXpDLENBbENKLEVBbUNJLEtBQUtDLFdBQUwsRUFuQ0o7QUFvQ0gsT0F0R0QsRUF1R0M1TSxDQUFDLENBQUN3QixTQUFGLENBQVlpSSxVQUFaLEdBQXlCLFlBQVk7QUFDbEMsWUFBSTFKLENBQUMsR0FBRyxLQUFLc0ksT0FBTCxDQUFhd0UsU0FBckI7QUFBQSxZQUNJN00sQ0FBQyxHQUFHLElBQUl5RCxNQUFKLENBQVcsS0FBSzFELENBQWhCLENBRFI7QUFBQSxZQUVJTSxDQUFDLEdBQUcsS0FBS2dJLE9BQUwsQ0FBYUMsT0FBYixZQUFnQ3FELGdCQUFoQyxHQUFtRCxLQUFLdEQsT0FBTCxDQUFhQyxPQUFiLENBQXFCbEgsS0FBckIsQ0FBMkIwTCxLQUEzQixDQUFpQy9NLENBQWpDLENBQW5ELEdBQXlGLEVBRmpHOztBQUdBLFlBQUksS0FBS3NJLE9BQUwsQ0FBYVEsVUFBakIsRUFBNkI7QUFDekIsY0FBSSxLQUFLUixPQUFMLENBQWFDLE9BQWIsWUFBZ0NxRCxnQkFBaEMsSUFBb0QsS0FBS3RELE9BQUwsQ0FBYUMsT0FBYixDQUFxQmxILEtBQXJCLENBQTJCcUIsTUFBL0UsSUFBeUYsS0FBSzRGLE9BQUwsQ0FBYVEsVUFBYixZQUFtQzhDLGdCQUE1SCxJQUFnSixLQUFLdEQsT0FBTCxDQUFhUSxVQUFiLENBQXdCekgsS0FBeEIsQ0FBOEJxQixNQUFsTCxFQUNJLE9BQU8sQ0FBQyxJQUFJakMsQ0FBQyxDQUFDZ0csUUFBTixDQUFlLEtBQUs2QixPQUFMLENBQWFDLE9BQWIsQ0FBcUJsSCxLQUFwQyxFQUEyQyxLQUFLaUgsT0FBTCxDQUFhbkMsTUFBeEQsQ0FBRCxFQUFrRSxJQUFJMUYsQ0FBQyxDQUFDZ0csUUFBTixDQUFlLEtBQUs2QixPQUFMLENBQWFRLFVBQWIsQ0FBd0J6SCxLQUF2QyxFQUE4QyxLQUFLaUgsT0FBTCxDQUFhbkMsTUFBM0QsQ0FBbEUsQ0FBUDtBQUNQLFNBSEQsTUFHTyxJQUFJLEtBQUttQyxPQUFMLENBQWFzQixVQUFqQixFQUE2QjtBQUNoQyxjQUFJLEtBQUt0QixPQUFMLENBQWFDLE9BQWIsWUFBZ0NxRCxnQkFBaEMsSUFBb0QsS0FBS3RELE9BQUwsQ0FBYUMsT0FBYixDQUFxQmxILEtBQXJCLENBQTJCcUIsTUFBbkYsRUFBMkYsT0FBTyxDQUFDLElBQUlqQyxDQUFDLENBQUNnRyxRQUFOLENBQWUsS0FBSzZCLE9BQUwsQ0FBYUMsT0FBYixDQUFxQmxILEtBQXBDLEVBQTJDLEtBQUtpSCxPQUFMLENBQWFuQyxNQUF4RCxDQUFELENBQVA7QUFDOUYsU0FGTSxNQUVBLElBQUksS0FBS21DLE9BQUwsQ0FBYUMsT0FBYixZQUFnQ3FELGdCQUFoQyxJQUFvRDNMLENBQUMsQ0FBQ21DLElBQUYsQ0FBTyxLQUFLa0csT0FBTCxDQUFhQyxPQUFiLENBQXFCbEgsS0FBNUIsQ0FBcEQsSUFBMEZmLENBQUMsQ0FBQ29DLE1BQTVGLElBQXNHcEMsQ0FBQyxDQUFDb0MsTUFBRixHQUFXLENBQVgsSUFBZ0IsQ0FBMUgsRUFBNkg7QUFDaEksY0FBSW5DLENBQUMsR0FBR0QsQ0FBQyxDQUFDa0csS0FBRixDQUFRLENBQVIsRUFBV2xHLENBQUMsQ0FBQ29DLE1BQUYsR0FBVyxDQUF0QixFQUF5QmdDLElBQXpCLENBQThCMUUsQ0FBOUIsQ0FBUjtBQUFBLGNBQ0lRLENBQUMsR0FBR0YsQ0FBQyxDQUFDa0csS0FBRixDQUFRbEcsQ0FBQyxDQUFDb0MsTUFBRixHQUFXLENBQW5CLEVBQXNCZ0MsSUFBdEIsQ0FBMkIxRSxDQUEzQixDQURSO0FBRUEsaUJBQU8sQ0FBQyxJQUFJUyxDQUFDLENBQUNnRyxRQUFOLENBQWVsRyxDQUFmLEVBQWtCLEtBQUsrSCxPQUFMLENBQWFuQyxNQUEvQixDQUFELEVBQXlDLElBQUkxRixDQUFDLENBQUNnRyxRQUFOLENBQWVqRyxDQUFmLEVBQWtCLEtBQUs4SCxPQUFMLENBQWFuQyxNQUEvQixDQUF6QyxDQUFQO0FBQ0g7O0FBQ0QsZUFBTyxFQUFQO0FBQ0gsT0F0SEQsRUF1SENsRyxDQUFDLENBQUN3QixTQUFGLENBQVlvTCxXQUFaLEdBQTBCLFlBQVk7QUFDbkMsWUFBSSxLQUFLdkUsT0FBTCxDQUFhQyxPQUFiLFlBQWdDcUQsZ0JBQXBDLEVBQXNEO0FBQ2xELGNBQUksS0FBS3RELE9BQUwsQ0FBYXNCLFVBQWIsSUFBMkIsS0FBS3RCLE9BQUwsQ0FBYXFCLFNBQTVDLEVBQXVELEtBQUtyQixPQUFMLENBQWFDLE9BQWIsQ0FBcUJsSCxLQUFyQixHQUE2QixLQUFLaUgsT0FBTCxDQUFhcUIsU0FBYixDQUF1QnhELE1BQXZCLENBQThCLEtBQUttQyxPQUFMLENBQWFuQyxNQUEzQyxFQUFtRCxLQUFLbUMsT0FBTCxDQUFhdEcsSUFBaEUsQ0FBN0IsQ0FBdkQsS0FDSyxJQUFJLENBQUMsS0FBS3NHLE9BQUwsQ0FBYXNCLFVBQWQsSUFBNEIsS0FBS3RCLE9BQUwsQ0FBYXFCLFNBQXpDLElBQXNELEtBQUtyQixPQUFMLENBQWF1QixPQUF2RSxFQUFnRjtBQUNqRixnQkFBSTdKLENBQUMsR0FBRyxLQUFLc0ksT0FBTCxDQUFhcUIsU0FBYixDQUF1QnhELE1BQXZCLENBQThCLEtBQUttQyxPQUFMLENBQWFuQyxNQUEzQyxFQUFtRCxLQUFLbUMsT0FBTCxDQUFhdEcsSUFBaEUsQ0FBUjtBQUFBLGdCQUNJL0IsQ0FBQyxHQUFHLEtBQUtxSSxPQUFMLENBQWF1QixPQUFiLENBQXFCMUQsTUFBckIsQ0FBNEIsS0FBS21DLE9BQUwsQ0FBYW5DLE1BQXpDLEVBQWlELEtBQUttQyxPQUFMLENBQWF0RyxJQUE5RCxDQURSO0FBRUEsaUJBQUtzRyxPQUFMLENBQWFRLFVBQWIsSUFBNEIsS0FBS1IsT0FBTCxDQUFhQyxPQUFiLENBQXFCbEgsS0FBckIsR0FBNkJyQixDQUE5QixFQUFtQyxLQUFLc0ksT0FBTCxDQUFhUSxVQUFiLENBQXdCekgsS0FBeEIsR0FBZ0NwQixDQUE5RixJQUFxRyxLQUFLcUksT0FBTCxDQUFhQyxPQUFiLENBQXFCbEgsS0FBckIsR0FBNkIsS0FBS3JCLENBQUwsR0FBUyxLQUFLc0ksT0FBTCxDQUFhd0UsU0FBdEIsR0FBa0M3TSxDQUFwSztBQUNIO0FBQ0QsZUFBS3FJLE9BQUwsQ0FBYXFCLFNBQWIsSUFBMEIsS0FBS3JCLE9BQUwsQ0FBYXVCLE9BQXZDLEtBQW9ELEtBQUt2QixPQUFMLENBQWFDLE9BQWIsQ0FBcUJsSCxLQUFyQixHQUE2QixFQUE5QixFQUFtQyxLQUFLaUgsT0FBTCxDQUFhUSxVQUFiLEtBQTRCLEtBQUtSLE9BQUwsQ0FBYVEsVUFBYixDQUF3QnpILEtBQXhCLEdBQWdDLEVBQTVELENBQXRGO0FBQ0g7QUFDSixPQWpJRCxFQWtJQ3BCLENBQUMsQ0FBQ3dCLFNBQUYsQ0FBWXVMLFlBQVosR0FBMkIsVUFBVWhOLENBQVYsRUFBYTtBQUNyQyxlQUFPQSxDQUFDLENBQUNpTixPQUFGLENBQVUsTUFBTXRMLENBQUMsQ0FBQ29KLFVBQWxCLE1BQWtDLEtBQUtILE1BQTlDO0FBQ0gsT0FwSUQsRUFxSUMzSyxDQUFDLENBQUN3QixTQUFGLENBQVl5TCxXQUFaLEdBQTBCLFVBQVVsTixDQUFWLEVBQWE7QUFDcEMsZUFBT0EsQ0FBQyxLQUFLLEtBQUtzSSxPQUFMLENBQWFDLE9BQW5CLElBQStCLEtBQUtELE9BQUwsQ0FBYVEsVUFBYixJQUEyQjlJLENBQUMsS0FBSyxLQUFLc0ksT0FBTCxDQUFhUSxVQUFwRjtBQUNILE9BdklELEVBd0lDN0ksQ0FBQyxDQUFDd0IsU0FBRixDQUFZMEwscUJBQVosR0FBb0MsWUFBWTtBQUM3QyxlQUFPLEtBQUs3RSxPQUFMLENBQWFzQixVQUFiLElBQTJCLE1BQU0sS0FBS3dELFVBQUwsQ0FBZ0IxSyxNQUF4RDtBQUNILE9BMUlELEVBMklDekMsQ0FBQyxDQUFDd0IsU0FBRixDQUFZNEwsb0JBQVosR0FBbUMsWUFBWTtBQUM1QyxlQUFPLE1BQU0sS0FBS0QsVUFBTCxDQUFnQjFLLE1BQXRCLElBQWdDLEtBQUswSyxVQUFMLENBQWdCLENBQWhCLEVBQW1CdEksT0FBbkIsS0FBK0IsS0FBS3NJLFVBQUwsQ0FBZ0IsQ0FBaEIsRUFBbUJ0SSxPQUFuQixFQUF0RTtBQUNILE9BN0lELEVBOElDN0UsQ0FBQyxDQUFDd0IsU0FBRixDQUFZNkwsbUJBQVosR0FBa0MsWUFBWTtBQUMzQyxlQUFPLEtBQUtoRixPQUFMLENBQWFpRix1QkFBYixJQUF3QyxLQUFLakYsT0FBTCxDQUFhVSxRQUFiLENBQXNCdEcsTUFBOUQsSUFBd0UsTUFBTSxLQUFLMEssVUFBTCxDQUFnQjFLLE1BQXJHO0FBQ0gsT0FoSkQsRUFpSkN6QyxDQUFDLENBQUN3QixTQUFGLENBQVkrTCxxQkFBWixHQUFvQyxZQUFZO0FBQzdDLGVBQU8sS0FBS2xGLE9BQUwsQ0FBYWtCLHlCQUFiLElBQTBDLEtBQUtsQixPQUFMLENBQWFZLFVBQWIsQ0FBd0J4RyxNQUFsRSxJQUE0RSxNQUFNLEtBQUswSyxVQUFMLENBQWdCMUssTUFBekc7QUFDSCxPQW5KRCxFQW9KQ3pDLENBQUMsQ0FBQ3dCLFNBQUYsQ0FBWWtKLE9BQVosR0FBc0IsVUFBVTNLLENBQVYsRUFBYTtBQUNoQyxZQUFJQyxDQUFDLEdBQUcsSUFBUjtBQUFBLFlBQ0lLLENBQUMsR0FBR04sQ0FBQyxDQUFDeU4sTUFEVjtBQUVBLFlBQUluTixDQUFDLElBQUksS0FBS3NLLE1BQWQsRUFDSSxJQUFJLEtBQUtzQyxXQUFMLENBQWlCNU0sQ0FBakIsQ0FBSixFQUF5QixLQUFLb00sSUFBTCxDQUFVcE0sQ0FBVixFQUF6QixLQUNLLElBQUlBLENBQUMsQ0FBQzJNLE9BQUYsQ0FBVSxNQUFNdEwsQ0FBQyxDQUFDb0osVUFBbEIsQ0FBSixFQUFtQztBQUNwQyxjQUFJekssQ0FBQyxDQUFDb04sU0FBRixDQUFZQyxRQUFaLENBQXFCaE0sQ0FBQyxDQUFDaU0sT0FBdkIsQ0FBSixFQUFxQztBQUNqQyxnQkFBSzVOLENBQUMsQ0FBQzZOLGNBQUYsSUFBb0IsQ0FBQyxLQUFLYixZQUFMLENBQWtCMU0sQ0FBbEIsQ0FBMUIsRUFBaUQ7QUFDakQsZ0JBQUlBLENBQUMsQ0FBQ29OLFNBQUYsQ0FBWUMsUUFBWixDQUFxQmhNLENBQUMsQ0FBQ21NLFFBQXZCLENBQUosRUFBc0M7QUFDdEMsZ0JBQUl4TixDQUFDLENBQUNvTixTQUFGLENBQVlDLFFBQVosQ0FBcUJoTSxDQUFDLENBQUNvTSxRQUF2QixDQUFKLEVBQXNDOztBQUN0QyxnQkFBSyxLQUFLWixxQkFBTCxPQUFpQyxLQUFLQyxVQUFMLENBQWdCMUssTUFBaEIsR0FBeUIsQ0FBMUQsR0FBK0QsS0FBSzBLLFVBQUwsQ0FBZ0IsS0FBS0EsVUFBTCxDQUFnQjFLLE1BQWhDLElBQTBDLElBQUlqQyxDQUFDLENBQUNnRyxRQUFOLENBQWVuRyxDQUFDLENBQUNrSSxPQUFGLENBQVV3RixJQUF6QixDQUF6RyxFQUEwSSxLQUFLWCxvQkFBTCxFQUEvSSxFQUE2SztBQUN6SyxrQkFBSTlNLENBQUMsR0FBRyxLQUFLNk0sVUFBTCxDQUFnQixDQUFoQixFQUFtQmxMLEtBQW5CLEVBQVI7QUFDQyxtQkFBS2tMLFVBQUwsQ0FBZ0IsQ0FBaEIsSUFBcUIsS0FBS0EsVUFBTCxDQUFnQixDQUFoQixFQUFtQmxMLEtBQW5CLEVBQXRCLEVBQW9ELEtBQUtrTCxVQUFMLENBQWdCLENBQWhCLElBQXFCN00sQ0FBQyxDQUFDMkIsS0FBRixFQUF6RTtBQUNIOztBQUNELGdCQUFJLEtBQUtvTCxtQkFBTCxFQUFKLEVBQWdDO0FBQzVCLGtCQUFJOU0sQ0FBQyxHQUFHLEtBQUs4SCxPQUFMLENBQWEyRixtQkFBckI7QUFDQSxtQkFBSzNGLE9BQUwsQ0FBYVUsUUFBYixDQUFzQmtGLE1BQXRCLENBQTZCLFVBQVVsTyxDQUFWLEVBQWE7QUFDdEMsdUJBQU9BLENBQUMsWUFBWW9FLEtBQWIsR0FBcUJwRSxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUt3RixTQUFMLENBQWV2RixDQUFDLENBQUNtTixVQUFGLENBQWEsQ0FBYixDQUFmLEVBQWdDbk4sQ0FBQyxDQUFDbU4sVUFBRixDQUFhLENBQWIsQ0FBaEMsRUFBaUQ1TSxDQUFqRCxLQUF1RFIsQ0FBQyxDQUFDLENBQUQsQ0FBRCxDQUFLd0YsU0FBTCxDQUFldkYsQ0FBQyxDQUFDbU4sVUFBRixDQUFhLENBQWIsQ0FBZixFQUFnQ25OLENBQUMsQ0FBQ21OLFVBQUYsQ0FBYSxDQUFiLENBQWhDLEVBQWlENU0sQ0FBakQsQ0FBNUUsR0FBa0lSLENBQUMsQ0FBQ3dGLFNBQUYsQ0FBWXZGLENBQUMsQ0FBQ21OLFVBQUYsQ0FBYSxDQUFiLENBQVosRUFBNkJuTixDQUFDLENBQUNtTixVQUFGLENBQWEsQ0FBYixDQUE3QixFQUE4QzVNLENBQTlDLENBQXpJO0FBQ0gsZUFGRCxFQUVHa0MsTUFGSCxLQUVlLEtBQUswSyxVQUFMLENBQWdCMUssTUFBaEIsR0FBeUIsQ0FBMUIsRUFBOEIsY0FBYyxPQUFPLEtBQUs0RixPQUFMLENBQWE2RixPQUFsQyxJQUE2QyxLQUFLN0YsT0FBTCxDQUFhNkYsT0FBYixDQUFxQnpOLElBQXJCLENBQTBCLElBQTFCLEVBQWdDLGVBQWhDLENBRnpGO0FBR0g7O0FBQ0QsZ0JBQUksS0FBSzhNLHFCQUFMLEVBQUosRUFBa0M7QUFDOUIsa0JBQUk1TCxDQUFDLEdBQUcsS0FBSzBHLE9BQUwsQ0FBYWlCLHFCQUFyQjtBQUNBLG1CQUFLakIsT0FBTCxDQUFhZ0IsU0FBYixJQUEwQixNQUFNLEtBQUs4RCxVQUFMLENBQWdCMUssTUFBaEQsS0FBMkRkLENBQUMsR0FBRyxJQUEvRDtBQUNBLGtCQUFJVixDQUFDLEdBQUcsS0FBS29ILE9BQUwsQ0FBYVksVUFBYixDQUF3QmdGLE1BQXhCLENBQStCLFVBQVVsTyxDQUFWLEVBQWE7QUFDNUMsdUJBQU9BLENBQUMsWUFBWW9FLEtBQWIsR0FBcUJwRSxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUt3RixTQUFMLENBQWV2RixDQUFDLENBQUNtTixVQUFGLENBQWEsQ0FBYixDQUFmLEVBQWdDbk4sQ0FBQyxDQUFDbU4sVUFBRixDQUFhLENBQWIsQ0FBaEMsRUFBaUR4TCxDQUFqRCxLQUF1RDVCLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBS3dGLFNBQUwsQ0FBZXZGLENBQUMsQ0FBQ21OLFVBQUYsQ0FBYSxDQUFiLENBQWYsRUFBZ0NuTixDQUFDLENBQUNtTixVQUFGLENBQWEsQ0FBYixDQUFoQyxFQUFpRHhMLENBQWpELENBQTVFLEdBQWtJNUIsQ0FBQyxDQUFDd0YsU0FBRixDQUFZdkYsQ0FBQyxDQUFDbU4sVUFBRixDQUFhLENBQWIsQ0FBWixFQUE2Qm5OLENBQUMsQ0FBQ21OLFVBQUYsQ0FBYSxDQUFiLENBQTdCLENBQXpJO0FBQ0gsZUFGRyxFQUVEMUssTUFGUDtBQUFBLGtCQUdJTyxDQUFDLEdBQUcsS0FBS3FGLE9BQUwsQ0FBYThGLHVCQUFiLElBQXdDLE1BQU0sS0FBS2hCLFVBQUwsQ0FBZ0IxSyxNQUh0RTtBQUlBeEIsZUFBQyxJQUFJLENBQUMrQixDQUFOLEtBQWEsS0FBS21LLFVBQUwsQ0FBZ0IxSyxNQUFoQixHQUF5QixDQUExQixFQUE4QixjQUFjLE9BQU8sS0FBSzRGLE9BQUwsQ0FBYTZGLE9BQWxDLElBQTZDLEtBQUs3RixPQUFMLENBQWE2RixPQUFiLENBQXFCek4sSUFBckIsQ0FBMEIsSUFBMUIsRUFBZ0MsZUFBaEMsQ0FBdkY7QUFDSDs7QUFDRCxtQkFDSSxLQUFLK0ssTUFBTCxJQUNBLE1BQ0ksS0FBS25ELE9BQUwsQ0FBYStGLFNBQWIsS0FDQyxLQUFLL0YsT0FBTCxDQUFhc0IsVUFBYixJQUEyQixLQUFLd0QsVUFBTCxDQUFnQjFLLE1BQTNDLElBQ00sS0FBS3dDLE9BQUwsQ0FBYSxLQUFLa0ksVUFBTCxDQUFnQixDQUFoQixDQUFiLEdBQWtDLEtBQUtuQixJQUFMLEVBRHhDLElBRUssS0FBSzNELE9BQUwsQ0FBYXNCLFVBQWIsSUFBMkIsTUFBTSxLQUFLd0QsVUFBTCxDQUFnQjFLLE1BQWpELEtBQTRELEtBQUs0TCxZQUFMLENBQWtCLEtBQUtsQixVQUFMLENBQWdCLENBQWhCLENBQWxCLEVBQXNDLEtBQUtBLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBdEMsR0FBMkQsS0FBS25CLElBQUwsRUFBdkgsQ0FITixDQURKLENBRko7QUFTSDs7QUFDRCxjQUFJM0wsQ0FBQyxDQUFDb04sU0FBRixDQUFZQyxRQUFaLENBQXFCaE0sQ0FBQyxDQUFDNE0sbUJBQXZCLENBQUosRUFBaUQ7QUFDN0MsZ0JBQUt2TyxDQUFDLENBQUM2TixjQUFGLElBQW9CLENBQUMsS0FBS2IsWUFBTCxDQUFrQjFNLENBQWxCLENBQTFCLEVBQWlEO0FBQ2pELGdCQUFJNkMsQ0FBQyxHQUFHLENBQVI7QUFBQSxnQkFDSXRDLENBQUMsR0FBRyxLQUFLeUgsT0FBTCxDQUFha0csY0FBYixHQUE4QixDQUE5QixHQUFrQyxLQUFLbEcsT0FBTCxDQUFheUIsY0FEdkQ7O0FBRUEsZ0JBQUksS0FBS3pCLE9BQUwsQ0FBYW1HLFNBQWpCLEVBQTRCO0FBQ3hCLGtCQUFJckwsQ0FBQyxHQUFHOUMsQ0FBQyxDQUFDMk0sT0FBRixDQUFVLE1BQU10TCxDQUFDLENBQUMrTSxTQUFsQixDQUFSO0FBQ0N2TCxlQUFDLEdBQUd2QyxDQUFDLENBQUM2RyxtQkFBRixDQUFzQnJFLENBQXRCLENBQUwsRUFBaUN2QyxDQUFDLEdBQUcsQ0FBckM7QUFDSDs7QUFDRCxtQkFDSSxLQUFLbUosU0FBTCxDQUFlN0csQ0FBZixFQUFrQjRCLFFBQWxCLENBQTJCLEtBQUtpRixTQUFMLENBQWU3RyxDQUFmLEVBQWtCbUIsUUFBbEIsS0FBK0J6RCxDQUExRCxHQUNBLEtBQUs4TixRQUFMLENBQWMsS0FBSzNFLFNBQUwsQ0FBZTdHLENBQWYsQ0FBZCxFQUFpQ0EsQ0FBakMsQ0FEQSxFQUVBLE1BQU0sY0FBYyxPQUFPLEtBQUttRixPQUFMLENBQWFzRyxhQUFsQyxJQUFtRCxLQUFLdEcsT0FBTCxDQUFhc0csYUFBYixDQUEyQmxPLElBQTNCLENBQWdDLElBQWhDLEVBQXNDLEtBQUtzSixTQUFMLENBQWU3RyxDQUFmLENBQXRDLEVBQXlEQSxDQUF6RCxDQUF6RCxDQUhKO0FBS0g7O0FBQ0QsY0FBSTdDLENBQUMsQ0FBQ29OLFNBQUYsQ0FBWUMsUUFBWixDQUFxQmhNLENBQUMsQ0FBQ2tOLGVBQXZCLENBQUosRUFBNkM7QUFDekMsZ0JBQUs3TyxDQUFDLENBQUM2TixjQUFGLElBQW9CLENBQUMsS0FBS2IsWUFBTCxDQUFrQjFNLENBQWxCLENBQTFCLEVBQWlEO0FBQ2hENkMsYUFBQyxHQUFHLENBQUwsRUFBVXRDLENBQUMsR0FBRyxLQUFLeUgsT0FBTCxDQUFha0csY0FBYixHQUE4QixDQUE5QixHQUFrQyxLQUFLbEcsT0FBTCxDQUFheUIsY0FBN0Q7O0FBQ0EsZ0JBQUksS0FBS3pCLE9BQUwsQ0FBYW1HLFNBQWpCLEVBQTRCO0FBQ3hCckwsZUFBQyxHQUFHOUMsQ0FBQyxDQUFDMk0sT0FBRixDQUFVLE1BQU10TCxDQUFDLENBQUMrTSxTQUFsQixDQUFKO0FBQ0N2TCxlQUFDLEdBQUd2QyxDQUFDLENBQUM2RyxtQkFBRixDQUFzQnJFLENBQXRCLENBQUwsRUFBaUN2QyxDQUFDLEdBQUcsQ0FBckM7QUFDSDs7QUFDRCxtQkFDSSxLQUFLbUosU0FBTCxDQUFlN0csQ0FBZixFQUFrQjRCLFFBQWxCLENBQTJCLEtBQUtpRixTQUFMLENBQWU3RyxDQUFmLEVBQWtCbUIsUUFBbEIsS0FBK0J6RCxDQUExRCxHQUNBLEtBQUs4TixRQUFMLENBQWMsS0FBSzNFLFNBQUwsQ0FBZTdHLENBQWYsQ0FBZCxFQUFpQ0EsQ0FBakMsQ0FEQSxFQUVBLE1BQU0sY0FBYyxPQUFPLEtBQUttRixPQUFMLENBQWFzRyxhQUFsQyxJQUFtRCxLQUFLdEcsT0FBTCxDQUFhc0csYUFBYixDQUEyQmxPLElBQTNCLENBQWdDLElBQWhDLEVBQXNDLEtBQUtzSixTQUFMLENBQWU3RyxDQUFmLENBQXRDLEVBQXlEQSxDQUF6RCxDQUF6RCxDQUhKO0FBS0g7O0FBQ0QsY0FBSTdDLENBQUMsQ0FBQ29OLFNBQUYsQ0FBWUMsUUFBWixDQUFxQmhNLENBQUMsQ0FBQ21OLFlBQXZCLENBQUosRUFBMEM7QUFDdEMsZ0JBQUs5TyxDQUFDLENBQUM2TixjQUFGLElBQW9CLENBQUMsS0FBS2IsWUFBTCxDQUFrQjFNLENBQWxCLENBQTFCLEVBQWlEO0FBQ2pELGlCQUFLMkwsSUFBTDtBQUNIOztBQUNELGNBQUkzTCxDQUFDLENBQUNvTixTQUFGLENBQVlDLFFBQVosQ0FBcUJoTSxDQUFDLENBQUNvTixXQUF2QixDQUFKLEVBQXlDO0FBQ3JDLGdCQUFLL08sQ0FBQyxDQUFDNk4sY0FBRixJQUFvQixDQUFDLEtBQUtiLFlBQUwsQ0FBa0IxTSxDQUFsQixDQUExQixFQUFpRDtBQUNqRCxpQkFBS2dJLE9BQUwsQ0FBYXNCLFVBQWIsSUFBMkIsS0FBS3dELFVBQUwsQ0FBZ0IxSyxNQUEzQyxHQUNNLEtBQUt3QyxPQUFMLENBQWEsS0FBS2tJLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBYixDQUROLEdBRU0sS0FBSzlFLE9BQUwsQ0FBYXNCLFVBQWIsSUFBMkIsTUFBTSxLQUFLd0QsVUFBTCxDQUFnQjFLLE1BQWpELElBQTJELEtBQUs0TCxZQUFMLENBQWtCLEtBQUtsQixVQUFMLENBQWdCLENBQWhCLENBQWxCLEVBQXNDLEtBQUtBLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBdEMsQ0FGakUsRUFHSSxLQUFLbkIsSUFBTCxFQUhKO0FBSUg7QUFDSixTQXhFSSxNQXdFRSxLQUFLQSxJQUFMO0FBQ2QsT0FsT0QsRUFtT0NoTSxDQUFDLENBQUN3QixTQUFGLENBQVl3SSxXQUFaLEdBQTBCLFVBQVVqSyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDdkMsWUFBSUssQ0FBQyxHQUFHLEtBQUtzSyxNQUFMLENBQVloRSxhQUFaLENBQTBCLE1BQU1qRixDQUFDLENBQUNxTixnQkFBbEMsQ0FBUjtBQUNDMU8sU0FBQyxDQUFDMEssS0FBRixDQUFRaUUsVUFBUixHQUFxQixTQUF0QixFQUFtQzNPLENBQUMsQ0FBQzRPLFNBQUYsR0FBY2pQLENBQWpEO0FBQ0EsWUFBSU0sQ0FBQyxHQUFHLEtBQUtxSyxNQUFMLENBQVl3QixxQkFBWixFQUFSO0FBQUEsWUFDSTVMLENBQUMsR0FBR0YsQ0FBQyxDQUFDOEwscUJBQUYsRUFEUjtBQUFBLFlBRUl4SyxDQUFDLEdBQUc1QixDQUFDLENBQUNvTSxxQkFBRixFQUZSO0FBQUEsWUFHSWxMLENBQUMsR0FBR1UsQ0FBQyxDQUFDeUssR0FIVjtBQUFBLFlBSUlwSixDQUFDLEdBQUdyQixDQUFDLENBQUMySyxJQUpWOztBQUtBLFlBQUksS0FBS2pFLE9BQUwsQ0FBYXFELFVBQWIsSUFBMkIsS0FBS3JELE9BQUwsQ0FBYW9ELFFBQTVDLEVBQXNEO0FBQ2xELGNBQUlqTCxDQUFDLEdBQUcsS0FBS21LLE1BQUwsQ0FBWWxELFVBQVosQ0FBdUIwRSxxQkFBdkIsRUFBUjtBQUNDbEwsV0FBQyxJQUFJVCxDQUFDLENBQUM0TCxHQUFSLEVBQWVwSixDQUFDLElBQUl4QyxDQUFDLENBQUM4TCxJQUF0QjtBQUNILFNBSEQsTUFHUXJMLENBQUMsSUFBSVgsQ0FBQyxDQUFDOEwsR0FBUixFQUFlcEosQ0FBQyxJQUFJMUMsQ0FBQyxDQUFDZ00sSUFBdEI7O0FBQ05yTCxTQUFDLElBQUlWLENBQUMsQ0FBQzhMLE1BQVIsRUFBa0JySixDQUFDLElBQUl6QyxDQUFDLENBQUNnTSxLQUFGLEdBQVUsQ0FBakMsRUFBc0N2SixDQUFDLElBQUlyQixDQUFDLENBQUM0SyxLQUFGLEdBQVUsQ0FBckQsRUFBMERsTSxDQUFDLENBQUMwSyxLQUFGLENBQVFxQixHQUFSLEdBQWNuTCxDQUFDLEdBQUcsSUFBNUUsRUFBb0ZaLENBQUMsQ0FBQzBLLEtBQUYsQ0FBUXVCLElBQVIsR0FBZXRKLENBQUMsR0FBRyxJQUF2RyxFQUE4RyxjQUFjLE9BQU8sS0FBS3FGLE9BQUwsQ0FBYTZHLGFBQWxDLElBQW1ELEtBQUs3RyxPQUFMLENBQWE2RyxhQUFiLENBQTJCek8sSUFBM0IsQ0FBZ0MsSUFBaEMsRUFBc0NKLENBQXRDLEVBQXlDTixDQUF6QyxDQUFqSztBQUNILE9BaFBELEVBaVBDQyxDQUFDLENBQUN3QixTQUFGLENBQVkyTixXQUFaLEdBQTBCLFlBQVk7QUFDbkMsYUFBS3hFLE1BQUwsQ0FBWWhFLGFBQVosQ0FBMEIsTUFBTWpGLENBQUMsQ0FBQ3FOLGdCQUFsQyxFQUFvRGhFLEtBQXBELENBQTBEaUUsVUFBMUQsR0FBdUUsUUFBdkU7QUFDSCxPQW5QRCxFQW9QQ2hQLENBQUMsQ0FBQ3dCLFNBQUYsQ0FBWTROLHFCQUFaLEdBQW9DLFVBQVVyUCxDQUFWLEVBQWE7QUFDOUMsZUFBTyxDQUFDLEtBQUtzSSxPQUFMLENBQWFzQixVQUFkLElBQTRCLENBQUM1SixDQUFDLENBQUMwTixTQUFGLENBQVlDLFFBQVosQ0FBcUJoTSxDQUFDLENBQUNtTSxRQUF2QixDQUE3QixJQUFpRSxDQUFDOU4sQ0FBQyxDQUFDME4sU0FBRixDQUFZQyxRQUFaLENBQXFCaE0sQ0FBQyxDQUFDb00sUUFBdkIsQ0FBekU7QUFDSCxPQXRQRCxFQXVQQzlOLENBQUMsQ0FBQ3dCLFNBQUYsQ0FBWTZOLGlCQUFaLEdBQWdDLFlBQVk7QUFDekMsZUFBTyxLQUFLaEgsT0FBTCxDQUFhUSxVQUFiLElBQTJCLEtBQUtSLE9BQUwsQ0FBYVMsV0FBeEMsSUFBdUQsS0FBS1QsT0FBTCxDQUFhcUIsU0FBcEUsSUFBaUYsS0FBS3JCLE9BQUwsQ0FBYXVCLE9BQXJHO0FBQ0gsT0F6UEQsRUEwUEM1SixDQUFDLENBQUN3QixTQUFGLENBQVk4TixTQUFaLEdBQXdCLFVBQVV2UCxDQUFWLEVBQWE7QUFDbEMsZUFBT0EsQ0FBQyxDQUFDME4sU0FBRixDQUFZQyxRQUFaLENBQXFCaE0sQ0FBQyxDQUFDaU0sT0FBdkIsQ0FBUDtBQUNILE9BNVBELEVBNlBDM04sQ0FBQyxDQUFDd0IsU0FBRixDQUFZeUosWUFBWixHQUEyQixVQUFVbEwsQ0FBVixFQUFhO0FBQ3JDLFlBQUlDLENBQUMsR0FBRyxJQUFSO0FBQUEsWUFDSUssQ0FBQyxHQUFHTixDQUFDLENBQUN5TixNQURWOztBQUVBLFlBQ0ksS0FBSzhCLFNBQUwsQ0FBZWpQLENBQWYsTUFDQyxjQUFjLE9BQU8sS0FBS2dJLE9BQUwsQ0FBYWtILFVBQWxDLElBQWdELEtBQUtsSCxPQUFMLENBQWFrSCxVQUFiLENBQXdCOU8sSUFBeEIsQ0FBNkIsSUFBN0IsRUFBbUNELENBQUMsQ0FBQ2dHLFFBQUYsQ0FBVzNFLGFBQVgsQ0FBeUJ4QixDQUFDLENBQUNrSSxPQUFGLENBQVV3RixJQUFuQyxDQUFuQyxFQUE2RTFOLENBQUMsQ0FBQ29OLFNBQUYsQ0FBWStCLFFBQVosR0FBdUIxQyxLQUF2QixDQUE2QixJQUE3QixDQUE3RSxFQUFpSHpNLENBQWpILENBQWhELEVBQXFLLEtBQUsrTyxxQkFBTCxDQUEyQi9PLENBQTNCLENBRHRLLENBREosRUFHRTtBQUNFLGNBQ0ssS0FBS2dQLGlCQUFMLE9BQ0ksS0FBS0ksY0FBTCxLQUF3QixLQUFLcEgsT0FBTCxDQUFhQyxPQUFyQyxHQUNNLEtBQUs2RSxVQUFMLENBQWdCLENBQWhCLElBQXFCLEtBQUs5RSxPQUFMLENBQWF1QixPQUFiLENBQXFCM0gsS0FBckIsRUFEM0IsR0FFSyxLQUFLd04sY0FBTCxLQUF3QixLQUFLcEgsT0FBTCxDQUFhUSxVQUFyQyxLQUFvRCxLQUFLc0UsVUFBTCxDQUFnQixDQUFoQixJQUFxQixLQUFLOUUsT0FBTCxDQUFhcUIsU0FBYixDQUF1QnpILEtBQXZCLEVBQXpFLENBSFQsR0FJRCxNQUFNLEtBQUtrTCxVQUFMLENBQWdCMUssTUFMMUIsRUFPSTtBQUNKLGNBQUluQyxDQUFDLEdBQUcsS0FBS3FLLE1BQUwsQ0FBWWhFLGFBQVosQ0FBMEIsTUFBTWpGLENBQUMsQ0FBQ2lNLE9BQVIsR0FBa0IsY0FBbEIsR0FBbUMsS0FBS1IsVUFBTCxDQUFnQixDQUFoQixFQUFtQnRJLE9BQW5CLEVBQW5DLEdBQWtFLElBQTVGLENBQVI7QUFBQSxjQUNJdEUsQ0FBQyxHQUFHLEtBQUs0TSxVQUFMLENBQWdCLENBQWhCLEVBQW1CbEwsS0FBbkIsRUFEUjtBQUFBLGNBRUlOLENBQUMsR0FBRyxJQUFJbkIsQ0FBQyxDQUFDZ0csUUFBTixDQUFlbkcsQ0FBQyxDQUFDa0ksT0FBRixDQUFVd0YsSUFBekIsQ0FGUjtBQUFBLGNBR0k5TSxDQUFDLEdBQUcsQ0FBQyxDQUhUOztBQUlBLGNBQUlWLENBQUMsQ0FBQ3NFLE9BQUYsS0FBY2xELENBQUMsQ0FBQ2tELE9BQUYsRUFBbEIsRUFBK0I7QUFDM0IsZ0JBQUk3QixDQUFDLEdBQUd6QyxDQUFDLENBQUMwQixLQUFGLEVBQVI7QUFDQzFCLGFBQUMsR0FBR29CLENBQUMsQ0FBQ00sS0FBRixFQUFMLEVBQWtCTixDQUFDLEdBQUdxQixDQUFDLENBQUNmLEtBQUYsRUFBdEIsRUFBbUNoQixDQUFDLEdBQUcsQ0FBQyxDQUF4QztBQUNIOztBQUNELGNBQ0trRCxLQUFLLENBQUMzQyxTQUFOLENBQWdCK0UsS0FBaEIsQ0FBc0I5RixJQUF0QixDQUEyQixLQUFLa0ssTUFBTCxDQUFZK0UsZ0JBQVosQ0FBNkIsTUFBTWhPLENBQUMsQ0FBQ2lNLE9BQXJDLENBQTNCLEVBQTBFbEYsT0FBMUUsQ0FBa0YsVUFBVTFJLENBQVYsRUFBYTtBQUM1RixnQkFBSU0sQ0FBQyxHQUFHLElBQUlHLENBQUMsQ0FBQ2dHLFFBQU4sQ0FBZXpHLENBQUMsQ0FBQ3dJLE9BQUYsQ0FBVXdGLElBQXpCLENBQVI7QUFBQSxnQkFDSXpOLENBQUMsR0FBR04sQ0FBQyxDQUFDMlAsU0FBRixDQUFZdFAsQ0FBWixDQURSO0FBRUFBLGFBQUMsQ0FBQ2tGLFNBQUYsQ0FBWWhGLENBQVosRUFBZW9CLENBQWYsS0FBcUJyQixDQUFDLENBQUNtTixTQUFGLENBQVkzSCxHQUFaLENBQWdCcEUsQ0FBQyxDQUFDa08sU0FBbEIsQ0FBckIsRUFBb0Q3UCxDQUFDLENBQUM4SyxTQUFGLEdBQWN2SyxDQUFDLENBQUN1SyxTQUFwRTtBQUNILFdBSkEsR0FLRHhLLENBQUMsQ0FBQ29OLFNBQUYsQ0FBWTNILEdBQVosQ0FBZ0JwRSxDQUFDLENBQUNtTyxTQUFsQixDQUxDLEVBTUQ1TyxDQUFDLElBQUlYLENBQUMsSUFBSUEsQ0FBQyxDQUFDbU4sU0FBRixDQUFZM0gsR0FBWixDQUFnQnBFLENBQUMsQ0FBQ29PLFNBQWxCLENBQUwsRUFBbUN6UCxDQUFDLENBQUNvTixTQUFGLENBQVkzSCxHQUFaLENBQWdCcEUsQ0FBQyxDQUFDb08sU0FBbEIsQ0FBdkMsS0FBd0V4UCxDQUFDLElBQUlBLENBQUMsQ0FBQ21OLFNBQUYsQ0FBWXNDLE1BQVosQ0FBbUJyTyxDQUFDLENBQUNvTyxTQUFyQixDQUFMLEVBQXNDelAsQ0FBQyxDQUFDb04sU0FBRixDQUFZc0MsTUFBWixDQUFtQnJPLENBQUMsQ0FBQ29PLFNBQXJCLENBQTlHLENBTkEsRUFPRCxLQUFLekgsT0FBTCxDQUFhMkIsV0FSakIsRUFTRTtBQUNFLGdCQUFJckosQ0FBQyxHQUFHZ0IsQ0FBQyxDQUFDcUUsSUFBRixDQUFPekYsQ0FBUCxFQUFVLEtBQVYsQ0FBUjs7QUFDQSxnQkFBSyxLQUFLOEgsT0FBTCxDQUFhZ0IsU0FBYixLQUEyQjFJLENBQUMsSUFBSSxDQUFoQyxHQUFvQ0EsQ0FBQyxHQUFHLENBQTdDLEVBQWlEO0FBQzdDLGtCQUFJdUMsQ0FBQyxHQUFHLEtBQUtnSCxjQUFMLENBQW9CdkosQ0FBcEIsQ0FBUjtBQUFBLGtCQUNJQyxDQUFDLEdBQUdELENBQUMsR0FBRyxHQUFKLElBQVcsS0FBSzBILE9BQUwsQ0FBYU8sV0FBYixDQUF5QjFGLENBQXpCLElBQThCLEtBQUttRixPQUFMLENBQWFPLFdBQWIsQ0FBeUIxRixDQUF6QixDQUE5QixHQUE0RCxNQUFNQSxDQUFOLEdBQVUsR0FBakYsQ0FEUjtBQUVBLG1CQUFLOEcsV0FBTCxDQUFpQjNKLENBQWpCLEVBQW9CTyxDQUFwQjtBQUNILGFBSkQsTUFJTyxLQUFLdU8sV0FBTDtBQUNWO0FBQ0o7QUFDSixPQXRTRCxFQXVTQ25QLENBQUMsQ0FBQ3dCLFNBQUYsQ0FBWTBKLFlBQVosR0FBMkIsVUFBVW5MLENBQVYsRUFBYTtBQUNyQ0EsU0FBQyxDQUFDeU4sTUFBRjtBQUNBLGFBQUtuRixPQUFMLENBQWFTLFdBQWIsS0FBNkIsQ0FBQyxLQUFLVCxPQUFMLENBQWFTLFdBQWQsSUFBNkIsS0FBS1QsT0FBTCxDQUFhcUIsU0FBMUMsSUFBdUQsS0FBS3JCLE9BQUwsQ0FBYXVCLE9BQWpHLE1BQStHLEtBQUt1RCxVQUFMLENBQWdCMUssTUFBaEIsR0FBeUIsQ0FBMUIsRUFBOEIsS0FBSytJLE1BQUwsRUFBNUk7QUFDSCxPQTFTRCxFQTJTQ3hMLENBQUMsQ0FBQ3dCLFNBQUYsQ0FBWTZKLE9BQVosR0FBc0IsVUFBVXRMLENBQVYsRUFBYTtBQUNoQyxZQUFJQyxDQUFDLEdBQUcsS0FBS3lKLFVBQUwsRUFBUjtBQUFBLFlBQ0lwSixDQUFDLEdBQUdMLENBQUMsQ0FBQyxDQUFELENBRFQ7QUFBQSxZQUVJTSxDQUFDLEdBQUdOLENBQUMsQ0FBQyxDQUFELENBRlQ7QUFBQSxZQUdJTyxDQUFDLEdBQUcsS0FBSzhILE9BQUwsQ0FBYW5DLE1BSHJCOztBQUlBLFlBQ0ksS0FBS21DLE9BQUwsQ0FBYVEsVUFBYixHQUNNeEksQ0FBQyxZQUFZRyxDQUFDLENBQUNnRyxRQUFmLElBQTJCbEcsQ0FBQyxZQUFZRSxDQUFDLENBQUNnRyxRQUExQyxJQUFzRG5HLENBQUMsQ0FBQzZGLE1BQUYsQ0FBUzNGLENBQVQsTUFBZ0IsS0FBSzhILE9BQUwsQ0FBYUMsT0FBYixDQUFxQmxILEtBQTNGLElBQW9HZCxDQUFDLENBQUM0RixNQUFGLENBQVMzRixDQUFULE1BQWdCLEtBQUs4SCxPQUFMLENBQWFRLFVBQWIsQ0FBd0J6SCxLQURsSixHQUVNLEtBQUtpSCxPQUFMLENBQWFzQixVQUFiLEdBQ0F0SixDQUFDLFlBQVlHLENBQUMsQ0FBQ2dHLFFBQWYsSUFBMkJuRyxDQUFDLENBQUM2RixNQUFGLENBQVMzRixDQUFULE1BQWdCLEtBQUs4SCxPQUFMLENBQWFDLE9BQWIsQ0FBcUJsSCxLQURoRSxHQUVBZixDQUFDLFlBQVlHLENBQUMsQ0FBQ2dHLFFBQWYsSUFBMkJsRyxDQUFDLFlBQVlFLENBQUMsQ0FBQ2dHLFFBQTFDLElBQXNELEtBQUtuRyxDQUFDLENBQUM2RixNQUFGLENBQVMzRixDQUFULENBQUwsR0FBbUIsS0FBSzhILE9BQUwsQ0FBYXdFLFNBQWhDLEdBQTRDdk0sQ0FBQyxDQUFDNEYsTUFBRixDQUFTM0YsQ0FBVCxDQUE1QyxLQUE0RCxLQUFLOEgsT0FBTCxDQUFhQyxPQUFiLENBQXFCbEgsS0FMakosRUFNRTtBQUNFLGNBQUlkLENBQUMsSUFBSUQsQ0FBQyxDQUFDd0UsT0FBRixLQUFjdkUsQ0FBQyxDQUFDdUUsT0FBRixFQUF2QixFQUFvQztBQUNoQyxnQkFBSWxELENBQUMsR0FBR3RCLENBQUMsQ0FBQzRCLEtBQUYsRUFBUjtBQUNDNUIsYUFBQyxHQUFHQyxDQUFDLENBQUMyQixLQUFGLEVBQUwsRUFBa0IzQixDQUFDLEdBQUdxQixDQUFDLENBQUNNLEtBQUYsRUFBdEI7QUFDSDs7QUFDQSxlQUFLb0csT0FBTCxDQUFhcUIsU0FBYixHQUF5QixJQUFJbEosQ0FBQyxDQUFDZ0csUUFBTixDQUFlbkcsQ0FBZixFQUFrQixLQUFLZ0ksT0FBTCxDQUFhbkMsTUFBL0IsRUFBdUMsS0FBS21DLE9BQUwsQ0FBYXRHLElBQXBELENBQTFCLEVBQ0l6QixDQUFDLEtBQUssS0FBSytILE9BQUwsQ0FBYXVCLE9BQWIsR0FBdUIsSUFBSXBKLENBQUMsQ0FBQ2dHLFFBQU4sQ0FBZWxHLENBQWYsRUFBa0IsS0FBSytILE9BQUwsQ0FBYW5DLE1BQS9CLEVBQXVDLEtBQUttQyxPQUFMLENBQWF0RyxJQUFwRCxDQUE1QixDQURMLEVBRUksS0FBSzZLLFdBQUwsRUFGSixFQUdJLEtBQUtwQixNQUFMLEVBSEo7QUFJQSxjQUFJdkssQ0FBQyxHQUFHWixDQUFDLENBQUM0QixLQUFGLEVBQVI7QUFBQSxjQUNJZSxDQUFDLEdBQUcsQ0FEUjtBQUVBLFdBQUMsS0FBS3FGLE9BQUwsQ0FBYVEsVUFBYixHQUEwQnhJLENBQUMsQ0FBQzZGLE1BQUYsQ0FBUzNGLENBQVQsTUFBZ0JSLENBQUMsQ0FBQ3lOLE1BQUYsQ0FBU3BNLEtBQW5ELEdBQTJEckIsQ0FBQyxDQUFDeU4sTUFBRixDQUFTcE0sS0FBVCxDQUFlNE8sVUFBZixDQUEwQjNQLENBQUMsQ0FBQzZGLE1BQUYsQ0FBUzNGLENBQVQsQ0FBMUIsQ0FBNUQsTUFBeUdVLENBQUMsR0FBR1gsQ0FBQyxDQUFDMkIsS0FBRixFQUFMLEVBQWtCZSxDQUFDLEdBQUcsS0FBS3FGLE9BQUwsQ0FBYXlCLGNBQWIsR0FBOEIsQ0FBNUosR0FDSSxjQUFjLE9BQU8sS0FBS3pCLE9BQUwsQ0FBYTRILFFBQWxDLElBQThDLEtBQUs1SCxPQUFMLENBQWE0SCxRQUFiLENBQXNCeFAsSUFBdEIsQ0FBMkIsSUFBM0IsRUFBaUMsS0FBS3lQLFlBQUwsRUFBakMsRUFBc0QsS0FBS0MsVUFBTCxFQUF0RCxDQURsRCxFQUVJLEtBQUt6QixRQUFMLENBQWN6TixDQUFkLEVBQWlCK0IsQ0FBakIsQ0FGSjtBQUdIO0FBQ0osT0FyVUQsRUFzVUNoRCxDQUFDLENBQUN3QixTQUFGLENBQVl5SyxVQUFaLEdBQXlCLFlBQVk7QUFDbEMsZUFBTyxLQUFLdEIsTUFBTCxJQUFlLFdBQVcsS0FBS0EsTUFBTCxDQUFZSSxLQUFaLENBQWtCQyxPQUFuRDtBQUNILE9BeFVELEVBeVVDaEwsQ0FBQyxDQUFDd0IsU0FBRixDQUFZK0ksb0JBQVosR0FBbUMsWUFBWTtBQUM1QzFKLGNBQU0sQ0FBQ29DLE9BQVAsS0FDS3BDLE1BQU0sQ0FBQ29DLE9BQVAsR0FBaUIsVUFBVWxELENBQVYsRUFBYTtBQUMzQixlQUFLLElBQUlDLENBQUMsR0FBR2EsTUFBTSxDQUFDMkgsSUFBUCxDQUFZekksQ0FBWixDQUFSLEVBQXdCTSxDQUFDLEdBQUdMLENBQUMsQ0FBQ3lDLE1BQTlCLEVBQXNDbkMsQ0FBQyxHQUFHLElBQUk2RCxLQUFKLENBQVU5RCxDQUFWLENBQS9DLEVBQTZEQSxDQUE3RDtBQUFrRUMsYUFBQyxDQUFFRCxDQUFDLElBQUksQ0FBUCxDQUFELEdBQWMsQ0FBQ0wsQ0FBQyxDQUFDSyxDQUFELENBQUYsRUFBT04sQ0FBQyxDQUFDQyxDQUFDLENBQUNLLENBQUQsQ0FBRixDQUFSLENBQWQ7QUFBbEU7O0FBQ0EsaUJBQU9DLENBQVA7QUFDSCxTQUpMLEdBS0k4UCxPQUFPLENBQUM1TyxTQUFSLENBQWtCNkYsT0FBbEIsS0FBOEIrSSxPQUFPLENBQUM1TyxTQUFSLENBQWtCNkYsT0FBbEIsR0FBNEIrSSxPQUFPLENBQUM1TyxTQUFSLENBQWtCNk8saUJBQWxCLElBQXVDRCxPQUFPLENBQUM1TyxTQUFSLENBQWtCOE8scUJBQW5ILENBTEosRUFNSUYsT0FBTyxDQUFDNU8sU0FBUixDQUFrQndMLE9BQWxCLEtBQ0tvRCxPQUFPLENBQUM1TyxTQUFSLENBQWtCd0wsT0FBbEIsR0FBNEIsVUFBVWpOLENBQVYsRUFBYTtBQUN0QyxjQUFJQyxDQUFDLEdBQUcsSUFBUjs7QUFDQSxhQUFHO0FBQ0MsZ0JBQUlBLENBQUMsQ0FBQ3FILE9BQUYsQ0FBVXRILENBQVYsQ0FBSixFQUFrQixPQUFPQyxDQUFQO0FBQ2xCQSxhQUFDLEdBQUdBLENBQUMsQ0FBQ3VRLGFBQUYsSUFBbUJ2USxDQUFDLENBQUN5SCxVQUF6QjtBQUNILFdBSEQsUUFHUyxTQUFTekgsQ0FBVCxJQUFjLE1BQU1BLENBQUMsQ0FBQ3dRLFFBSC9COztBQUlBLGlCQUFPLElBQVA7QUFDSCxTQVJMLENBTko7QUFlSCxPQXpWRCxFQTBWQXhRLENBM1ZKO0FBNlZILEtBNVlHLENBNFlEZ0QsQ0FBQyxDQUFDeU4sUUE1WUQsQ0FKUjs7QUFpWkF6USxLQUFDLENBQUMwUSxVQUFGLEdBQWV4TixDQUFmO0FBQ0gsR0F4eEJGLEVBeXhCQyxVQUFVbkQsQ0FBVixFQUFhQyxDQUFiLEVBQWdCSyxDQUFoQixFQUFtQjtBQUNmOztBQUNBUSxVQUFNLENBQUNDLGNBQVAsQ0FBc0JkLENBQXRCLEVBQXlCLFlBQXpCLEVBQXVDO0FBQUVvQixXQUFLLEVBQUUsQ0FBQztBQUFWLEtBQXZDO0FBQ0EsUUFBSWQsQ0FBQyxHQUFHRCxDQUFDLENBQUMsQ0FBRCxDQUFUO0FBQ0NMLEtBQUMsQ0FBQzBRLFVBQUYsR0FBZXBRLENBQUMsQ0FBQ29RLFVBQWxCLEVBQStCclEsQ0FBQyxDQUFDLENBQUQsQ0FBaEMsRUFBcUNBLENBQUMsQ0FBQyxFQUFELENBQXRDLEVBQTZDRCxNQUFNLENBQUNzUSxVQUFQLEdBQW9CcFEsQ0FBQyxDQUFDb1EsVUFBbkUsRUFBaUYxUSxDQUFDLFdBQUQsR0FBWU0sQ0FBQyxDQUFDb1EsVUFBL0Y7QUFDSCxHQTl4QkYsRUEreEJDLFVBQVUzUSxDQUFWLEVBQWFDLENBQWIsRUFBZ0JLLENBQWhCLEVBQW1CO0FBQ2Y7O0FBQ0EsUUFBSUMsQ0FBQyxHQUNBLFFBQVEsS0FBSzhILFlBQWQsSUFDQSxVQUFVckksQ0FBVixFQUFhO0FBQ1QsVUFBSUEsQ0FBQyxJQUFJQSxDQUFDLENBQUNzQixVQUFYLEVBQXVCLE9BQU90QixDQUFQO0FBQ3ZCLFVBQUlDLENBQUMsR0FBRyxFQUFSO0FBQ0EsVUFBSSxRQUFRRCxDQUFaLEVBQWUsS0FBSyxJQUFJTSxDQUFULElBQWNOLENBQWQ7QUFBaUJjLGNBQU0sQ0FBQ1ksY0FBUCxDQUFzQmhCLElBQXRCLENBQTJCVixDQUEzQixFQUE4Qk0sQ0FBOUIsTUFBcUNMLENBQUMsQ0FBQ0ssQ0FBRCxDQUFELEdBQU9OLENBQUMsQ0FBQ00sQ0FBRCxDQUE3QztBQUFqQjtBQUNmLGFBQVFMLENBQUMsV0FBRCxHQUFZRCxDQUFiLEVBQWlCQyxDQUF4QjtBQUNILEtBUEw7O0FBUUFhLFVBQU0sQ0FBQ0MsY0FBUCxDQUFzQmQsQ0FBdEIsRUFBeUIsWUFBekIsRUFBdUM7QUFBRW9CLFdBQUssRUFBRSxDQUFDO0FBQVYsS0FBdkM7O0FBQ0EsUUFBSWIsQ0FBQyxHQUFHRixDQUFDLENBQUMsQ0FBRCxDQUFUO0FBQUEsUUFDSXNCLENBQUMsR0FBR3JCLENBQUMsQ0FBQ0QsQ0FBQyxDQUFDLENBQUQsQ0FBRixDQURUO0FBQUEsUUFFSVksQ0FBQyxHQUFHWixDQUFDLENBQUMsQ0FBRCxDQUZUO0FBQUEsUUFHSTJDLENBQUMsR0FBSSxZQUFZO0FBQ2IsZUFBU2pELENBQVQsR0FBYTtBQUNSLGFBQUtzSSxPQUFMLEdBQWU7QUFDWkMsaUJBQU8sRUFBRSxJQURHO0FBRVpPLG9CQUFVLEVBQUUsSUFGQTtBQUdaNEMsa0JBQVEsRUFBRSxJQUhFO0FBSVprRixrQkFBUSxFQUFFLENBSkU7QUFLWnpLLGdCQUFNLEVBQUUsWUFMSTtBQU1abkUsY0FBSSxFQUFFLE9BTk07QUFPWjhLLG1CQUFTLEVBQUUsS0FQQztBQVFaL0Msd0JBQWMsRUFBRSxDQVJKO0FBU1pvQyx5QkFBZSxFQUFFLENBVEw7QUFVWnhDLG1CQUFTLEVBQUUsSUFWQztBQVdaRSxpQkFBTyxFQUFFLElBWEc7QUFZWmdILGdCQUFNLEVBQUUsSUFaSTtBQWFaQyxpQkFBTyxFQUFFLElBYkc7QUFjWkMsaUJBQU8sRUFBRSxJQWRHO0FBZVpDLGlCQUFPLEVBQUUsSUFmRztBQWdCWkMsaUJBQU8sRUFBRSxJQWhCRztBQWlCWnhILHVCQUFhLEVBQUUsQ0FBQyxDQWpCSjtBQWtCWnlILHdCQUFjLEVBQUUsQ0FBQyxDQWxCTDtBQW1CWnpDLG1CQUFTLEVBQUUsQ0FBQyxDQW5CQTtBQW9CWjlDLG9CQUFVLEVBQUUsQ0FBQyxDQXBCRDtBQXFCWi9CLG9CQUFVLEVBQUUsQ0FBQyxDQXJCRDtBQXNCWnlFLG1CQUFTLEVBQUUsQ0FBQyxDQXRCQTtBQXVCWnRGLHFCQUFXLEVBQUUsQ0FBQyxDQXZCRjtBQXdCWm9JLHlCQUFlLEVBQUUsQ0FBQyxDQXhCTjtBQXlCWmxILHFCQUFXLEVBQUUsQ0FBQyxDQXpCRjtBQTBCWlgsbUJBQVMsRUFBRSxDQUFDLENBMUJBO0FBMkJaOEgseUJBQWUsRUFBRSxDQUFDLENBM0JOO0FBNEJaQyxzQkFBWSxFQUFFLENBQUMsQ0E1Qkg7QUE2Qlp2Rix3QkFBYyxFQUFFLENBQUMsQ0E3Qkw7QUE4Qlp3RixxQkFBVyxFQUFFLENBQUMsQ0E5QkY7QUErQlpsRyxxQkFBVyxFQUFFLENBQUMsQ0EvQkY7QUFnQ1pvRCx3QkFBYyxFQUFFLENBQUMsQ0FoQ0w7QUFpQ1p2Rix3QkFBYyxFQUFFLFlBakNKO0FBa0NaRCxrQkFBUSxFQUFFLEVBbENFO0FBbUNadUUsaUNBQXVCLEVBQUUsQ0FBQyxDQW5DZDtBQW9DWlUsNkJBQW1CLEVBQUUsSUFwQ1Q7QUFxQ1o5RSwwQkFBZ0IsRUFBRSxZQXJDTjtBQXNDWkQsb0JBQVUsRUFBRSxFQXRDQTtBQXVDWk0sbUNBQXlCLEVBQUUsQ0FBQyxDQXZDaEI7QUF3Q1pELCtCQUFxQixFQUFFLElBeENYO0FBeUNaNkUsaUNBQXVCLEVBQUUsQ0FBQyxDQXpDZDtBQTBDWi9FLCtCQUFxQixFQUFFLFlBMUNYO0FBMkNaRCx5QkFBZSxFQUFFLEVBM0NMO0FBNENaVCxtQkFBUyxFQUFFO0FBQUU0SSxtQkFBTyxFQUFFLElBQVg7QUFBaUJDLG1CQUFPLEVBQUUsSUFBMUI7QUFBZ0NDLGtCQUFNLEVBQUUsQ0FBQyxDQUF6QztBQUE0Q0MsaUJBQUssRUFBRSxDQUFDO0FBQXBELFdBNUNDO0FBNkNaOUksb0JBQVUsRUFBRTtBQUNSUixpQkFBSyxFQUFFLE9BREM7QUFFUnVKLGtCQUFNLEVBQUUsUUFGQTtBQUdSQyx5QkFBYSxFQUFFLDZKQUhQO0FBSVJDLHFCQUFTLEVBQUUsMEpBSkg7QUFLUkMsaUJBQUssRUFDRDtBQU5JLFdBN0NBO0FBcURaakoscUJBQVcsRUFBRTtBQUFFa0osZUFBRyxFQUFFLE1BQVA7QUFBZUMsaUJBQUssRUFBRTtBQUF0QixXQXJERDtBQXNEWjlILCtCQUFxQixFQUFFLElBdERYO0FBdURaK0gsZ0JBQU0sRUFBRSxJQXZESTtBQXdEWkMsZ0JBQU0sRUFBRSxJQXhESTtBQXlEWmhDLGtCQUFRLEVBQUUsSUF6REU7QUEwRFovQixpQkFBTyxFQUFFLElBMURHO0FBMkRaZ0Usa0JBQVEsRUFBRSxJQTNERTtBQTREWkMscUJBQVcsRUFBRSxJQTVERDtBQTZEWnhELHVCQUFhLEVBQUUsSUE3REg7QUE4RFp5RCxzQkFBWSxFQUFFLElBOURGO0FBK0RaN0Msb0JBQVUsRUFBRSxJQS9EQTtBQWdFWkwsdUJBQWEsRUFBRSxJQWhFSDtBQWlFWm1ELDBCQUFnQixFQUFFLElBakVOO0FBa0VaQyxzQkFBWSxFQUFFLElBbEVGO0FBbUVaaEgsMkJBQWlCLEVBQUU7QUFuRVAsU0FBaEIsRUFxRUssS0FBS3ZCLFNBQUwsR0FBaUIsRUFyRXRCLEVBc0VLLEtBQUtvRCxVQUFMLEdBQWtCLEVBdEV2QjtBQXVFSDs7QUFDRCxhQUNLcE4sQ0FBQyxDQUFDeUIsU0FBRixDQUFZZ0ssTUFBWixHQUFxQixZQUFZO0FBQzlCLFlBQUl6TCxDQUFDLEdBQUcsSUFBUjtBQUFBLFlBQ0lDLENBQUMsR0FBRzBHLFFBQVEsQ0FBQ2tFLGFBQVQsQ0FBdUIsS0FBdkIsQ0FEUjtBQUVBNUssU0FBQyxDQUFDNkssU0FBRixHQUFjbEosQ0FBQyxDQUFDNFEsYUFBaEI7QUFDQSxZQUFJbFMsQ0FBQyxHQUFHcUcsUUFBUSxDQUFDa0UsYUFBVCxDQUF1QixLQUF2QixDQUFSO0FBQ0N2SyxTQUFDLENBQUN3SyxTQUFGLEdBQWNsSixDQUFDLENBQUM2USxlQUFqQixFQUNJN1EsQ0FBQyxDQUFDLFlBQVksS0FBSzBHLE9BQUwsQ0FBYTZELGVBQTFCLENBQUQsS0FBZ0Q3TCxDQUFDLENBQUNvTixTQUFGLENBQVlzQyxNQUFaLENBQW1CcE8sQ0FBQyxDQUFDOFEsUUFBckIsRUFBK0I5USxDQUFDLENBQUMrUSxRQUFqQyxFQUEyQy9RLENBQUMsQ0FBQ2dSLFFBQTdDLEdBQXdEdFMsQ0FBQyxDQUFDb04sU0FBRixDQUFZM0gsR0FBWixDQUFnQm5FLENBQUMsQ0FBQyxZQUFZLEtBQUswRyxPQUFMLENBQWE2RCxlQUExQixDQUFqQixDQUF4RyxDQURKLEVBRUksS0FBSzdELE9BQUwsQ0FBYW1HLFNBQWIsSUFBMEJuTyxDQUFDLENBQUNvTixTQUFGLENBQVkzSCxHQUFaLENBQWdCbkUsQ0FBQyxDQUFDNk0sU0FBbEIsQ0FGOUIsRUFHSSxLQUFLbkcsT0FBTCxDQUFhNkksZUFBYixJQUFnQzdRLENBQUMsQ0FBQ29OLFNBQUYsQ0FBWTNILEdBQVosQ0FBZ0JuRSxDQUFDLENBQUN1UCxlQUFsQixDQUhwQzs7QUFJQSxhQUFLLElBQUk1USxDQUFDLEdBQUcsS0FBS3lKLFNBQUwsQ0FBZSxDQUFmLEVBQWtCOUgsS0FBbEIsRUFBUixFQUFtQzFCLENBQUMsR0FBR0QsQ0FBQyxDQUFDK0QsUUFBRixFQUF2QyxFQUFxRHBELENBQUMsR0FBR1gsQ0FBQyxDQUFDK0QsUUFBRixLQUFlLEtBQUtnRSxPQUFMLENBQWF5QixjQUFyRixFQUFxRzlHLENBQUMsR0FBRyxDQUF6RyxFQUE0R3hDLENBQUMsR0FBR0QsQ0FBckgsRUFBd0hDLENBQUMsR0FBR1MsQ0FBNUgsRUFBK0hULENBQUMsSUFBSSxDQUFwSSxFQUF1STtBQUNuSSxjQUFJa0IsQ0FBQyxHQUFHcEIsQ0FBQyxDQUFDMkIsS0FBRixFQUFSO0FBQ0FQLFdBQUMsQ0FBQ3VELE9BQUYsQ0FBVSxDQUFWLEdBQWMsS0FBS29ELE9BQUwsQ0FBYW1HLFNBQWIsR0FBMEI5TSxDQUFDLEdBQUcsS0FBS3FJLFNBQUwsQ0FBZS9HLENBQWYsRUFBa0JmLEtBQWxCLEVBQTlCLEdBQTJEUCxDQUFDLENBQUNvRCxRQUFGLENBQVd0RSxDQUFYLENBQXpFLEVBQXdGSCxDQUFDLENBQUMyRyxXQUFGLENBQWMsS0FBSzRMLFdBQUwsQ0FBaUJsUixDQUFqQixDQUFkLENBQXhGLEVBQTZIc0IsQ0FBQyxJQUFJLENBQWxJO0FBQ0g7O0FBQ0QsWUFBTSxLQUFLMkgsTUFBTCxDQUFZc0UsU0FBWixHQUF3QixFQUF6QixFQUE4QmpQLENBQUMsQ0FBQ2dILFdBQUYsQ0FBYzNHLENBQWQsQ0FBOUIsRUFBZ0QsS0FBS2dJLE9BQUwsQ0FBYWdKLFdBQWxFLEVBQWdGO0FBQzVFLGNBQUkxUSxDQUFDLEdBQUcrRixRQUFRLENBQUNrRSxhQUFULENBQXVCLEdBQXZCLENBQVI7QUFDQ2pLLFdBQUMsQ0FBQ2tTLElBQUYsR0FBUyxHQUFWLEVBQ0tsUyxDQUFDLENBQUNrSyxTQUFGLEdBQWNsSixDQUFDLENBQUNtUixXQURyQixFQUVLblMsQ0FBQyxDQUFDc08sU0FBRixHQUFjLEtBQUs1RyxPQUFMLENBQWFNLFVBQWIsQ0FBd0JrSixLQUYzQyxFQUdJbFIsQ0FBQyxDQUFDOEosZ0JBQUYsQ0FBbUIsT0FBbkIsRUFBNEIsVUFBVXpLLENBQVYsRUFBYTtBQUNyQ0EsYUFBQyxDQUFDNE4sY0FBRixJQUFvQjdOLENBQUMsQ0FBQ2dULGNBQUYsRUFBcEIsRUFBd0MsY0FBYyxPQUFPaFQsQ0FBQyxDQUFDc0ksT0FBRixDQUFVZ0ssZ0JBQS9CLElBQW1EdFMsQ0FBQyxDQUFDc0ksT0FBRixDQUFVZ0ssZ0JBQVYsQ0FBMkI1UixJQUEzQixDQUFnQ1YsQ0FBaEMsQ0FBM0Y7QUFDSCxXQUZELENBSEosRUFNSUMsQ0FBQyxDQUNJMkcsYUFETCxDQUNtQixNQUFNaEYsQ0FBQyxDQUFDOE0sU0FBUixHQUFvQixhQUR2QyxFQUVLOUgsYUFGTCxDQUVtQixNQUFNaEYsQ0FBQyxDQUFDcVIsZUFGM0IsRUFHS2hNLFdBSEwsQ0FHaUJyRyxDQUhqQixDQU5KO0FBVUg7O0FBQ0QsWUFDSyxLQUFLZ0ssTUFBTCxDQUFZM0QsV0FBWixDQUF3QmhILENBQXhCLEdBQ0EsS0FBS3FJLE9BQUwsQ0FBYStGLFNBQWIsSUFBMEIsQ0FBQyxLQUFLL0YsT0FBTCxDQUFhNEssVUFBekMsSUFBd0QsS0FBS3RJLE1BQUwsQ0FBWTNELFdBQVosQ0FBd0IsS0FBS2tNLFlBQUwsRUFBeEIsQ0FEdkQsRUFFRCxLQUFLN0ssT0FBTCxDQUFhMkIsV0FBYixJQUE0QixLQUFLVyxNQUFMLENBQVkzRCxXQUFaLENBQXdCLEtBQUttTSxhQUFMLEVBQXhCLENBRjNCLEVBR0QsS0FBSzlLLE9BQUwsQ0FBYWlLLFlBSmpCLEVBS0U7QUFDRSxjQUFJLGNBQWMsT0FBTyxLQUFLYyxrQkFBOUIsRUFBa0QsTUFBTSxJQUFJM04sS0FBSixDQUFVLDRHQUFWLENBQU47QUFDbEQsZUFBSzJOLGtCQUFMLENBQXdCM1MsSUFBeEIsQ0FBNkIsSUFBN0IsRUFBbUMsSUFBbkM7QUFDSDs7QUFDRCxzQkFBYyxPQUFPLEtBQUs0SCxPQUFMLENBQWE2SixRQUFsQyxJQUE4QyxLQUFLN0osT0FBTCxDQUFhNkosUUFBYixDQUFzQnpSLElBQXRCLENBQTJCLElBQTNCLEVBQWlDLEtBQUtrSyxNQUF0QyxDQUE5QztBQUNILE9BcENELEVBcUNDNUssQ0FBQyxDQUFDeUIsU0FBRixDQUFZb1IsV0FBWixHQUEwQixVQUFVN1MsQ0FBVixFQUFhO0FBQ3BDLFlBQUlDLENBQUMsR0FBRyxJQUFSO0FBQUEsWUFDSUssQ0FBQyxHQUFHTixDQUFDLENBQUNrQyxLQUFGLEVBRFI7QUFBQSxZQUVJM0IsQ0FBQyxHQUFHLEtBQUssSUFBSXdCLElBQUosQ0FBU3pCLENBQUMsQ0FBQytELFdBQUYsRUFBVCxFQUEwQi9ELENBQUMsQ0FBQ2dFLFFBQUYsRUFBMUIsRUFBd0MsRUFBeEMsRUFBNENDLE9BQTVDLEVBRmI7QUFBQSxZQUdJdEIsQ0FBQyxHQUFHMEQsUUFBUSxDQUFDa0UsYUFBVCxDQUF1QixLQUF2QixDQUhSO0FBSUE1SCxTQUFDLENBQUM2SCxTQUFGLEdBQWNsSixDQUFDLENBQUM4TSxTQUFoQjtBQUNBLFlBQUlqTyxDQUFDLEdBQUdrRyxRQUFRLENBQUNrRSxhQUFULENBQXVCLEtBQXZCLENBQVI7QUFDQXBLLFNBQUMsQ0FBQ3FLLFNBQUYsR0FBY2xKLENBQUMsQ0FBQ3FSLGVBQWhCO0FBQ0EsWUFBSXRSLENBQUMsR0FBR2dGLFFBQVEsQ0FBQ2tFLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBUjs7QUFDQSxZQUFJLEtBQUt2QyxPQUFMLENBQWFLLFNBQWIsQ0FBdUI4SSxNQUEzQixFQUFtQztBQUMvQixjQUFJN1EsQ0FBQyxHQUFHK0YsUUFBUSxDQUFDa0UsYUFBVCxDQUF1QixRQUF2QixDQUFSO0FBQ0FqSyxXQUFDLENBQUNrSyxTQUFGLEdBQWNsSixDQUFDLENBQUMwUixhQUFoQjs7QUFDQSxlQUFLLElBQUluUSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLElBQUksQ0FBN0IsRUFBZ0M7QUFDNUIsZ0JBQUl0QyxDQUFDLEdBQUc4RixRQUFRLENBQUNrRSxhQUFULENBQXVCLFFBQXZCLENBQVI7QUFBQSxnQkFDSXpILENBQUMsR0FBRyxJQUFJNUMsQ0FBQyxDQUFDaUcsUUFBTixDQUFlLElBQUkxRSxJQUFKLENBQVMvQixDQUFDLENBQUNxRSxXQUFGLEVBQVQsRUFBMEJsQixDQUExQixFQUE2QixDQUE3QixFQUFnQyxDQUFoQyxFQUFtQyxDQUFuQyxFQUFzQyxDQUF0QyxDQUFmLENBRFI7QUFFQ3RDLGFBQUMsQ0FBQ1EsS0FBRixHQUFVa0YsTUFBTSxDQUFDcEQsQ0FBRCxDQUFqQixFQUNLdEMsQ0FBQyxDQUFDMFMsSUFBRixHQUFTblEsQ0FBQyxDQUFDcUIsY0FBRixDQUFpQixLQUFLNkQsT0FBTCxDQUFhdEcsSUFBOUIsRUFBb0M7QUFBRVksbUJBQUssRUFBRTtBQUFULGFBQXBDLENBRGQsRUFFSy9CLENBQUMsQ0FBQzJTLFFBQUYsR0FBYyxLQUFLbEwsT0FBTCxDQUFhd0ksT0FBYixJQUF3QjFOLENBQUMsQ0FBQ3FDLFFBQUYsQ0FBVyxJQUFJakYsQ0FBQyxDQUFDaUcsUUFBTixDQUFlLEtBQUs2QixPQUFMLENBQWF3SSxPQUE1QixDQUFYLEVBQWlELE9BQWpELENBQXpCLElBQXdGLEtBQUt4SSxPQUFMLENBQWF5SSxPQUFiLElBQXdCM04sQ0FBQyxDQUFDd0MsT0FBRixDQUFVLElBQUlwRixDQUFDLENBQUNpRyxRQUFOLENBQWUsS0FBSzZCLE9BQUwsQ0FBYXlJLE9BQTVCLENBQVYsRUFBZ0QsT0FBaEQsQ0FGbEksRUFHS2xRLENBQUMsQ0FBQzRTLFFBQUYsR0FBYXJRLENBQUMsQ0FBQ2tCLFFBQUYsT0FBaUJ0RSxDQUFDLENBQUNzRSxRQUFGLEVBSG5DLEVBSUkxRCxDQUFDLENBQUNxRyxXQUFGLENBQWNwRyxDQUFkLENBSko7QUFLSDs7QUFDREQsV0FBQyxDQUFDOEosZ0JBQUYsQ0FBbUIsUUFBbkIsRUFBNkIsVUFBVTFLLENBQVYsRUFBYTtBQUN0QyxnQkFBSU0sQ0FBQyxHQUFHTixDQUFDLENBQUN5TixNQUFWO0FBQUEsZ0JBQ0lsTixDQUFDLEdBQUcsQ0FEUjs7QUFFQSxnQkFBSU4sQ0FBQyxDQUFDcUksT0FBRixDQUFVbUcsU0FBZCxFQUF5QjtBQUNyQixrQkFBSWpPLENBQUMsR0FBR0YsQ0FBQyxDQUFDMk0sT0FBRixDQUFVLE1BQU1yTCxDQUFDLENBQUM4TSxTQUFsQixDQUFSO0FBQ0FuTyxlQUFDLEdBQUdXLENBQUMsQ0FBQ3VHLG1CQUFGLENBQXNCakgsQ0FBdEIsQ0FBSjtBQUNIOztBQUNEUCxhQUFDLENBQUMrSixTQUFGLENBQVl6SixDQUFaLEVBQWV3RSxRQUFmLENBQXdCekMsTUFBTSxDQUFDaEMsQ0FBQyxDQUFDZSxLQUFILENBQTlCLEdBQTBDcEIsQ0FBQyxDQUFDd0wsTUFBRixFQUExQyxFQUFzRCxjQUFjLE9BQU94TCxDQUFDLENBQUNxSSxPQUFGLENBQVVzRyxhQUEvQixJQUFnRDNPLENBQUMsQ0FBQ3FJLE9BQUYsQ0FBVXNHLGFBQVYsQ0FBd0JsTyxJQUF4QixDQUE2QlQsQ0FBN0IsRUFBZ0NBLENBQUMsQ0FBQytKLFNBQUYsQ0FBWXpKLENBQVosQ0FBaEMsRUFBZ0RBLENBQWhELENBQXRHO0FBQ0gsV0FSRCxHQVNJb0IsQ0FBQyxDQUFDc0YsV0FBRixDQUFjckcsQ0FBZCxDQVRKO0FBVUgsU0F0QkQsTUFzQk87QUFDSCxjQUFJRCxDQUFDLEdBQUdnRyxRQUFRLENBQUNrRSxhQUFULENBQXVCLFFBQXZCLENBQVI7QUFDQ2xLLFdBQUMsQ0FBQ21LLFNBQUYsR0FBY2xKLENBQUMsQ0FBQzBSLGFBQWpCLEVBQWtDM1MsQ0FBQyxDQUFDdU8sU0FBRixHQUFjbFAsQ0FBQyxDQUFDeUUsY0FBRixDQUFpQixLQUFLNkQsT0FBTCxDQUFhdEcsSUFBOUIsRUFBb0M7QUFBRVksaUJBQUssRUFBRTtBQUFULFdBQXBDLENBQWhELEVBQXlHakIsQ0FBQyxDQUFDc0YsV0FBRixDQUFjdEcsQ0FBZCxDQUF6RztBQUNIOztBQUNELFlBQUksS0FBSzJILE9BQUwsQ0FBYUssU0FBYixDQUF1QitJLEtBQTNCLEVBQWtDO0FBQzlCLGNBQUluTyxDQUFDLEdBQUdvRCxRQUFRLENBQUNrRSxhQUFULENBQXVCLFFBQXZCLENBQVI7QUFDQXRILFdBQUMsQ0FBQ3VILFNBQUYsR0FBY2xKLENBQUMsQ0FBQzhSLGFBQWhCO0FBQ0EsY0FBSWpRLENBQUMsR0FBRyxLQUFLNkUsT0FBTCxDQUFhSyxTQUFiLENBQXVCNEksT0FBL0I7QUFBQSxjQUNJNU4sQ0FBQyxHQUFHLEtBQUsyRSxPQUFMLENBQWFLLFNBQWIsQ0FBdUI2SSxPQUF2QixHQUFpQyxLQUFLbEosT0FBTCxDQUFhSyxTQUFiLENBQXVCNkksT0FBeEQsR0FBa0UsSUFBSXpQLElBQUosR0FBV3NDLFdBQVgsRUFEMUU7QUFFQSxjQUFJckUsQ0FBQyxDQUFDcUUsV0FBRixLQUFrQlYsQ0FBdEIsRUFBMEIsQ0FBQzlDLENBQUMsR0FBRzhGLFFBQVEsQ0FBQ2tFLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBTCxFQUF1Q3hKLEtBQXZDLEdBQStDa0YsTUFBTSxDQUFDdkcsQ0FBQyxDQUFDcUUsV0FBRixFQUFELENBQXRELEVBQTJFeEQsQ0FBQyxDQUFDMFMsSUFBRixHQUFTaE4sTUFBTSxDQUFDdkcsQ0FBQyxDQUFDcUUsV0FBRixFQUFELENBQTFGLEVBQStHeEQsQ0FBQyxDQUFDNFMsUUFBRixHQUFhLENBQUMsQ0FBN0gsRUFBa0k1UyxDQUFDLENBQUMyUyxRQUFGLEdBQWEsQ0FBQyxDQUFoSixFQUFvSmpRLENBQUMsQ0FBQzBELFdBQUYsQ0FBY3BHLENBQWQsQ0FBcEo7O0FBQ3pCLGVBQUtzQyxDQUFDLEdBQUdRLENBQVQsRUFBWVIsQ0FBQyxJQUFJTSxDQUFqQixFQUFvQk4sQ0FBQyxJQUFJLENBQXpCLEVBQTRCO0FBQ3hCLGdCQUFJdEMsQ0FBQyxHQUFHOEYsUUFBUSxDQUFDa0UsYUFBVCxDQUF1QixRQUF2QixDQUFSO0FBQUEsZ0JBQ0lqSCxDQUFDLEdBQUcsSUFBSXBELENBQUMsQ0FBQ2lHLFFBQU4sQ0FBZSxJQUFJMUUsSUFBSixDQUFTb0IsQ0FBVCxFQUFZLENBQVosRUFBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCLENBQWYsQ0FEUjtBQUVDdEMsYUFBQyxDQUFDUSxLQUFGLEdBQVU4QixDQUFYLEVBQ0t0QyxDQUFDLENBQUMwUyxJQUFGLEdBQVNwUSxDQURkLEVBRUt0QyxDQUFDLENBQUMyUyxRQUFGLEdBQWMsS0FBS2xMLE9BQUwsQ0FBYXdJLE9BQWIsSUFBd0JsTixDQUFDLENBQUM2QixRQUFGLENBQVcsSUFBSWpGLENBQUMsQ0FBQ2lHLFFBQU4sQ0FBZSxLQUFLNkIsT0FBTCxDQUFhd0ksT0FBNUIsQ0FBWCxFQUFpRCxNQUFqRCxDQUF6QixJQUF1RixLQUFLeEksT0FBTCxDQUFheUksT0FBYixJQUF3Qm5OLENBQUMsQ0FBQ2dDLE9BQUYsQ0FBVSxJQUFJcEYsQ0FBQyxDQUFDaUcsUUFBTixDQUFlLEtBQUs2QixPQUFMLENBQWF5SSxPQUE1QixDQUFWLEVBQWdELE1BQWhELENBRmpJLEVBR0tsUSxDQUFDLENBQUM0UyxRQUFGLEdBQWF6VCxDQUFDLENBQUNxRSxXQUFGLE9BQW9CbEIsQ0FIdEMsRUFJSUksQ0FBQyxDQUFDMEQsV0FBRixDQUFjcEcsQ0FBZCxDQUpKO0FBS0g7O0FBQ0QsY0FBSWIsQ0FBQyxDQUFDcUUsV0FBRixLQUFrQlosQ0FBdEIsRUFBMEIsQ0FBQzVDLENBQUMsR0FBRzhGLFFBQVEsQ0FBQ2tFLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBTCxFQUF1Q3hKLEtBQXZDLEdBQStDa0YsTUFBTSxDQUFDdkcsQ0FBQyxDQUFDcUUsV0FBRixFQUFELENBQXRELEVBQTJFeEQsQ0FBQyxDQUFDMFMsSUFBRixHQUFTaE4sTUFBTSxDQUFDdkcsQ0FBQyxDQUFDcUUsV0FBRixFQUFELENBQTFGLEVBQStHeEQsQ0FBQyxDQUFDNFMsUUFBRixHQUFhLENBQUMsQ0FBN0gsRUFBa0k1UyxDQUFDLENBQUMyUyxRQUFGLEdBQWEsQ0FBQyxDQUFoSixFQUFvSmpRLENBQUMsQ0FBQzBELFdBQUYsQ0FBY3BHLENBQWQsQ0FBcEo7O0FBQ3pCLGNBQUksVUFBVSxLQUFLeUgsT0FBTCxDQUFhSyxTQUFiLENBQXVCK0ksS0FBckMsRUFBNEM7QUFDeEMsZ0JBQUk3TixDQUFDLEdBQUdPLEtBQUssQ0FBQzNDLFNBQU4sQ0FBZ0IrRSxLQUFoQixDQUFzQjlGLElBQXRCLENBQTJCNkMsQ0FBQyxDQUFDb0UsVUFBN0IsRUFBeUNnTSxPQUF6QyxFQUFSO0FBQ0NwUSxhQUFDLENBQUMyTCxTQUFGLEdBQWMsRUFBZixFQUNJckwsQ0FBQyxDQUFDNkUsT0FBRixDQUFVLFVBQVUxSSxDQUFWLEVBQWE7QUFDbEJBLGVBQUMsQ0FBQ2tQLFNBQUYsR0FBY2xQLENBQUMsQ0FBQ3FCLEtBQWpCLEVBQXlCa0MsQ0FBQyxDQUFDMEQsV0FBRixDQUFjakgsQ0FBZCxDQUF6QjtBQUNILGFBRkQsQ0FESjtBQUlIOztBQUNEdUQsV0FBQyxDQUFDbUgsZ0JBQUYsQ0FBbUIsUUFBbkIsRUFBNkIsVUFBVTFLLENBQVYsRUFBYTtBQUN0QyxnQkFBSU0sQ0FBQyxHQUFHTixDQUFDLENBQUN5TixNQUFWO0FBQUEsZ0JBQ0lsTixDQUFDLEdBQUcsQ0FEUjs7QUFFQSxnQkFBSU4sQ0FBQyxDQUFDcUksT0FBRixDQUFVbUcsU0FBZCxFQUF5QjtBQUNyQixrQkFBSWpPLENBQUMsR0FBR0YsQ0FBQyxDQUFDMk0sT0FBRixDQUFVLE1BQU1yTCxDQUFDLENBQUM4TSxTQUFsQixDQUFSO0FBQ0FuTyxlQUFDLEdBQUdXLENBQUMsQ0FBQ3VHLG1CQUFGLENBQXNCakgsQ0FBdEIsQ0FBSjtBQUNIOztBQUNEUCxhQUFDLENBQUMrSixTQUFGLENBQVl6SixDQUFaLEVBQWU0RSxXQUFmLENBQTJCN0MsTUFBTSxDQUFDaEMsQ0FBQyxDQUFDZSxLQUFILENBQWpDLEdBQTZDcEIsQ0FBQyxDQUFDd0wsTUFBRixFQUE3QyxFQUF5RCxjQUFjLE9BQU94TCxDQUFDLENBQUNxSSxPQUFGLENBQVUrSixZQUEvQixJQUErQ3BTLENBQUMsQ0FBQ3FJLE9BQUYsQ0FBVStKLFlBQVYsQ0FBdUIzUixJQUF2QixDQUE0QlQsQ0FBNUIsRUFBK0JBLENBQUMsQ0FBQytKLFNBQUYsQ0FBWXpKLENBQVosQ0FBL0IsRUFBK0NBLENBQS9DLENBQXhHO0FBQ0gsV0FSRCxHQVNJb0IsQ0FBQyxDQUFDc0YsV0FBRixDQUFjMUQsQ0FBZCxDQVRKO0FBVUgsU0FqQ0QsTUFpQ087QUFDSCxjQUFJVSxDQUFDLEdBQUcwQyxRQUFRLENBQUNrRSxhQUFULENBQXVCLE1BQXZCLENBQVI7QUFDQzVHLFdBQUMsQ0FBQzZHLFNBQUYsR0FBY2xKLENBQUMsQ0FBQzhSLGFBQWpCLEVBQWtDelAsQ0FBQyxDQUFDaUwsU0FBRixHQUFjM0ksTUFBTSxDQUFDdkcsQ0FBQyxDQUFDcUUsV0FBRixFQUFELENBQXRELEVBQTBFMUMsQ0FBQyxDQUFDc0YsV0FBRixDQUFjaEQsQ0FBZCxDQUExRTtBQUNIOztBQUNELFlBQUkyUCxDQUFDLEdBQUdqTixRQUFRLENBQUNrRSxhQUFULENBQXVCLEdBQXZCLENBQVI7QUFDQytJLFNBQUMsQ0FBQ2QsSUFBRixHQUFTLEdBQVYsRUFBaUJjLENBQUMsQ0FBQzlJLFNBQUYsR0FBY2xKLENBQUMsQ0FBQzJNLG1CQUFqQyxFQUF3RHFGLENBQUMsQ0FBQzFFLFNBQUYsR0FBYyxLQUFLNUcsT0FBTCxDQUFhTSxVQUFiLENBQXdCZ0osYUFBOUY7QUFDQSxZQUFJaUMsQ0FBQyxHQUFHbE4sUUFBUSxDQUFDa0UsYUFBVCxDQUF1QixHQUF2QixDQUFSO0FBQ0NnSixTQUFDLENBQUNmLElBQUYsR0FBUyxHQUFWLEVBQ0tlLENBQUMsQ0FBQy9JLFNBQUYsR0FBY2xKLENBQUMsQ0FBQ2lOLGVBRHJCLEVBRUtnRixDQUFDLENBQUMzRSxTQUFGLEdBQWMsS0FBSzVHLE9BQUwsQ0FBYU0sVUFBYixDQUF3QmlKLFNBRjNDLEVBR0lwUixDQUFDLENBQUN3RyxXQUFGLENBQWMyTSxDQUFkLENBSEosRUFJSW5ULENBQUMsQ0FBQ3dHLFdBQUYsQ0FBY3RGLENBQWQsQ0FKSixFQUtJbEIsQ0FBQyxDQUFDd0csV0FBRixDQUFjNE0sQ0FBZCxDQUxKLEVBTUksS0FBS3ZMLE9BQUwsQ0FBYXdJLE9BQWIsSUFBd0J4USxDQUFDLENBQUNxRixjQUFGLENBQWlCLElBQUluRixDQUFDLENBQUNpRyxRQUFOLENBQWUsS0FBSzZCLE9BQUwsQ0FBYXdJLE9BQTVCLENBQWpCLEVBQXVELE9BQXZELENBQXhCLElBQTJGN04sQ0FBQyxDQUFDeUssU0FBRixDQUFZM0gsR0FBWixDQUFnQm5FLENBQUMsQ0FBQ2tTLGVBQWxCLENBTi9GLEVBT0ksS0FBS3hMLE9BQUwsQ0FBYXlJLE9BQWIsSUFBd0J6USxDQUFDLENBQUN1RixhQUFGLENBQWdCLElBQUlyRixDQUFDLENBQUNpRyxRQUFOLENBQWUsS0FBSzZCLE9BQUwsQ0FBYXlJLE9BQTVCLENBQWhCLEVBQXNELE9BQXRELENBQXhCLElBQTBGOU4sQ0FBQyxDQUFDeUssU0FBRixDQUFZM0gsR0FBWixDQUFnQm5FLENBQUMsQ0FBQ21TLFdBQWxCLENBUDlGO0FBUUEsWUFBSUMsQ0FBQyxHQUFHck4sUUFBUSxDQUFDa0UsYUFBVCxDQUF1QixLQUF2QixDQUFSO0FBQ0NtSixTQUFDLENBQUNsSixTQUFGLEdBQWNsSixDQUFDLENBQUNxUyxvQkFBakIsRUFBd0MsS0FBSzNMLE9BQUwsQ0FBYTZJLGVBQWIsS0FBaUM2QyxDQUFDLENBQUM5RSxTQUFGLEdBQWMsY0FBL0MsQ0FBeEM7O0FBQ0EsYUFBSyxJQUFJZ0YsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsSUFBSSxDQUFyQixFQUF3QkEsQ0FBQyxJQUFJLENBQTdCLEVBQWdDO0FBQzVCLGNBQUlDLENBQUMsR0FBRyxJQUFJLEtBQUs3TCxPQUFMLENBQWFzSSxRQUFqQixHQUE0QnNELENBQXBDO0FBQUEsY0FDSUUsQ0FBQyxHQUFHek4sUUFBUSxDQUFDa0UsYUFBVCxDQUF1QixLQUF2QixDQURSOztBQUVDdUosV0FBQyxDQUFDbEYsU0FBRixHQUFjLEtBQUttRixXQUFMLENBQWlCRixDQUFqQixDQUFmLEVBQXNDQyxDQUFDLENBQUNFLEtBQUYsR0FBVSxLQUFLRCxXQUFMLENBQWlCRixDQUFqQixFQUFvQixNQUFwQixDQUFoRCxFQUE4RUgsQ0FBQyxDQUFDL00sV0FBRixDQUFjbU4sQ0FBZCxDQUE5RTtBQUNIOztBQUNELFlBQUlHLENBQUMsR0FBRzVOLFFBQVEsQ0FBQ2tFLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBUjtBQUNBMEosU0FBQyxDQUFDekosU0FBRixHQUFjbEosQ0FBQyxDQUFDNFMsYUFBaEI7QUFDQSxZQUFJQyxDQUFDLEdBQUcsS0FBS0MsWUFBTCxDQUFrQnBVLENBQWxCLENBQVI7QUFDQSxhQUFLZ0ksT0FBTCxDQUFhNkksZUFBYixJQUFnQ3NELENBQWhDLElBQXFDRixDQUFDLENBQUN0TixXQUFGLENBQWMsS0FBSzBOLGdCQUFMLENBQXNCclUsQ0FBdEIsQ0FBZCxDQUFyQzs7QUFDQSxhQUFLLElBQUlzVSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSCxDQUFwQixFQUF1QkcsQ0FBQyxJQUFJLENBQTVCLEVBQStCO0FBQzNCLGNBQUlDLENBQUMsR0FBR2xPLFFBQVEsQ0FBQ2tFLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBUjtBQUNBMEosV0FBQyxDQUFDdE4sV0FBRixDQUFjNE4sQ0FBZDtBQUNIOztBQUNELGFBQUtELENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsSUFBSXJVLENBQWpCLEVBQW9CcVUsQ0FBQyxJQUFJLENBQXpCO0FBQTRCdFUsV0FBQyxDQUFDNEUsT0FBRixDQUFVMFAsQ0FBVixHQUFjLEtBQUt0TSxPQUFMLENBQWE2SSxlQUFiLElBQWdDN1EsQ0FBQyxDQUFDdUUsTUFBRixPQUFlLEtBQUt5RCxPQUFMLENBQWFzSSxRQUE1RCxJQUF3RTJELENBQUMsQ0FBQ3ROLFdBQUYsQ0FBYyxLQUFLME4sZ0JBQUwsQ0FBc0JyVSxDQUF0QixDQUFkLENBQXRGLEVBQStIaVUsQ0FBQyxDQUFDdE4sV0FBRixDQUFjLEtBQUsySSxTQUFMLENBQWV0UCxDQUFmLENBQWQsQ0FBL0g7QUFBNUI7O0FBQ0EsZUFBTzJDLENBQUMsQ0FBQ2dFLFdBQUYsQ0FBY3hHLENBQWQsR0FBa0J3QyxDQUFDLENBQUNnRSxXQUFGLENBQWMrTSxDQUFkLENBQWxCLEVBQW9DL1EsQ0FBQyxDQUFDZ0UsV0FBRixDQUFjc04sQ0FBZCxDQUFwQyxFQUFzRHRSLENBQTdEO0FBQ0gsT0F6SUQsRUEwSUNqRCxDQUFDLENBQUN5QixTQUFGLENBQVltTyxTQUFaLEdBQXdCLFVBQVU1UCxDQUFWLEVBQWE7QUFDbEMsWUFBSUMsQ0FBQyxHQUFHLElBQVI7QUFDQUQsU0FBQyxDQUFDZ0YsUUFBRjtBQUNBLFlBQUkxRSxDQUFDLEdBQUdxRyxRQUFRLENBQUNrRSxhQUFULENBQXVCLEdBQXZCLENBQVI7O0FBQ0EsWUFDTXZLLENBQUMsQ0FBQ3dTLElBQUYsR0FBUyxHQUFWLEVBQ0F4UyxDQUFDLENBQUN3SyxTQUFGLEdBQWNsSixDQUFDLENBQUNnTSxPQURoQixFQUVBdE4sQ0FBQyxDQUFDNE8sU0FBRixHQUFjM0ksTUFBTSxDQUFDdkcsQ0FBQyxDQUFDdUUsT0FBRixFQUFELENBRnBCLEVBR0FqRSxDQUFDLENBQUNrSSxPQUFGLENBQVV3RixJQUFWLEdBQWlCekgsTUFBTSxDQUFDdkcsQ0FBQyxDQUFDOEUsT0FBRixFQUFELENBSHZCLEVBSUQ5RSxDQUFDLENBQUMyRSxZQUFGLE9BQXFCLElBQUk1QyxJQUFKLEdBQVc0QyxZQUFYLEVBQXJCLElBQWtEckUsQ0FBQyxDQUFDb04sU0FBRixDQUFZM0gsR0FBWixDQUFnQm5FLENBQUMsQ0FBQ2tULE9BQWxCLENBSmpELEVBS0QsS0FBSzFILFVBQUwsQ0FBZ0IxSyxNQUFoQixJQUNPLEtBQUswSyxVQUFMLENBQWdCLENBQWhCLEVBQW1CekksWUFBbkIsT0FBc0MzRSxDQUFDLENBQUMyRSxZQUFGLEVBQXRDLEtBQTJEckUsQ0FBQyxDQUFDb04sU0FBRixDQUFZM0gsR0FBWixDQUFnQm5FLENBQUMsQ0FBQ21ULFdBQWxCLEdBQWdDLEtBQUt6TSxPQUFMLENBQWFzQixVQUFiLElBQTJCdEosQ0FBQyxDQUFDb04sU0FBRixDQUFZM0gsR0FBWixDQUFnQm5FLENBQUMsQ0FBQ2tPLFNBQWxCLENBQXRILEdBQ0QsTUFBTSxLQUFLMUMsVUFBTCxDQUFnQjFLLE1BQXRCLElBQWdDLEtBQUswSyxVQUFMLENBQWdCLENBQWhCLEVBQW1CekksWUFBbkIsT0FBc0MzRSxDQUFDLENBQUMyRSxZQUFGLEVBQXRFLElBQTBGckUsQ0FBQyxDQUFDb04sU0FBRixDQUFZM0gsR0FBWixDQUFnQm5FLENBQUMsQ0FBQ2tPLFNBQWxCLENBRHpGLEVBRUQsTUFBTSxLQUFLMUMsVUFBTCxDQUFnQjFLLE1BQXRCLElBQWdDMUMsQ0FBQyxDQUFDd0YsU0FBRixDQUFZLEtBQUs0SCxVQUFMLENBQWdCLENBQWhCLENBQVosRUFBZ0MsS0FBS0EsVUFBTCxDQUFnQixDQUFoQixDQUFoQyxDQUFoQyxJQUF1RjlNLENBQUMsQ0FBQ29OLFNBQUYsQ0FBWTNILEdBQVosQ0FBZ0JuRSxDQUFDLENBQUNpTyxTQUFsQixDQUg3RixJQUlNLEtBQUt2SCxPQUFMLENBQWFxQixTQUFiLEtBQ0MsS0FBS3JCLE9BQUwsQ0FBYXFCLFNBQWIsQ0FBdUJoRixZQUF2QixPQUEwQzNFLENBQUMsQ0FBQzJFLFlBQUYsRUFBMUMsS0FBK0RyRSxDQUFDLENBQUNvTixTQUFGLENBQVkzSCxHQUFaLENBQWdCbkUsQ0FBQyxDQUFDbVQsV0FBbEIsR0FBZ0MsS0FBS3pNLE9BQUwsQ0FBYXNCLFVBQWIsSUFBMkJ0SixDQUFDLENBQUNvTixTQUFGLENBQVkzSCxHQUFaLENBQWdCbkUsQ0FBQyxDQUFDa08sU0FBbEIsQ0FBMUgsR0FDRCxLQUFLeEgsT0FBTCxDQUFhdUIsT0FBYixJQUF3QixLQUFLdkIsT0FBTCxDQUFhdUIsT0FBYixDQUFxQmxGLFlBQXJCLE9BQXdDM0UsQ0FBQyxDQUFDMkUsWUFBRixFQUFoRSxJQUFvRnJFLENBQUMsQ0FBQ29OLFNBQUYsQ0FBWTNILEdBQVosQ0FBZ0JuRSxDQUFDLENBQUNrTyxTQUFsQixDQURuRixFQUVELEtBQUt4SCxPQUFMLENBQWFxQixTQUFiLElBQTBCLEtBQUtyQixPQUFMLENBQWF1QixPQUF2QyxJQUFrRDdKLENBQUMsQ0FBQ3dGLFNBQUYsQ0FBWSxLQUFLOEMsT0FBTCxDQUFhcUIsU0FBekIsRUFBb0MsS0FBS3JCLE9BQUwsQ0FBYXVCLE9BQWpELENBQWxELElBQStHdkosQ0FBQyxDQUFDb04sU0FBRixDQUFZM0gsR0FBWixDQUFnQm5FLENBQUMsQ0FBQ2lPLFNBQWxCLENBSC9HLENBVEwsRUFhRCxLQUFLdkgsT0FBTCxDQUFhd0ksT0FBYixJQUF3QjlRLENBQUMsQ0FBQ3lGLFFBQUYsQ0FBVyxJQUFJakYsQ0FBQyxDQUFDaUcsUUFBTixDQUFlLEtBQUs2QixPQUFMLENBQWF3SSxPQUE1QixDQUFYLENBQXhCLElBQTRFeFEsQ0FBQyxDQUFDb04sU0FBRixDQUFZM0gsR0FBWixDQUFnQm5FLENBQUMsQ0FBQ2tNLFFBQWxCLENBYjNFLEVBY0QsS0FBS3hGLE9BQUwsQ0FBYXlJLE9BQWIsSUFBd0IvUSxDQUFDLENBQUM0RixPQUFGLENBQVUsSUFBSXBGLENBQUMsQ0FBQ2lHLFFBQU4sQ0FBZSxLQUFLNkIsT0FBTCxDQUFheUksT0FBNUIsQ0FBVixDQUF4QixJQUEyRXpRLENBQUMsQ0FBQ29OLFNBQUYsQ0FBWTNILEdBQVosQ0FBZ0JuRSxDQUFDLENBQUNrTSxRQUFsQixDQWQxRSxFQWVELEtBQUt4RixPQUFMLENBQWEwSSxPQUFiLElBQXdCLE1BQU0sS0FBSzVELFVBQUwsQ0FBZ0IxSyxNQWhCbEQsRUFpQkU7QUFDRSxjQUFJbkMsQ0FBQyxHQUFHK0IsTUFBTSxDQUFDLENBQUMsS0FBS2dHLE9BQUwsQ0FBYWdCLFNBQWYsQ0FBZDtBQUFBLGNBQ0lwSSxDQUFDLEdBQUcsS0FBS2tNLFVBQUwsQ0FBZ0IsQ0FBaEIsRUFBbUJsTCxLQUFuQixHQUEyQjhELFFBQTNCLENBQW9DLEtBQUtzQyxPQUFMLENBQWEwSSxPQUFiLEdBQXVCelEsQ0FBM0QsRUFBOEQsS0FBOUQsQ0FEUjtBQUFBLGNBRUkwQyxDQUFDLEdBQUcsS0FBS21LLFVBQUwsQ0FBZ0IsQ0FBaEIsRUFBbUJsTCxLQUFuQixHQUEyQjZELEdBQTNCLENBQStCLEtBQUt1QyxPQUFMLENBQWEwSSxPQUFiLEdBQXVCelEsQ0FBdEQsRUFBeUQsS0FBekQsQ0FGUjtBQUdBUCxXQUFDLENBQUN3RixTQUFGLENBQVl0RSxDQUFaLEVBQWUsS0FBS2tNLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBZixFQUFtQyxJQUFuQyxLQUE0QzlNLENBQUMsQ0FBQ29OLFNBQUYsQ0FBWTNILEdBQVosQ0FBZ0JuRSxDQUFDLENBQUNrTSxRQUFsQixDQUE1QyxFQUF5RTlOLENBQUMsQ0FBQ3dGLFNBQUYsQ0FBWSxLQUFLNEgsVUFBTCxDQUFnQixDQUFoQixDQUFaLEVBQWdDbkssQ0FBaEMsRUFBbUMsSUFBbkMsS0FBNEMzQyxDQUFDLENBQUNvTixTQUFGLENBQVkzSCxHQUFaLENBQWdCbkUsQ0FBQyxDQUFDa00sUUFBbEIsQ0FBckg7QUFDSDs7QUFDRCxZQUFJLEtBQUt4RixPQUFMLENBQWEySSxPQUFiLElBQXdCLE1BQU0sS0FBSzdELFVBQUwsQ0FBZ0IxSyxNQUFsRCxFQUEwRDtBQUNyRG5DLFdBQUMsR0FBRytCLE1BQU0sQ0FBQyxLQUFLZ0csT0FBTCxDQUFhZ0IsU0FBZCxDQUFYLEVBQXVDcEksQ0FBQyxHQUFHLEtBQUtrTSxVQUFMLENBQWdCLENBQWhCLEVBQW1CbEwsS0FBbkIsR0FBMkI4RCxRQUEzQixDQUFvQyxLQUFLc0MsT0FBTCxDQUFhMkksT0FBYixHQUF1QjFRLENBQTNELEVBQThELEtBQTlELENBQTNDLEVBQW1IMEMsQ0FBQyxHQUFHLEtBQUttSyxVQUFMLENBQWdCLENBQWhCLEVBQW1CbEwsS0FBbkIsR0FBMkI2RCxHQUEzQixDQUErQixLQUFLdUMsT0FBTCxDQUFhMkksT0FBYixHQUF1QjFRLENBQXRELEVBQXlELEtBQXpELENBQXZIO0FBQ0FQLFdBQUMsQ0FBQzJGLGNBQUYsQ0FBaUJ6RSxDQUFqQixLQUF1QlosQ0FBQyxDQUFDb04sU0FBRixDQUFZM0gsR0FBWixDQUFnQm5FLENBQUMsQ0FBQ2tNLFFBQWxCLENBQXZCLEVBQW9EOU4sQ0FBQyxDQUFDNkYsYUFBRixDQUFnQjVDLENBQWhCLEtBQXNCM0MsQ0FBQyxDQUFDb04sU0FBRixDQUFZM0gsR0FBWixDQUFnQm5FLENBQUMsQ0FBQ2tNLFFBQWxCLENBQTFFO0FBQ0g7O0FBQ0QsU0FBQyxLQUFLeEYsT0FBTCxDQUFhbUIsYUFBYixJQUE4QixNQUFNLEtBQUsyRCxVQUFMLENBQWdCMUssTUFBcEQsSUFBOEQxQyxDQUFDLENBQUN5RixRQUFGLENBQVcsS0FBSzJILFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBWCxDQUE5RCxJQUFnRzlNLENBQUMsQ0FBQ29OLFNBQUYsQ0FBWTNILEdBQVosQ0FBZ0JuRSxDQUFDLENBQUNrTSxRQUFsQixDQUFoRyxFQUNELEtBQUt4RixPQUFMLENBQWE0SSxjQUFiLElBQStCLE1BQU0sS0FBSzlELFVBQUwsQ0FBZ0IxSyxNQUFyRCxJQUErRDFDLENBQUMsQ0FBQzRGLE9BQUYsQ0FBVSxLQUFLd0gsVUFBTCxDQUFnQixDQUFoQixDQUFWLENBQS9ELElBQWdHOU0sQ0FBQyxDQUFDb04sU0FBRixDQUFZM0gsR0FBWixDQUFnQm5FLENBQUMsQ0FBQ2tNLFFBQWxCLENBRC9GLEVBRUQsS0FBS3hGLE9BQUwsQ0FBYVUsUUFBYixDQUFzQnRHLE1BRnRCLEtBR0ksS0FBSzRGLE9BQUwsQ0FBYVUsUUFBYixDQUFzQmtGLE1BQXRCLENBQTZCLFVBQVU1TixDQUFWLEVBQWE7QUFDdEMsaUJBQU9BLENBQUMsWUFBWThELEtBQWIsR0FBcUJwRSxDQUFDLENBQUN3RixTQUFGLENBQVlsRixDQUFDLENBQUMsQ0FBRCxDQUFiLEVBQWtCQSxDQUFDLENBQUMsQ0FBRCxDQUFuQixFQUF3QkwsQ0FBQyxDQUFDcUksT0FBRixDQUFVMkYsbUJBQWxDLENBQXJCLEdBQThFM04sQ0FBQyxDQUFDd0YsTUFBRixDQUFTOUYsQ0FBVCxFQUFZLEtBQVosQ0FBckY7QUFDSCxTQUZELEVBRUcwQyxNQUxQLElBTUlwQyxDQUFDLENBQUNvTixTQUFGLENBQVkzSCxHQUFaLENBQWdCbkUsQ0FBQyxDQUFDa00sUUFBbEIsQ0FOSjtBQU9BLGFBQUt4RixPQUFMLENBQWFjLGVBQWIsQ0FBNkIxRyxNQUE3QixJQUNJLEtBQUs0RixPQUFMLENBQWFjLGVBQWIsQ0FBNkI4RSxNQUE3QixDQUFvQyxVQUFVak8sQ0FBVixFQUFhO0FBQzdDLGlCQUFPQSxDQUFDLFlBQVltRSxLQUFiLEdBQXFCcEUsQ0FBQyxDQUFDd0YsU0FBRixDQUFZdkYsQ0FBQyxDQUFDLENBQUQsQ0FBYixFQUFrQkEsQ0FBQyxDQUFDLENBQUQsQ0FBbkIsRUFBd0IsSUFBeEIsQ0FBckIsR0FBcURBLENBQUMsQ0FBQzZGLE1BQUYsQ0FBUzlGLENBQVQsRUFBWSxLQUFaLENBQTVEO0FBQ0gsU0FGRCxFQUVHMEMsTUFIUCxJQUlJcEMsQ0FBQyxDQUFDb04sU0FBRixDQUFZM0gsR0FBWixDQUFnQm5FLENBQUMsQ0FBQ29ULGFBQWxCLENBSko7O0FBS0EsWUFBSSxLQUFLNUgsVUFBTCxDQUFnQjFLLE1BQWhCLElBQTBCLENBQTFCLElBQStCLEtBQUs0RixPQUFMLENBQWFZLFVBQWIsQ0FBd0J4RyxNQUEzRCxFQUFtRTtBQUMvRCxjQUFJakMsQ0FBQyxHQUFHLEtBQUs2SCxPQUFMLENBQWFpQixxQkFBckI7QUFDQSxlQUFLakIsT0FBTCxDQUFhZ0IsU0FBYixJQUEwQixNQUFNLEtBQUs4RCxVQUFMLENBQWdCMUssTUFBaEQsS0FBMkRqQyxDQUFDLEdBQUcsSUFBL0Q7QUFDQSxjQUFJa0IsQ0FBQyxHQUFHM0IsQ0FBQyxDQUFDa0MsS0FBRixFQUFSO0FBQ0FQLFdBQUMsQ0FBQ3FFLFFBQUYsQ0FBVyxDQUFYLEVBQWMsS0FBZCxHQUFzQmhHLENBQUMsQ0FBQ2tDLEtBQUYsR0FBVTZELEdBQVYsQ0FBYyxDQUFkLEVBQWlCLEtBQWpCLENBQXRCO0FBQ0EsY0FBSW5GLENBQUMsR0FBRyxLQUFLcVUsWUFBTCxDQUFrQmpWLENBQWxCLEVBQXFCUyxDQUFyQixDQUFSO0FBQUEsY0FDSTBDLENBQUMsR0FBRyxLQUFLOFIsWUFBTCxDQUFrQnRULENBQWxCLEVBQXFCLElBQXJCLENBRFI7QUFBQSxjQUVJZCxDQUFDLEdBQUcsS0FBS29VLFlBQUwsQ0FBa0JqVixDQUFsQixFQUFxQixJQUFyQixDQUZSO0FBQUEsY0FHSW9ELENBQUMsR0FBSSxNQUFNLEtBQUtnSyxVQUFMLENBQWdCMUssTUFBdEIsSUFBZ0M5QixDQUFqQyxJQUF3QyxNQUFNLEtBQUt3TSxVQUFMLENBQWdCMUssTUFBdEIsSUFBZ0NTLENBQWhDLElBQXFDdkMsQ0FBN0UsSUFBb0YsTUFBTSxLQUFLd00sVUFBTCxDQUFnQjFLLE1BQXRCLElBQWdDUyxDQUFoQyxJQUFxQ3RDLENBSGpJO0FBQUEsY0FJSUYsQ0FBQyxHQUFHLEtBQUsySCxPQUFMLENBQWE4Rix1QkFBYixJQUF3QyxNQUFNLEtBQUtoQixVQUFMLENBQWdCMUssTUFKdEU7QUFLQVUsV0FBQyxJQUFJLENBQUN6QyxDQUFOLElBQVdMLENBQUMsQ0FBQ29OLFNBQUYsQ0FBWTNILEdBQVosQ0FBZ0JuRSxDQUFDLENBQUNtTSxRQUFsQixDQUFYO0FBQ0g7O0FBQ0QsZUFBTyxDQUFDLEtBQUt6RixPQUFMLENBQWE4SSxlQUFkLElBQWtDLE1BQU1wUixDQUFDLENBQUM2RSxNQUFGLEVBQU4sSUFBb0IsTUFBTTdFLENBQUMsQ0FBQzZFLE1BQUYsRUFBNUQsSUFBMkV2RSxDQUFDLENBQUNvTixTQUFGLENBQVkzSCxHQUFaLENBQWdCbkUsQ0FBQyxDQUFDa00sUUFBbEIsQ0FBM0UsRUFBd0csY0FBYyxPQUFPLEtBQUt4RixPQUFMLENBQWE4SixXQUFsQyxJQUFpRCxLQUFLOUosT0FBTCxDQUFhOEosV0FBYixDQUF5QjFSLElBQXpCLENBQThCLElBQTlCLEVBQW9DSixDQUFwQyxDQUF6SixFQUFpTUEsQ0FBeE07QUFDSCxPQWxNRCxFQW1NQ04sQ0FBQyxDQUFDeUIsU0FBRixDQUFZMFIsWUFBWixHQUEyQixZQUFZO0FBQ3BDLFlBQUluVCxDQUFDLEdBQUcyRyxRQUFRLENBQUNrRSxhQUFULENBQXVCLEtBQXZCLENBQVI7O0FBQ0EsWUFDTTdLLENBQUMsQ0FBQzhLLFNBQUYsR0FBY2xKLENBQUMsQ0FBQ3NULGVBQWpCLEVBQ0QsS0FBSzVNLE9BQUwsQ0FBYTRLLFVBQWIsR0FDT2xULENBQUMsQ0FBQ2tQLFNBQUYsR0FBYyxLQUFLNUcsT0FBTCxDQUFhNEssVUFEbEMsR0FFT2xULENBQUMsQ0FBQ2tQLFNBQUYsR0FDRywwQkFDQXROLENBQUMsQ0FBQ3VULGdCQURGLEdBRUEsZ0RBRkEsR0FHQXZULENBQUMsQ0FBQ2tOLFlBSEYsR0FJQSxJQUpBLEdBS0EsS0FBS3hHLE9BQUwsQ0FBYU0sVUFBYixDQUF3QitJLE1BTHhCLEdBTUEsZ0RBTkEsR0FPQS9QLENBQUMsQ0FBQ21OLFdBUEYsR0FRQSxJQVJBLEdBU0EsS0FBS3pHLE9BQUwsQ0FBYU0sVUFBYixDQUF3QlIsS0FUeEIsR0FVQSxtQkFkVCxFQWVELEtBQUtFLE9BQUwsQ0FBYXNCLFVBaEJqQixFQWlCRTtBQUNFLGNBQUksTUFBTSxLQUFLd0QsVUFBTCxDQUFnQjFLLE1BQTFCLEVBQWtDO0FBQzlCLGdCQUFJekMsQ0FBQyxHQUFHLEtBQUttTixVQUFMLENBQWdCLENBQWhCLEVBQW1CakgsTUFBbkIsQ0FBMEIsS0FBS21DLE9BQUwsQ0FBYW5DLE1BQXZDLEVBQStDLEtBQUttQyxPQUFMLENBQWF0RyxJQUE1RCxDQUFSO0FBQ0FoQyxhQUFDLENBQUM0RyxhQUFGLENBQWdCLE1BQU1oRixDQUFDLENBQUN1VCxnQkFBeEIsRUFBMENqRyxTQUExQyxHQUFzRGpQLENBQXREO0FBQ0g7QUFDSixTQXRCRCxNQXNCTyxJQUFLLE1BQU0sS0FBS21OLFVBQUwsQ0FBZ0IxSyxNQUF0QixJQUFnQzFDLENBQUMsQ0FBQzRHLGFBQUYsQ0FBZ0IsTUFBTWhGLENBQUMsQ0FBQ21OLFdBQXhCLEVBQXFDcUcsWUFBckMsQ0FBa0QsVUFBbEQsRUFBOEQsRUFBOUQsQ0FBaEMsRUFBbUcsTUFBTSxLQUFLaEksVUFBTCxDQUFnQjFLLE1BQTlILEVBQXVJO0FBQzFJekMsV0FBQyxHQUFHLEtBQUttTixVQUFMLENBQWdCLENBQWhCLEVBQW1CakgsTUFBbkIsQ0FBMEIsS0FBS21DLE9BQUwsQ0FBYW5DLE1BQXZDLEVBQStDLEtBQUttQyxPQUFMLENBQWF0RyxJQUE1RCxDQUFKO0FBQ0EsY0FBSTFCLENBQUMsR0FBRyxLQUFLOE0sVUFBTCxDQUFnQixDQUFoQixFQUFtQmpILE1BQW5CLENBQTBCLEtBQUttQyxPQUFMLENBQWFuQyxNQUF2QyxFQUErQyxLQUFLbUMsT0FBTCxDQUFhdEcsSUFBNUQsQ0FBUjtBQUNBaEMsV0FBQyxDQUFDNEcsYUFBRixDQUFnQixNQUFNaEYsQ0FBQyxDQUFDdVQsZ0JBQXhCLEVBQTBDakcsU0FBMUMsR0FBc0QsS0FBS2pQLENBQUwsR0FBUyxLQUFLcUksT0FBTCxDQUFhd0UsU0FBdEIsR0FBa0N4TSxDQUF4RjtBQUNIOztBQUNELGVBQU9OLENBQVA7QUFDSCxPQWpPRCxFQWtPQ0EsQ0FBQyxDQUFDeUIsU0FBRixDQUFZa1QsZ0JBQVosR0FBK0IsVUFBVTNVLENBQVYsRUFBYTtBQUN6QyxZQUFJQyxDQUFDLEdBQUcwRyxRQUFRLENBQUNrRSxhQUFULENBQXVCLEtBQXZCLENBQVI7QUFBQSxZQUNJdkssQ0FBQyxHQUFHTixDQUFDLENBQUNvRixPQUFGLENBQVUsS0FBS2tELE9BQUwsQ0FBYXNJLFFBQXZCLENBRFI7QUFFQSxlQUFRM1EsQ0FBQyxDQUFDNkssU0FBRixHQUFjbEosQ0FBQyxDQUFDeVQsVUFBakIsRUFBK0JwVixDQUFDLENBQUNpUCxTQUFGLEdBQWMsT0FBTzVPLENBQVAsSUFBWSxNQUFNTixDQUFDLENBQUNzRSxRQUFGLEVBQWxCLEdBQWlDLFFBQWpDLEdBQTRDaEUsQ0FBekYsRUFBNkZMLENBQXBHO0FBQ0gsT0F0T0QsRUF1T0NELENBQUMsQ0FBQ3lCLFNBQUYsQ0FBWTJSLGFBQVosR0FBNEIsWUFBWTtBQUNyQyxZQUFJcFQsQ0FBQyxHQUFHMkcsUUFBUSxDQUFDa0UsYUFBVCxDQUF1QixLQUF2QixDQUFSO0FBQ0EsZUFBUTdLLENBQUMsQ0FBQzhLLFNBQUYsR0FBY2xKLENBQUMsQ0FBQ29OLGdCQUFqQixFQUFvQ2hQLENBQTNDO0FBQ0gsT0ExT0QsRUEyT0NBLENBQUMsQ0FBQ3lCLFNBQUYsQ0FBWXdULFlBQVosR0FBMkIsVUFBVWpWLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUN4QyxlQUFPLEtBQUtxSSxPQUFMLENBQWFZLFVBQWIsQ0FBd0JnRixNQUF4QixDQUErQixVQUFVNU4sQ0FBVixFQUFhO0FBQy9DLGlCQUFPQSxDQUFDLFlBQVk4RCxLQUFiLEdBQXFCcEUsQ0FBQyxDQUFDd0YsU0FBRixDQUFZbEYsQ0FBQyxDQUFDLENBQUQsQ0FBYixFQUFrQkEsQ0FBQyxDQUFDLENBQUQsQ0FBbkIsRUFBd0JMLENBQXhCLENBQXJCLEdBQWtESyxDQUFDLENBQUN3RixNQUFGLENBQVM5RixDQUFULEVBQVksS0FBWixDQUF6RDtBQUNILFNBRk0sRUFFSjBDLE1BRkg7QUFHSCxPQS9PRCxFQWdQQzFDLENBQUMsQ0FBQ3lCLFNBQUYsQ0FBWTRTLFdBQVosR0FBMEIsVUFBVXJVLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUN2QyxlQUFPLEtBQUssQ0FBTCxLQUFXQSxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsT0FBckIsR0FBK0IsSUFBSThCLElBQUosQ0FBUyxJQUFULEVBQWUsQ0FBZixFQUFrQi9CLENBQWxCLEVBQXFCLEVBQXJCLEVBQXlCLENBQXpCLEVBQTRCLENBQTVCLEVBQStCLENBQS9CLEVBQWtDeUUsY0FBbEMsQ0FBaUQsS0FBSzZELE9BQUwsQ0FBYXRHLElBQTlELEVBQW9FO0FBQUVzVCxpQkFBTyxFQUFFclY7QUFBWCxTQUFwRSxDQUF0QztBQUNILE9BbFBELEVBbVBDRCxDQUFDLENBQUN5QixTQUFGLENBQVlpVCxZQUFaLEdBQTJCLFVBQVUxVSxDQUFWLEVBQWE7QUFDckMsWUFBSUMsQ0FBQyxHQUFHRCxDQUFDLENBQUM2RSxNQUFGLEtBQWEsS0FBS3lELE9BQUwsQ0FBYXNJLFFBQWxDO0FBQ0EsZUFBTzNRLENBQUMsR0FBRyxDQUFKLEtBQVVBLENBQUMsSUFBSSxDQUFmLEdBQW1CQSxDQUExQjtBQUNILE9BdFBELEVBdVBBRCxDQXhQSjtBQTBQSCxLQXBVRyxFQUhSOztBQXdVQUMsS0FBQyxDQUFDeVEsUUFBRixHQUFhek4sQ0FBYjtBQUNILEdBbm5DRixFQW9uQ0MsVUFBVWpELENBQVYsRUFBYUMsQ0FBYixFQUFnQkssQ0FBaEIsRUFBbUI7QUFDZixLQUFDTCxDQUFDLEdBQUdELENBQUMsQ0FBQ0UsT0FBRixHQUFZSSxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUssQ0FBQyxDQUFOLENBQWpCLEVBQTJCbUMsSUFBM0IsQ0FBZ0MsQ0FDNUJ6QyxDQUFDLENBQUNNLENBRDBCLEVBRTVCLHV1VEFGNEIsRUFHNUIsRUFINEIsQ0FBaEMsR0FLS0wsQ0FBQyxDQUFDbUgsTUFBRixHQUFXO0FBQ1IrSixxQkFBZSxFQUFFLG1CQURUO0FBRVJwRyxnQkFBVSxFQUFFLFlBRko7QUFHUnlILG1CQUFhLEVBQUUsaUJBSFA7QUFJUkMscUJBQWUsRUFBRSxtQkFKVDtBQUtSQyxjQUFRLEVBQUUsV0FMRjtBQU1SQyxjQUFRLEVBQUUsV0FORjtBQU9SQyxjQUFRLEVBQUUsV0FQRjtBQVFSbkUsZUFBUyxFQUFFLFlBUkg7QUFTUndFLHFCQUFlLEVBQUUsbUJBVFQ7QUFVUjFFLHlCQUFtQixFQUFFLHVCQVZiO0FBV1JNLHFCQUFlLEVBQUUsbUJBWFQ7QUFZUkgsZUFBUyxFQUFFLFlBWkg7QUFhUjRFLG1CQUFhLEVBQUUsaUJBYlA7QUFjUkksbUJBQWEsRUFBRSxpQkFkUDtBQWVSWCxpQkFBVyxFQUFFLGNBZkw7QUFnQlJrQiwwQkFBb0IsRUFBRSx5QkFoQmQ7QUFpQlJILHFCQUFlLEVBQUUsbUJBakJUO0FBa0JSQyxpQkFBVyxFQUFFLGVBbEJMO0FBbUJSUyxtQkFBYSxFQUFFLGlCQW5CUDtBQW9CUjVHLGFBQU8sRUFBRSxVQXBCRDtBQXFCUmtILGFBQU8sRUFBRSxVQXJCRDtBQXNCUmhILGNBQVEsRUFBRSxXQXRCRjtBQXVCUkMsY0FBUSxFQUFFLFdBdkJGO0FBd0JSOEIsZUFBUyxFQUFFLGFBeEJIO0FBeUJSa0YsaUJBQVcsRUFBRSxlQXpCTDtBQTBCUmhGLGVBQVMsRUFBRSxZQTFCSDtBQTJCUkQsZUFBUyxFQUFFLGFBM0JIO0FBNEJSa0YsbUJBQWEsRUFBRSxnQkE1QlA7QUE2QlJLLGdCQUFVLEVBQUUsYUE3Qko7QUE4QlJILHFCQUFlLEVBQUUsbUJBOUJUO0FBK0JSQyxzQkFBZ0IsRUFBRSxvQkEvQlY7QUFnQ1JyRyxrQkFBWSxFQUFFLGVBaENOO0FBaUNSQyxpQkFBVyxFQUFFLGNBakNMO0FBa0NSQyxzQkFBZ0IsRUFBRSxvQkFsQ1Y7QUFtQ1J1RyxvQkFBYyxFQUFFLGlCQW5DUjtBQW9DUnZKLHdCQUFrQixFQUFFO0FBcENaLEtBTGhCO0FBMkNILEdBaHFDRixFQWlxQ0MsVUFBVWhNLENBQVYsRUFBYUMsQ0FBYixFQUFnQkssQ0FBaEIsRUFBbUI7QUFDZjs7QUFDQU4sS0FBQyxDQUFDRSxPQUFGLEdBQVksVUFBVUYsQ0FBVixFQUFhO0FBQ3JCLFVBQUlDLENBQUMsR0FBRyxFQUFSO0FBQ0EsYUFDS0EsQ0FBQyxDQUFDd1AsUUFBRixHQUFhLFlBQVk7QUFDdEIsZUFBTyxLQUFLdEwsR0FBTCxDQUFTLFVBQVVsRSxDQUFWLEVBQWE7QUFDekIsY0FBSUssQ0FBQyxHQUFJLFVBQVVOLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUNyQixnQkFBSUssQ0FBQyxHQUFHTixDQUFDLENBQUMsQ0FBRCxDQUFELElBQVEsRUFBaEI7QUFBQSxnQkFDSU8sQ0FBQyxHQUFHUCxDQUFDLENBQUMsQ0FBRCxDQURUO0FBRUEsZ0JBQUksQ0FBQ08sQ0FBTCxFQUFRLE9BQU9ELENBQVA7O0FBQ1IsZ0JBQUlMLENBQUMsSUFBSSxjQUFjLE9BQU91VixJQUE5QixFQUFvQztBQUNoQyxrQkFBSWhWLENBQUMsSUFBS1UsQ0FBQyxHQUFHWCxDQUFMLEVBQVUwQyxDQUFDLEdBQUd1UyxJQUFJLENBQUNDLFFBQVEsQ0FBQ0Msa0JBQWtCLENBQUNDLElBQUksQ0FBQ0MsU0FBTCxDQUFlMVUsQ0FBZixDQUFELENBQW5CLENBQVQsQ0FBbEIsRUFBdUVULENBQUMsR0FBRywrREFBK0RvVixNQUEvRCxDQUFzRTVTLENBQXRFLENBQTNFLEVBQXNKLE9BQU80UyxNQUFQLENBQWNwVixDQUFkLEVBQWlCLEtBQWpCLENBQTFKLENBQUw7QUFBQSxrQkFDSW1CLENBQUMsR0FBR3JCLENBQUMsQ0FBQ3VWLE9BQUYsQ0FBVTNSLEdBQVYsQ0FBYyxVQUFVbkUsQ0FBVixFQUFhO0FBQzNCLHVCQUFPLGlCQUFpQjZWLE1BQWpCLENBQXdCdFYsQ0FBQyxDQUFDd1YsVUFBMUIsRUFBc0NGLE1BQXRDLENBQTZDN1YsQ0FBN0MsRUFBZ0QsS0FBaEQsQ0FBUDtBQUNILGVBRkcsQ0FEUjtBQUlBLHFCQUFPLENBQUNNLENBQUQsRUFBSXVWLE1BQUosQ0FBV2pVLENBQVgsRUFBY2lVLE1BQWQsQ0FBcUIsQ0FBQ3JWLENBQUQsQ0FBckIsRUFBMEJrRSxJQUExQixDQUErQixJQUEvQixDQUFQO0FBQ0g7O0FBQ0QsZ0JBQUl4RCxDQUFKLEVBQU8rQixDQUFQLEVBQVV4QyxDQUFWO0FBQ0EsbUJBQU8sQ0FBQ0gsQ0FBRCxFQUFJb0UsSUFBSixDQUFTLElBQVQsQ0FBUDtBQUNILFdBYk8sQ0FhTHpFLENBYkssRUFhRkQsQ0FiRSxDQUFSOztBQWNBLGlCQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU8sVUFBVTRWLE1BQVYsQ0FBaUI1VixDQUFDLENBQUMsQ0FBRCxDQUFsQixFQUF1QixHQUF2QixFQUE0QjRWLE1BQTVCLENBQW1DdlYsQ0FBbkMsRUFBc0MsR0FBdEMsQ0FBUCxHQUFvREEsQ0FBM0Q7QUFDSCxTQWhCTSxFQWdCSm9FLElBaEJJLENBZ0JDLEVBaEJELENBQVA7QUFpQkgsT0FsQkQsRUFtQkN6RSxDQUFDLENBQUNLLENBQUYsR0FBTSxVQUFVTixDQUFWLEVBQWFNLENBQWIsRUFBZ0I7QUFDbkIsb0JBQVksT0FBT04sQ0FBbkIsS0FBeUJBLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBRCxFQUFPQSxDQUFQLEVBQVUsRUFBVixDQUFELENBQTdCOztBQUNBLGFBQUssSUFBSU8sQ0FBQyxHQUFHLEVBQVIsRUFBWUMsQ0FBQyxHQUFHLENBQXJCLEVBQXdCQSxDQUFDLEdBQUcsS0FBS2tDLE1BQWpDLEVBQXlDbEMsQ0FBQyxFQUExQyxFQUE4QztBQUMxQyxjQUFJb0IsQ0FBQyxHQUFHLEtBQUtwQixDQUFMLEVBQVEsQ0FBUixDQUFSO0FBQ0Esa0JBQVFvQixDQUFSLEtBQWNyQixDQUFDLENBQUNxQixDQUFELENBQUQsR0FBTyxDQUFDLENBQXRCO0FBQ0g7O0FBQ0QsYUFBSyxJQUFJVixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHbEIsQ0FBQyxDQUFDMEMsTUFBdEIsRUFBOEJ4QixDQUFDLEVBQS9CLEVBQW1DO0FBQy9CLGNBQUkrQixDQUFDLEdBQUdqRCxDQUFDLENBQUNrQixDQUFELENBQVQ7QUFDQyxrQkFBUStCLENBQUMsQ0FBQyxDQUFELENBQVQsSUFBZ0IxQyxDQUFDLENBQUMwQyxDQUFDLENBQUMsQ0FBRCxDQUFGLENBQWxCLEtBQThCM0MsQ0FBQyxJQUFJLENBQUMyQyxDQUFDLENBQUMsQ0FBRCxDQUFQLEdBQWNBLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBTzNDLENBQXJCLEdBQTBCQSxDQUFDLEtBQUsyQyxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU8sSUFBSTRTLE1BQUosQ0FBVzVTLENBQUMsQ0FBQyxDQUFELENBQVosRUFBaUIsU0FBakIsRUFBNEI0UyxNQUE1QixDQUFtQ3ZWLENBQW5DLEVBQXNDLEdBQXRDLENBQVosQ0FBM0IsRUFBb0ZMLENBQUMsQ0FBQ3dDLElBQUYsQ0FBT1EsQ0FBUCxDQUFsSDtBQUNIO0FBQ0osT0E3QkQsRUE4QkFoRCxDQS9CSjtBQWlDSCxLQW5DRDtBQW9DSCxHQXZzQ0YsRUF3c0NDLFVBQVVELENBQVYsRUFBYUMsQ0FBYixFQUFnQkssQ0FBaEIsRUFBbUI7QUFDZjs7QUFDQSxRQUFJQyxDQUFKO0FBQUEsUUFDSUMsQ0FBQyxHQUFHLEVBRFI7QUFBQSxRQUVJb0IsQ0FBQyxHQUFHLFNBQUpBLENBQUksR0FBWTtBQUNaLGFBQU8sS0FBSyxDQUFMLEtBQVdyQixDQUFYLEtBQWlCQSxDQUFDLEdBQUd5VixPQUFPLENBQUMzVixNQUFNLElBQUlzRyxRQUFWLElBQXNCQSxRQUFRLENBQUNzUCxHQUEvQixJQUFzQyxDQUFDNVYsTUFBTSxDQUFDNlYsSUFBL0MsQ0FBNUIsR0FBbUYzVixDQUExRjtBQUNILEtBSkw7QUFBQSxRQUtJVyxDQUFDLEdBQUksWUFBWTtBQUNiLFVBQUlsQixDQUFDLEdBQUcsRUFBUjtBQUNBLGFBQU8sVUFBVUMsQ0FBVixFQUFhO0FBQ2hCLFlBQUksS0FBSyxDQUFMLEtBQVdELENBQUMsQ0FBQ0MsQ0FBRCxDQUFoQixFQUFxQjtBQUNqQixjQUFJSyxDQUFDLEdBQUdxRyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIzRyxDQUF2QixDQUFSO0FBQ0EsY0FBSUksTUFBTSxDQUFDOFYsaUJBQVAsSUFBNEI3VixDQUFDLFlBQVlELE1BQU0sQ0FBQzhWLGlCQUFwRCxFQUNJLElBQUk7QUFDQTdWLGFBQUMsR0FBR0EsQ0FBQyxDQUFDOFYsZUFBRixDQUFrQkMsSUFBdEI7QUFDSCxXQUZELENBRUUsT0FBT3JXLENBQVAsRUFBVTtBQUNSTSxhQUFDLEdBQUcsSUFBSjtBQUNIO0FBQ0xOLFdBQUMsQ0FBQ0MsQ0FBRCxDQUFELEdBQU9LLENBQVA7QUFDSDs7QUFDRCxlQUFPTixDQUFDLENBQUNDLENBQUQsQ0FBUjtBQUNILE9BWkQ7QUFhSCxLQWZHLEVBTFI7O0FBcUJBLGFBQVNnRCxDQUFULENBQVdqRCxDQUFYLEVBQWNDLENBQWQsRUFBaUI7QUFDYixXQUFLLElBQUlLLENBQUMsR0FBRyxFQUFSLEVBQVlDLENBQUMsR0FBRyxFQUFoQixFQUFvQkMsQ0FBQyxHQUFHLENBQTdCLEVBQWdDQSxDQUFDLEdBQUdSLENBQUMsQ0FBQzBDLE1BQXRDLEVBQThDbEMsQ0FBQyxFQUEvQyxFQUFtRDtBQUMvQyxZQUFJb0IsQ0FBQyxHQUFHNUIsQ0FBQyxDQUFDUSxDQUFELENBQVQ7QUFBQSxZQUNJVSxDQUFDLEdBQUdqQixDQUFDLENBQUNxVyxJQUFGLEdBQVMxVSxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU8zQixDQUFDLENBQUNxVyxJQUFsQixHQUF5QjFVLENBQUMsQ0FBQyxDQUFELENBRGxDO0FBQUEsWUFFSXFCLENBQUMsR0FBRztBQUFFc1QsYUFBRyxFQUFFM1UsQ0FBQyxDQUFDLENBQUQsQ0FBUjtBQUFhNFUsZUFBSyxFQUFFNVUsQ0FBQyxDQUFDLENBQUQsQ0FBckI7QUFBMEI2VSxtQkFBUyxFQUFFN1UsQ0FBQyxDQUFDLENBQUQ7QUFBdEMsU0FGUjtBQUdBckIsU0FBQyxDQUFDVyxDQUFELENBQUQsR0FBT1gsQ0FBQyxDQUFDVyxDQUFELENBQUQsQ0FBS3dWLEtBQUwsQ0FBV2pVLElBQVgsQ0FBZ0JRLENBQWhCLENBQVAsR0FBNEIzQyxDQUFDLENBQUNtQyxJQUFGLENBQVFsQyxDQUFDLENBQUNXLENBQUQsQ0FBRCxHQUFPO0FBQUV5VixZQUFFLEVBQUV6VixDQUFOO0FBQVN3VixlQUFLLEVBQUUsQ0FBQ3pULENBQUQ7QUFBaEIsU0FBZixDQUE1QjtBQUNIOztBQUNELGFBQU8zQyxDQUFQO0FBQ0g7O0FBQ0QsYUFBU0csQ0FBVCxDQUFXVCxDQUFYLEVBQWNDLENBQWQsRUFBaUI7QUFDYixXQUFLLElBQUlLLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdOLENBQUMsQ0FBQzBDLE1BQXRCLEVBQThCcEMsQ0FBQyxFQUEvQixFQUFtQztBQUMvQixZQUFJQyxDQUFDLEdBQUdQLENBQUMsQ0FBQ00sQ0FBRCxDQUFUO0FBQUEsWUFDSXNCLENBQUMsR0FBR3BCLENBQUMsQ0FBQ0QsQ0FBQyxDQUFDb1csRUFBSCxDQURUO0FBQUEsWUFFSXpWLENBQUMsR0FBRyxDQUZSOztBQUdBLFlBQUlVLENBQUosRUFBTztBQUNILGVBQUtBLENBQUMsQ0FBQ2dWLElBQUYsRUFBTCxFQUFlMVYsQ0FBQyxHQUFHVSxDQUFDLENBQUM4VSxLQUFGLENBQVFoVSxNQUEzQixFQUFtQ3hCLENBQUMsRUFBcEM7QUFBd0NVLGFBQUMsQ0FBQzhVLEtBQUYsQ0FBUXhWLENBQVIsRUFBV1gsQ0FBQyxDQUFDbVcsS0FBRixDQUFReFYsQ0FBUixDQUFYO0FBQXhDOztBQUNBLGlCQUFPQSxDQUFDLEdBQUdYLENBQUMsQ0FBQ21XLEtBQUYsQ0FBUWhVLE1BQW5CLEVBQTJCeEIsQ0FBQyxFQUE1QjtBQUFnQ1UsYUFBQyxDQUFDOFUsS0FBRixDQUFRalUsSUFBUixDQUFhZ0IsQ0FBQyxDQUFDbEQsQ0FBQyxDQUFDbVcsS0FBRixDQUFReFYsQ0FBUixDQUFELEVBQWFqQixDQUFiLENBQWQ7QUFBaEM7QUFDSCxTQUhELE1BR087QUFDSCxlQUFLLElBQUlnRCxDQUFDLEdBQUcsRUFBYixFQUFpQi9CLENBQUMsR0FBR1gsQ0FBQyxDQUFDbVcsS0FBRixDQUFRaFUsTUFBN0IsRUFBcUN4QixDQUFDLEVBQXRDO0FBQTBDK0IsYUFBQyxDQUFDUixJQUFGLENBQU9nQixDQUFDLENBQUNsRCxDQUFDLENBQUNtVyxLQUFGLENBQVF4VixDQUFSLENBQUQsRUFBYWpCLENBQWIsQ0FBUjtBQUExQzs7QUFDQU8sV0FBQyxDQUFDRCxDQUFDLENBQUNvVyxFQUFILENBQUQsR0FBVTtBQUFFQSxjQUFFLEVBQUVwVyxDQUFDLENBQUNvVyxFQUFSO0FBQVlDLGdCQUFJLEVBQUUsQ0FBbEI7QUFBcUJGLGlCQUFLLEVBQUV6VDtBQUE1QixXQUFWO0FBQ0g7QUFDSjtBQUNKOztBQUNELGFBQVN0QixDQUFULENBQVczQixDQUFYLEVBQWM7QUFDVixVQUFJQyxDQUFDLEdBQUcwRyxRQUFRLENBQUNrRSxhQUFULENBQXVCLE9BQXZCLENBQVI7O0FBQ0EsVUFBSSxLQUFLLENBQUwsS0FBVzdLLENBQUMsQ0FBQzZXLFVBQUYsQ0FBYUMsS0FBNUIsRUFBbUM7QUFDL0IsWUFBSXZXLENBQUMsR0FBR0QsQ0FBQyxDQUFDeVcsRUFBVjtBQUNBeFcsU0FBQyxLQUFLUCxDQUFDLENBQUM2VyxVQUFGLENBQWFDLEtBQWIsR0FBcUJ2VyxDQUExQixDQUFEO0FBQ0g7O0FBQ0QsVUFDS08sTUFBTSxDQUFDMkgsSUFBUCxDQUFZekksQ0FBQyxDQUFDNlcsVUFBZCxFQUEwQm5PLE9BQTFCLENBQWtDLFVBQVVwSSxDQUFWLEVBQWE7QUFDNUNMLFNBQUMsQ0FBQ21WLFlBQUYsQ0FBZTlVLENBQWYsRUFBa0JOLENBQUMsQ0FBQzZXLFVBQUYsQ0FBYXZXLENBQWIsQ0FBbEI7QUFDSCxPQUZBLEdBR0QsY0FBYyxPQUFPTixDQUFDLENBQUMwRyxNQUozQixFQU1JMUcsQ0FBQyxDQUFDMEcsTUFBRixDQUFTekcsQ0FBVCxFQU5KLEtBT0s7QUFDRCxZQUFJTyxDQUFDLEdBQUdVLENBQUMsQ0FBQ2xCLENBQUMsQ0FBQzBHLE1BQUYsSUFBWSxNQUFiLENBQVQ7QUFDQSxZQUFJLENBQUNsRyxDQUFMLEVBQVEsTUFBTSxJQUFJa0YsS0FBSixDQUFVLHlHQUFWLENBQU47QUFDUmxGLFNBQUMsQ0FBQ3lHLFdBQUYsQ0FBY2hILENBQWQ7QUFDSDtBQUNELGFBQU9BLENBQVA7QUFDSDs7QUFDRCxRQUFJVyxDQUFKO0FBQUEsUUFDSXVDLENBQUMsSUFDS3ZDLENBQUMsR0FBRyxFQUFMLEVBQ0QsVUFBVVosQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ1osYUFBUVcsQ0FBQyxDQUFDWixDQUFELENBQUQsR0FBT0MsQ0FBUixFQUFZVyxDQUFDLENBQUNzTixNQUFGLENBQVM4SCxPQUFULEVBQWtCdFIsSUFBbEIsQ0FBdUIsSUFBdkIsQ0FBbkI7QUFDSCxLQUpKLENBREw7O0FBTUEsYUFBUzdELENBQVQsQ0FBV2IsQ0FBWCxFQUFjQyxDQUFkLEVBQWlCSyxDQUFqQixFQUFvQkMsQ0FBcEIsRUFBdUI7QUFDbkIsVUFBSUMsQ0FBQyxHQUFHRixDQUFDLEdBQUcsRUFBSCxHQUFRQyxDQUFDLENBQUNnVyxHQUFuQjtBQUNBLFVBQUl2VyxDQUFDLENBQUNnWCxVQUFOLEVBQWtCaFgsQ0FBQyxDQUFDZ1gsVUFBRixDQUFhQyxPQUFiLEdBQXVCOVQsQ0FBQyxDQUFDbEQsQ0FBRCxFQUFJTyxDQUFKLENBQXhCLENBQWxCLEtBQ0s7QUFDRCxZQUFJb0IsQ0FBQyxHQUFHK0UsUUFBUSxDQUFDdVEsY0FBVCxDQUF3QjFXLENBQXhCLENBQVI7QUFBQSxZQUNJVSxDQUFDLEdBQUdsQixDQUFDLENBQUMySCxVQURWO0FBRUF6RyxTQUFDLENBQUNqQixDQUFELENBQUQsSUFBUUQsQ0FBQyxDQUFDbVgsV0FBRixDQUFjalcsQ0FBQyxDQUFDakIsQ0FBRCxDQUFmLENBQVIsRUFBNkJpQixDQUFDLENBQUN3QixNQUFGLEdBQVcxQyxDQUFDLENBQUNnSCxZQUFGLENBQWVwRixDQUFmLEVBQWtCVixDQUFDLENBQUNqQixDQUFELENBQW5CLENBQVgsR0FBcUNELENBQUMsQ0FBQ2lILFdBQUYsQ0FBY3JGLENBQWQsQ0FBbEU7QUFDSDtBQUNKOztBQUNELGFBQVN3QixDQUFULENBQVdwRCxDQUFYLEVBQWNDLENBQWQsRUFBaUJLLENBQWpCLEVBQW9CO0FBQ2hCLFVBQUlDLENBQUMsR0FBR0QsQ0FBQyxDQUFDaVcsR0FBVjtBQUFBLFVBQ0kvVixDQUFDLEdBQUdGLENBQUMsQ0FBQ2tXLEtBRFY7QUFBQSxVQUVJNVUsQ0FBQyxHQUFHdEIsQ0FBQyxDQUFDbVcsU0FGVjtBQUdBLFVBQUtqVyxDQUFDLElBQUlSLENBQUMsQ0FBQ29WLFlBQUYsQ0FBZSxPQUFmLEVBQXdCNVUsQ0FBeEIsQ0FBTCxFQUFpQ29CLENBQUMsSUFBSTRULElBQUwsS0FBY2pWLENBQUMsSUFBSSx1REFBdURzVixNQUF2RCxDQUE4REwsSUFBSSxDQUFDQyxRQUFRLENBQUNDLGtCQUFrQixDQUFDQyxJQUFJLENBQUNDLFNBQUwsQ0FBZWhVLENBQWYsQ0FBRCxDQUFuQixDQUFULENBQWxFLEVBQXFILEtBQXJILENBQW5CLENBQWpDLEVBQWtMNUIsQ0FBQyxDQUFDZ1gsVUFBekwsRUFBc01oWCxDQUFDLENBQUNnWCxVQUFGLENBQWFDLE9BQWIsR0FBdUIxVyxDQUF2QixDQUF0TSxLQUNLO0FBQ0QsZUFBT1AsQ0FBQyxDQUFDa0gsVUFBVDtBQUF1QmxILFdBQUMsQ0FBQ21YLFdBQUYsQ0FBY25YLENBQUMsQ0FBQ2tILFVBQWhCO0FBQXZCOztBQUNBbEgsU0FBQyxDQUFDaUgsV0FBRixDQUFjTixRQUFRLENBQUN1USxjQUFULENBQXdCM1csQ0FBeEIsQ0FBZDtBQUNIO0FBQ0o7O0FBQ0QsUUFBSUksQ0FBQyxHQUFHLElBQVI7QUFBQSxRQUNJNEMsQ0FBQyxHQUFHLENBRFI7O0FBRUEsYUFBU0UsQ0FBVCxDQUFXekQsQ0FBWCxFQUFjQyxDQUFkLEVBQWlCO0FBQ2IsVUFBSUssQ0FBSixFQUFPQyxDQUFQLEVBQVVDLENBQVY7O0FBQ0EsVUFBSVAsQ0FBQyxDQUFDa0gsU0FBTixFQUFpQjtBQUNiLFlBQUl2RixDQUFDLEdBQUcyQixDQUFDLEVBQVQ7QUFDQ2pELFNBQUMsR0FBR0ssQ0FBQyxLQUFLQSxDQUFDLEdBQUdnQixDQUFDLENBQUMxQixDQUFELENBQVYsQ0FBTixFQUF3Qk0sQ0FBQyxHQUFHTSxDQUFDLENBQUNXLElBQUYsQ0FBTyxJQUFQLEVBQWFsQixDQUFiLEVBQWdCc0IsQ0FBaEIsRUFBbUIsQ0FBQyxDQUFwQixDQUE1QixFQUFzRHBCLENBQUMsR0FBR0ssQ0FBQyxDQUFDVyxJQUFGLENBQU8sSUFBUCxFQUFhbEIsQ0FBYixFQUFnQnNCLENBQWhCLEVBQW1CLENBQUMsQ0FBcEIsQ0FBMUQ7QUFDSCxPQUhELE1BSUt0QixDQUFDLEdBQUdxQixDQUFDLENBQUMxQixDQUFELENBQU4sRUFDS00sQ0FBQyxHQUFHNkMsQ0FBQyxDQUFDNUIsSUFBRixDQUFPLElBQVAsRUFBYWxCLENBQWIsRUFBZ0JMLENBQWhCLENBRFQsRUFFS08sQ0FBQyxHQUFHLGFBQVk7QUFDYixTQUFFLFVBQVVSLENBQVYsRUFBYTtBQUNYLGNBQUksU0FBU0EsQ0FBQyxDQUFDMEgsVUFBZixFQUEyQixPQUFPLENBQUMsQ0FBUjtBQUMzQjFILFdBQUMsQ0FBQzBILFVBQUYsQ0FBYXlQLFdBQWIsQ0FBeUJuWCxDQUF6QjtBQUNILFNBSEEsQ0FHRU0sQ0FIRixDQUFEO0FBSUgsT0FQTDs7QUFRSixhQUNJQyxDQUFDLENBQUNQLENBQUQsQ0FBRCxFQUNBLFVBQVVDLENBQVYsRUFBYTtBQUNULFlBQUlBLENBQUosRUFBTztBQUNILGNBQUlBLENBQUMsQ0FBQ3NXLEdBQUYsS0FBVXZXLENBQUMsQ0FBQ3VXLEdBQVosSUFBbUJ0VyxDQUFDLENBQUN1VyxLQUFGLEtBQVl4VyxDQUFDLENBQUN3VyxLQUFqQyxJQUEwQ3ZXLENBQUMsQ0FBQ3dXLFNBQUYsS0FBZ0J6VyxDQUFDLENBQUN5VyxTQUFoRSxFQUEyRTtBQUMzRWxXLFdBQUMsQ0FBRVAsQ0FBQyxHQUFHQyxDQUFOLENBQUQ7QUFDSCxTQUhELE1BR09PLENBQUM7QUFDWCxPQVBMO0FBU0g7O0FBQ0RSLEtBQUMsQ0FBQ0UsT0FBRixHQUFZLFVBQVVGLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUN2QixPQUFDQSxDQUFDLEdBQUdBLENBQUMsSUFBSSxFQUFWLEVBQWM0VyxVQUFkLEdBQTJCLG9CQUFtQjVXLENBQUMsQ0FBQzRXLFVBQXJCLElBQWtDNVcsQ0FBQyxDQUFDNFcsVUFBcEMsR0FBaUQsRUFBN0UsRUFBa0Y1VyxDQUFDLENBQUNrSCxTQUFGLElBQWUsYUFBYSxPQUFPbEgsQ0FBQyxDQUFDa0gsU0FBckMsS0FBbURsSCxDQUFDLENBQUNrSCxTQUFGLEdBQWN2RixDQUFDLEVBQWxFLENBQWxGO0FBQ0EsVUFBSXRCLENBQUMsR0FBRzJDLENBQUMsQ0FBQ2pELENBQUQsRUFBSUMsQ0FBSixDQUFUO0FBQ0EsYUFDSVEsQ0FBQyxDQUFDSCxDQUFELEVBQUlMLENBQUosQ0FBRCxFQUNBLFVBQVVELENBQVYsRUFBYTtBQUNULGFBQUssSUFBSU8sQ0FBQyxHQUFHLEVBQVIsRUFBWXFCLENBQUMsR0FBRyxDQUFyQixFQUF3QkEsQ0FBQyxHQUFHdEIsQ0FBQyxDQUFDb0MsTUFBOUIsRUFBc0NkLENBQUMsRUFBdkMsRUFBMkM7QUFDdkMsY0FBSVYsQ0FBQyxHQUFHWixDQUFDLENBQUNzQixDQUFELENBQVQ7QUFBQSxjQUNJRCxDQUFDLEdBQUduQixDQUFDLENBQUNVLENBQUMsQ0FBQ3lWLEVBQUgsQ0FEVDtBQUVBaFYsV0FBQyxLQUFLQSxDQUFDLENBQUNpVixJQUFGLElBQVVyVyxDQUFDLENBQUNrQyxJQUFGLENBQU9kLENBQVAsQ0FBZixDQUFEO0FBQ0g7O0FBQ0QzQixTQUFDLElBQUlTLENBQUMsQ0FBQ3dDLENBQUMsQ0FBQ2pELENBQUQsRUFBSUMsQ0FBSixDQUFGLEVBQVVBLENBQVYsQ0FBTjs7QUFDQSxhQUFLLElBQUlXLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdMLENBQUMsQ0FBQ21DLE1BQXRCLEVBQThCOUIsQ0FBQyxFQUEvQixFQUFtQztBQUMvQixjQUFJdUMsQ0FBQyxHQUFHNUMsQ0FBQyxDQUFDSyxDQUFELENBQVQ7O0FBQ0EsY0FBSSxNQUFNdUMsQ0FBQyxDQUFDeVQsSUFBWixFQUFrQjtBQUNkLGlCQUFLLElBQUkvVixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHc0MsQ0FBQyxDQUFDdVQsS0FBRixDQUFRaFUsTUFBNUIsRUFBb0M3QixDQUFDLEVBQXJDO0FBQXlDc0MsZUFBQyxDQUFDdVQsS0FBRixDQUFRN1YsQ0FBUjtBQUF6Qzs7QUFDQSxtQkFBT0wsQ0FBQyxDQUFDMkMsQ0FBQyxDQUFDd1QsRUFBSCxDQUFSO0FBQ0g7QUFDSjtBQUNKLE9BaEJMO0FBa0JILEtBckJEO0FBc0JILEdBbjFDRixFQW8xQ0MsVUFBVTNXLENBQVYsRUFBYUMsQ0FBYixFQUFnQkssQ0FBaEIsRUFBbUI7QUFDZjs7QUFDQSxRQUFJQyxDQUFDLEdBQ0ksUUFBUSxLQUFLMEgsUUFBZCxJQUNBLFlBQVk7QUFDUixhQUFPLENBQUMxSCxDQUFDLEdBQ0xPLE1BQU0sQ0FBQ29ILE1BQVAsSUFDQSxVQUFVbEksQ0FBVixFQUFhO0FBQ1QsYUFBSyxJQUFJQyxDQUFKLEVBQU9LLENBQUMsR0FBRyxDQUFYLEVBQWNDLENBQUMsR0FBRzRILFNBQVMsQ0FBQ3pGLE1BQWpDLEVBQXlDcEMsQ0FBQyxHQUFHQyxDQUE3QyxFQUFnREQsQ0FBQyxFQUFqRDtBQUFxRCxlQUFLLElBQUlFLENBQVQsSUFBZVAsQ0FBQyxHQUFHa0ksU0FBUyxDQUFDN0gsQ0FBRCxDQUE1QjtBQUFrQ1Esa0JBQU0sQ0FBQ1csU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NoQixJQUFoQyxDQUFxQ1QsQ0FBckMsRUFBd0NPLENBQXhDLE1BQStDUixDQUFDLENBQUNRLENBQUQsQ0FBRCxHQUFPUCxDQUFDLENBQUNPLENBQUQsQ0FBdkQ7QUFBbEM7QUFBckQ7O0FBQ0EsZUFBT1IsQ0FBUDtBQUNILE9BTEUsRUFLQW9JLEtBTEEsQ0FLTSxJQUxOLEVBS1lELFNBTFosQ0FBUDtBQU1ILEtBVFQ7QUFBQSxRQVVJM0gsQ0FBQyxHQUNJLFFBQVEsS0FBSzZILFlBQWQsSUFDQSxVQUFVckksQ0FBVixFQUFhO0FBQ1QsVUFBSUEsQ0FBQyxJQUFJQSxDQUFDLENBQUNzQixVQUFYLEVBQXVCLE9BQU90QixDQUFQO0FBQ3ZCLFVBQUlDLENBQUMsR0FBRyxFQUFSO0FBQ0EsVUFBSSxRQUFRRCxDQUFaLEVBQWUsS0FBSyxJQUFJTSxDQUFULElBQWNOLENBQWQ7QUFBaUJjLGNBQU0sQ0FBQ1ksY0FBUCxDQUFzQmhCLElBQXRCLENBQTJCVixDQUEzQixFQUE4Qk0sQ0FBOUIsTUFBcUNMLENBQUMsQ0FBQ0ssQ0FBRCxDQUFELEdBQU9OLENBQUMsQ0FBQ00sQ0FBRCxDQUE3QztBQUFqQjtBQUNmLGFBQVFMLENBQUMsV0FBRCxHQUFZRCxDQUFiLEVBQWlCQyxDQUF4QjtBQUNILEtBakJUOztBQWtCQWEsVUFBTSxDQUFDQyxjQUFQLENBQXNCZCxDQUF0QixFQUF5QixZQUF6QixFQUF1QztBQUFFb0IsV0FBSyxFQUFFLENBQUM7QUFBVixLQUF2QztBQUNBLFFBQUlPLENBQUMsR0FBR3RCLENBQUMsQ0FBQyxDQUFELENBQVQ7QUFBQSxRQUNJWSxDQUFDLEdBQUdaLENBQUMsQ0FBQyxDQUFELENBRFQ7QUFBQSxRQUVJMkMsQ0FBQyxHQUFHekMsQ0FBQyxDQUFDRixDQUFDLENBQUMsQ0FBRCxDQUFGLENBRlQ7QUFBQSxRQUdJRyxDQUFDLEdBQUdILENBQUMsQ0FBQyxDQUFELENBSFQ7QUFJQ1ksS0FBQyxDQUFDeVAsVUFBRixDQUFhbFAsU0FBYixDQUF1QmlMLElBQXZCLEdBQThCLFVBQVUxTSxDQUFWLEVBQWE7QUFDeEMsV0FBSyxDQUFMLEtBQVdBLENBQVgsS0FBaUJBLENBQUMsR0FBRyxJQUFyQjtBQUNBLFVBQUlDLENBQUMsR0FBR0QsQ0FBQyxJQUFJLEtBQUtzSSxPQUFMLENBQWFDLE9BQTFCO0FBQ0EsVUFBTSxLQUFLbUgsY0FBTCxHQUFzQnpQLENBQXZCLEVBQTJCLEtBQUtxSSxPQUFMLENBQWFxRCxVQUE3QyxFQUNJLE9BQ0ssS0FBS2YsTUFBTCxDQUFZSSxLQUFaLENBQWtCb00sUUFBbEIsR0FBNkIsUUFBOUIsRUFDQyxLQUFLeE0sTUFBTCxDQUFZSSxLQUFaLENBQWtCQyxPQUFsQixHQUE0QixjQUQ3QixFQUVDLEtBQUtMLE1BQUwsQ0FBWUksS0FBWixDQUFrQnFCLEdBQWxCLEdBQXdCLElBRnpCLEVBR0MsS0FBS3pCLE1BQUwsQ0FBWUksS0FBWixDQUFrQnVCLElBQWxCLEdBQXlCLElBSDFCLEVBSUMsS0FBSzNCLE1BQUwsQ0FBWUksS0FBWixDQUFrQnFNLE1BQWxCLEdBQTJCLElBSjVCLEVBS0EsTUFBTSxLQUFLek0sTUFBTCxDQUFZSSxLQUFaLENBQWtCc00sS0FBbEIsR0FBMEIsSUFBaEMsQ0FOSjtBQVFKLFVBQUksS0FBS2hQLE9BQUwsQ0FBYStJLFlBQWpCLEVBQ0ksSUFBSSxDQUFDLEtBQUsvSSxPQUFMLENBQWFxQixTQUFkLElBQTRCM0osQ0FBQyxJQUFJQSxDQUFDLEtBQUssS0FBS3NJLE9BQUwsQ0FBYUMsT0FBeEQsRUFBa0U7QUFDOUQsWUFBSXZJLENBQUMsSUFBSSxLQUFLc0ksT0FBTCxDQUFhdUIsT0FBbEIsSUFBNkI3SixDQUFDLEtBQUssS0FBS3NJLE9BQUwsQ0FBYVEsVUFBcEQsRUFBZ0U7QUFDNUQsY0FBSXhJLENBQUMsR0FBRyxLQUFLZ0ksT0FBTCxDQUFhdUIsT0FBYixDQUFxQjNILEtBQXJCLEVBQVI7QUFDQTVCLFdBQUMsQ0FBQzRFLE9BQUYsQ0FBVSxDQUFWLEdBQWMsS0FBS29ELE9BQUwsQ0FBYXlCLGNBQWIsR0FBOEIsQ0FBOUIsSUFBbUN6SixDQUFDLENBQUN5RSxRQUFGLENBQVd6RSxDQUFDLENBQUNnRSxRQUFGLE1BQWdCLEtBQUtnRSxPQUFMLENBQWF5QixjQUFiLEdBQThCLENBQTlDLENBQVgsQ0FBakQsRUFBZ0gsS0FBS0MsU0FBTCxDQUFlLENBQWYsSUFBb0IxSixDQUFDLENBQUM0QixLQUFGLEVBQXBJO0FBQ0g7QUFDSixPQUxELE1BS087QUFDSCxZQUFJM0IsQ0FBQyxHQUFHLEtBQUsrSCxPQUFMLENBQWFxQixTQUFiLENBQXVCekgsS0FBdkIsRUFBUjtBQUNBM0IsU0FBQyxDQUFDMkUsT0FBRixDQUFVLENBQVYsR0FBZSxLQUFLOEUsU0FBTCxDQUFlLENBQWYsSUFBb0J6SixDQUFDLENBQUMyQixLQUFGLEVBQW5DO0FBQ0g7O0FBQ0wsVUFBSSxLQUFLb0csT0FBTCxDQUFhd0QsY0FBYixJQUErQnJMLENBQUMsQ0FBQzhHLFFBQUYsRUFBbkMsRUFBaUQ7QUFDNUMsYUFBS3FELE1BQUwsQ0FBWUksS0FBWixDQUFrQm9NLFFBQWxCLEdBQTZCLE9BQTlCLEVBQ0ssS0FBS3hNLE1BQUwsQ0FBWUksS0FBWixDQUFrQkMsT0FBbEIsR0FBNEIsT0FEakMsRUFFSSxlQUFleEssQ0FBQyxDQUFDK0csY0FBRixFQUFmLElBQXNDLEtBQUtjLE9BQUwsQ0FBYXlCLGNBQWIsR0FBOEIsQ0FBL0IsRUFBb0MsS0FBS3pCLE9BQUwsQ0FBYTZELGVBQWIsR0FBK0IsQ0FBeEcsS0FBZ0gsS0FBSzdELE9BQUwsQ0FBYXlCLGNBQWIsR0FBOEIsQ0FBL0IsRUFBb0MsS0FBS3pCLE9BQUwsQ0FBYTZELGVBQWIsR0FBK0IsQ0FBbEwsQ0FGSixFQUdJLEtBQUtWLE1BQUwsRUFISjtBQUlBLFlBQUlqTCxDQUFDLEdBQUcsS0FBS29LLE1BQUwsQ0FBWXdCLHFCQUFaLEVBQVI7QUFDQSxlQUNLLEtBQUt4QixNQUFMLENBQVlJLEtBQVosQ0FBa0JxQixHQUFsQixHQUF3QixnQkFBZ0I3TCxDQUFDLENBQUM4TCxNQUFGLEdBQVcsQ0FBM0IsR0FBK0IsS0FBeEQsRUFDQyxLQUFLMUIsTUFBTCxDQUFZSSxLQUFaLENBQWtCdUIsSUFBbEIsR0FBeUIsZ0JBQWdCL0wsQ0FBQyxDQUFDZ00sS0FBRixHQUFVLENBQTFCLEdBQThCLEtBRHhELEVBRUMsS0FBSzVCLE1BQUwsQ0FBWUksS0FBWixDQUFrQnNNLEtBQWxCLEdBQTBCLElBRjNCLEVBR0MsS0FBSzFNLE1BQUwsQ0FBWUksS0FBWixDQUFrQnFNLE1BQWxCLEdBQTJCLElBSDVCLEVBSUMsS0FBS3pNLE1BQUwsQ0FBWUksS0FBWixDQUFrQjZGLE1BQWxCLEdBQTJCLEtBQUt2SSxPQUFMLENBQWF1SSxNQUp6QyxFQUtDLEtBQUs5RSxRQUFMLENBQWNmLEtBQWQsQ0FBb0JDLE9BQXBCLEdBQThCLE9BTC9CLEVBTUMsS0FBS2MsUUFBTCxDQUFjZixLQUFkLENBQW9CNkYsTUFBcEIsR0FBNkIsS0FBS3ZJLE9BQUwsQ0FBYXVJLE1BQWIsR0FBc0IsQ0FOcEQsRUFPQWxLLFFBQVEsQ0FBQ2tGLElBQVQsQ0FBYzZCLFNBQWQsQ0FBd0IzSCxHQUF4QixDQUE0QjlDLENBQUMsQ0FBQ3NTLGNBQTlCLENBUEEsRUFRQSxjQUFjLE9BQU8sS0FBS2pOLE9BQUwsQ0FBYTJKLE1BQWxDLElBQTRDLEtBQUszSixPQUFMLENBQWEySixNQUFiLENBQW9CdlIsSUFBcEIsQ0FBeUIsSUFBekIsQ0FSNUMsRUFTQSxNQUFNVixDQUFDLEdBQUdBLENBQUMsQ0FBQ3VYLElBQUYsRUFBSCxHQUFjLEtBQUtqUCxPQUFMLENBQWFDLE9BQWIsQ0FBcUJnUCxJQUFyQixFQUFyQixDQVZKO0FBWUg7O0FBQ0QsV0FBSzlMLE1BQUwsSUFBZ0IsS0FBS2IsTUFBTCxDQUFZSSxLQUFaLENBQWtCb00sUUFBbEIsR0FBNkIsVUFBN0MsRUFBMkQsS0FBS3hNLE1BQUwsQ0FBWUksS0FBWixDQUFrQkMsT0FBbEIsR0FBNEIsT0FBdkYsRUFBa0csS0FBS0wsTUFBTCxDQUFZSSxLQUFaLENBQWtCNkYsTUFBbEIsR0FBMkIsS0FBS3ZJLE9BQUwsQ0FBYXVJLE1BQTFJO0FBQ0EsVUFBSWpQLENBQUMsR0FBRzNCLENBQUMsQ0FBQ21NLHFCQUFGLEVBQVI7QUFBQSxVQUNJbEwsQ0FBQyxHQUFHLEtBQUswSixNQUFMLENBQVl3QixxQkFBWixFQURSO0FBQUEsVUFFSXpLLENBQUMsR0FBR0MsQ0FBQyxDQUFDeVYsTUFGVjtBQUFBLFVBR0l6VyxDQUFDLEdBQUdnQixDQUFDLENBQUMySyxJQUhWO0FBQUEsVUFJSXBKLENBQUMsR0FBRyxDQUpSO0FBQUEsVUFLSXRDLENBQUMsR0FBRyxDQUxSO0FBQUEsVUFNSXVDLENBQUMsR0FBRyxDQU5SO0FBQUEsVUFPSXpDLENBQUMsR0FBRyxDQVBSOztBQVFBLFVBQUksS0FBSzJILE9BQUwsQ0FBYW9ELFFBQWpCLEVBQTJCO0FBQ3ZCLFlBQUluSSxDQUFDLEdBQUcsS0FBS3FILE1BQUwsQ0FBWWxELFVBQVosQ0FBdUIwRSxxQkFBdkIsRUFBUjtBQUNDekssU0FBQyxJQUFJNEIsQ0FBQyxDQUFDOFQsTUFBUixFQUNJLENBQUMxVixDQUFDLElBQUlDLENBQUMsQ0FBQzBLLE1BQVIsSUFBa0JwTCxDQUFDLENBQUNvTCxNQUFwQixHQUE2QmpNLE1BQU0sQ0FBQ21YLFdBQXBDLElBQW1ENVYsQ0FBQyxDQUFDeUssR0FBRixHQUFROUksQ0FBQyxDQUFDOEksR0FBVixHQUFnQnpLLENBQUMsQ0FBQzBLLE1BQWxCLEdBQTJCLENBQTlFLEtBQW9GbEosQ0FBQyxHQUFHeEIsQ0FBQyxDQUFDeUssR0FBRixHQUFROUksQ0FBQyxDQUFDOEksR0FBVixHQUFnQnpLLENBQUMsQ0FBQzBLLE1BQTFHLENBREosRUFFSSxDQUFDMUwsQ0FBQyxJQUFJMkMsQ0FBQyxDQUFDZ0osSUFBUixJQUFnQnJMLENBQUMsQ0FBQ3NMLEtBQWxCLEdBQTBCbk0sTUFBTSxDQUFDb1gsVUFBakMsSUFBK0M3VixDQUFDLENBQUMwVixLQUFGLEdBQVUvVCxDQUFDLENBQUMrVCxLQUFaLEdBQW9CcFcsQ0FBQyxDQUFDc0wsS0FBdEIsR0FBOEIsQ0FBN0UsS0FBbUY3TCxDQUFDLEdBQUdpQixDQUFDLENBQUMwVixLQUFGLEdBQVUvVCxDQUFDLENBQUMrVCxLQUFaLEdBQW9CcFcsQ0FBQyxDQUFDc0wsS0FBN0csQ0FGSjtBQUdILE9BTEQsTUFNS3JKLENBQUMsR0FBRzlDLE1BQU0sQ0FBQ3FYLE9BQVAsSUFBa0JyWCxNQUFNLENBQUNzWCxXQUE5QixFQUNLOVcsQ0FBQyxHQUFHUixNQUFNLENBQUN1WCxPQUFQLElBQWtCdlgsTUFBTSxDQUFDd1gsV0FEbEMsRUFFSWxXLENBQUMsR0FBR1QsQ0FBQyxDQUFDb0wsTUFBTixHQUFlak0sTUFBTSxDQUFDbVgsV0FBdEIsSUFBcUM1VixDQUFDLENBQUN5SyxHQUFGLEdBQVFuTCxDQUFDLENBQUNvTCxNQUFWLEdBQW1CLENBQXhELEtBQThEbEosQ0FBQyxHQUFHeEIsQ0FBQyxDQUFDeUssR0FBRixHQUFRbkwsQ0FBQyxDQUFDb0wsTUFBNUUsQ0FGSixFQUdJMUwsQ0FBQyxHQUFHTSxDQUFDLENBQUNzTCxLQUFOLEdBQWNuTSxNQUFNLENBQUNvWCxVQUFyQixJQUFtQzdWLENBQUMsQ0FBQzBWLEtBQUYsR0FBVXBXLENBQUMsQ0FBQ3NMLEtBQVosR0FBb0IsQ0FBdkQsS0FBNkQ3TCxDQUFDLEdBQUdpQixDQUFDLENBQUMwVixLQUFGLEdBQVVwVyxDQUFDLENBQUNzTCxLQUE3RSxDQUhKOztBQUlILFdBQUs1QixNQUFMLENBQVlJLEtBQVosQ0FBa0JxQixHQUFsQixHQUF3QixDQUFDakosQ0FBQyxJQUFJekIsQ0FBTixJQUFXZCxDQUFYLEdBQWUsSUFBeEMsRUFDSyxLQUFLK0osTUFBTCxDQUFZSSxLQUFaLENBQWtCdUIsSUFBbEIsR0FBeUIsQ0FBQzVMLENBQUMsSUFBSUMsQ0FBTixJQUFXdUMsQ0FBWCxHQUFlLElBRDdDLEVBRUssS0FBS3lILE1BQUwsQ0FBWUksS0FBWixDQUFrQnNNLEtBQWxCLEdBQTBCLElBRi9CLEVBR0ssS0FBSzFNLE1BQUwsQ0FBWUksS0FBWixDQUFrQnFNLE1BQWxCLEdBQTJCLElBSGhDLEVBSUksY0FBYyxPQUFPLEtBQUsvTyxPQUFMLENBQWEySixNQUFsQyxJQUE0QyxLQUFLM0osT0FBTCxDQUFhMkosTUFBYixDQUFvQnZSLElBQXBCLENBQXlCLElBQXpCLENBSmhEO0FBS0gsS0FqRUQsRUFrRUtRLENBQUMsQ0FBQ3lQLFVBQUYsQ0FBYWxQLFNBQWIsQ0FBdUJ3SyxJQUF2QixHQUE4QixZQUFZO0FBQ3ZDLFdBQUtDLFVBQUwsT0FDTSxLQUFLa0IsVUFBTCxDQUFnQjFLLE1BQWhCLEdBQXlCLENBQTFCLEVBQ0QsS0FBS21LLFdBQUwsRUFEQyxFQUVELEtBQUt2RSxPQUFMLENBQWFxRCxVQUFiLEdBQ00sS0FBS0YsTUFBTCxFQUROLElBRVEsS0FBS2IsTUFBTCxDQUFZSSxLQUFaLENBQWtCQyxPQUFsQixHQUE0QixNQUE3QixFQUNELGNBQWMsT0FBTyxLQUFLM0MsT0FBTCxDQUFhNEosTUFBbEMsSUFBNEMsS0FBSzVKLE9BQUwsQ0FBYTRKLE1BQWIsQ0FBb0J4UixJQUFwQixDQUF5QixJQUF6QixDQUQzQyxFQUVELEtBQUs0SCxPQUFMLENBQWF3RCxjQUFiLEtBQWdDbkYsUUFBUSxDQUFDa0YsSUFBVCxDQUFjNkIsU0FBZCxDQUF3QnNDLE1BQXhCLENBQStCL00sQ0FBQyxDQUFDc1MsY0FBakMsR0FBbUQsS0FBS3hKLFFBQUwsQ0FBY2YsS0FBZCxDQUFvQkMsT0FBcEIsR0FBOEIsTUFBakgsQ0FKTixDQUhKO0FBUUgsS0EzRUwsRUE0RUsvSixDQUFDLENBQUN5UCxVQUFGLENBQWFsUCxTQUFiLENBQXVCOEMsT0FBdkIsR0FBaUMsWUFBWTtBQUMxQyxhQUFPLEtBQUs0TCxZQUFMLEVBQVA7QUFDSCxLQTlFTCxFQStFS2pQLENBQUMsQ0FBQ3lQLFVBQUYsQ0FBYWxQLFNBQWIsQ0FBdUIwTyxZQUF2QixHQUFzQyxZQUFZO0FBQy9DLGFBQU8sS0FBSzdILE9BQUwsQ0FBYXFCLFNBQWIsR0FBeUIsS0FBS3JCLE9BQUwsQ0FBYXFCLFNBQWIsQ0FBdUJ6SCxLQUF2QixHQUErQkMsZUFBL0IsRUFBekIsR0FBNEUsSUFBbkY7QUFDSCxLQWpGTCxFQWtGS2pCLENBQUMsQ0FBQ3lQLFVBQUYsQ0FBYWxQLFNBQWIsQ0FBdUIyTyxVQUF2QixHQUFvQyxZQUFZO0FBQzdDLGFBQU8sS0FBSzlILE9BQUwsQ0FBYXVCLE9BQWIsR0FBdUIsS0FBS3ZCLE9BQUwsQ0FBYXVCLE9BQWIsQ0FBcUIzSCxLQUFyQixHQUE2QkMsZUFBN0IsRUFBdkIsR0FBd0UsSUFBL0U7QUFDSCxLQXBGTCxFQXFGS2pCLENBQUMsQ0FBQ3lQLFVBQUYsQ0FBYWxQLFNBQWIsQ0FBdUJ5RCxPQUF2QixHQUFpQyxVQUFVbEYsQ0FBVixFQUFhO0FBQzNDLFdBQUs4WCxZQUFMLENBQWtCOVgsQ0FBbEIsR0FBc0IsY0FBYyxPQUFPLEtBQUtzSSxPQUFMLENBQWE0SCxRQUFsQyxJQUE4QyxLQUFLNUgsT0FBTCxDQUFhNEgsUUFBYixDQUFzQnhQLElBQXRCLENBQTJCLElBQTNCLEVBQWlDLEtBQUs2RCxPQUFMLEVBQWpDLENBQXBFO0FBQ0gsS0F2RkwsRUF3RktyRCxDQUFDLENBQUN5UCxVQUFGLENBQWFsUCxTQUFiLENBQXVCcVcsWUFBdkIsR0FBc0MsVUFBVTlYLENBQVYsRUFBYTtBQUNoREEsT0FBQyxLQUFNLEtBQUtzSSxPQUFMLENBQWFxQixTQUFiLEdBQXlCLElBQUkvSCxDQUFDLENBQUM2RSxRQUFOLENBQWV6RyxDQUFmLEVBQWtCLEtBQUtzSSxPQUFMLENBQWFuQyxNQUEvQixFQUF1QyxLQUFLbUMsT0FBTCxDQUFhdEcsSUFBcEQsQ0FBMUIsRUFBc0YsS0FBSzZLLFdBQUwsRUFBM0YsQ0FBRDtBQUNILEtBMUZMLEVBMkZLM0wsQ0FBQyxDQUFDeVAsVUFBRixDQUFhbFAsU0FBYixDQUF1QnNXLFVBQXZCLEdBQW9DLFVBQVUvWCxDQUFWLEVBQWE7QUFDOUNBLE9BQUMsS0FDSyxLQUFLc0ksT0FBTCxDQUFhdUIsT0FBYixHQUF1QixJQUFJakksQ0FBQyxDQUFDNkUsUUFBTixDQUFlekcsQ0FBZixFQUFrQixLQUFLc0ksT0FBTCxDQUFhbkMsTUFBL0IsRUFBdUMsS0FBS21DLE9BQUwsQ0FBYXRHLElBQXBELENBQXhCLEVBQ0QsS0FBS3NHLE9BQUwsQ0FBYXFCLFNBQWIsQ0FBdUI3RSxPQUF2QixLQUFtQyxLQUFLd0QsT0FBTCxDQUFhdUIsT0FBYixDQUFxQi9FLE9BQXJCLEVBQW5DLEtBQXVFLEtBQUt3RCxPQUFMLENBQWF1QixPQUFiLEdBQXVCLEtBQUt2QixPQUFMLENBQWFxQixTQUFiLENBQXVCekgsS0FBdkIsRUFBeEIsRUFBMEQsS0FBS29HLE9BQUwsQ0FBYXFCLFNBQWIsR0FBeUIsSUFBSS9ILENBQUMsQ0FBQzZFLFFBQU4sQ0FBZXpHLENBQWYsRUFBa0IsS0FBS3NJLE9BQUwsQ0FBYW5DLE1BQS9CLEVBQXVDLEtBQUttQyxPQUFMLENBQWF0RyxJQUFwRCxDQUF6SixDQURDLEVBRUQsS0FBSzZLLFdBQUwsRUFISCxDQUFEO0FBSUgsS0FoR0wsRUFpR0szTCxDQUFDLENBQUN5UCxVQUFGLENBQWFsUCxTQUFiLENBQXVCNk0sWUFBdkIsR0FBc0MsVUFBVXRPLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUNsRCxXQUFLeVAsY0FBTCxHQUFzQixLQUFLLENBQTVCLEVBQWdDLEtBQUtvSSxZQUFMLENBQWtCOVgsQ0FBbEIsQ0FBaEMsRUFBc0QsS0FBSytYLFVBQUwsQ0FBZ0I5WCxDQUFoQixDQUF0RCxFQUEwRSxLQUFLNE0sV0FBTCxFQUExRSxFQUE4RixjQUFjLE9BQU8sS0FBS3ZFLE9BQUwsQ0FBYTRILFFBQWxDLElBQThDLEtBQUs1SCxPQUFMLENBQWE0SCxRQUFiLENBQXNCeFAsSUFBdEIsQ0FBMkIsSUFBM0IsRUFBaUMsS0FBS3lQLFlBQUwsRUFBakMsRUFBc0QsS0FBS0MsVUFBTCxFQUF0RCxDQUE1STtBQUNILEtBbkdMLEVBb0dLbFAsQ0FBQyxDQUFDeVAsVUFBRixDQUFhbFAsU0FBYixDQUF1QmtOLFFBQXZCLEdBQWtDLFVBQVUzTyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDL0MsV0FBSyxDQUFMLEtBQVdBLENBQVgsS0FBaUJBLENBQUMsR0FBRyxDQUFyQjtBQUNBLFVBQUlLLENBQUMsR0FBRyxJQUFJc0IsQ0FBQyxDQUFDNkUsUUFBTixDQUFlekcsQ0FBZixDQUFSO0FBQ0FNLE9BQUMsQ0FBQzRFLE9BQUYsQ0FBVSxDQUFWLEdBQWUsS0FBSzhFLFNBQUwsQ0FBZS9KLENBQWYsSUFBb0JLLENBQUMsQ0FBQzRCLEtBQUYsRUFBbkMsRUFBK0MsS0FBS3VKLE1BQUwsRUFBL0M7QUFDSCxLQXhHTCxFQXlHS3ZLLENBQUMsQ0FBQ3lQLFVBQUYsQ0FBYWxQLFNBQWIsQ0FBdUJ1VyxXQUF2QixHQUFxQyxVQUFVaFksQ0FBVixFQUFhO0FBQzlDLFdBQUtzSSxPQUFMLENBQWFVLFFBQWIsR0FBd0JwSCxDQUFDLENBQUM2RSxRQUFGLENBQVd2QyxZQUFYLENBQXdCbEUsQ0FBeEIsRUFBMkIsS0FBS3NJLE9BQUwsQ0FBYVcsY0FBeEMsQ0FBekIsRUFBbUYsS0FBS3dDLE1BQUwsRUFBbkY7QUFDSCxLQTNHTCxFQTRHS3ZLLENBQUMsQ0FBQ3lQLFVBQUYsQ0FBYWxQLFNBQWIsQ0FBdUJ3VyxhQUF2QixHQUF1QyxVQUFValksQ0FBVixFQUFhO0FBQ2hELFdBQUtzSSxPQUFMLENBQWFZLFVBQWIsR0FBMEJ0SCxDQUFDLENBQUM2RSxRQUFGLENBQVd2QyxZQUFYLENBQXdCbEUsQ0FBeEIsRUFBMkIsS0FBS3NJLE9BQUwsQ0FBYWEsZ0JBQXhDLENBQTNCLEVBQXVGLEtBQUtzQyxNQUFMLEVBQXZGO0FBQ0gsS0E5R0wsRUErR0t2SyxDQUFDLENBQUN5UCxVQUFGLENBQWFsUCxTQUFiLENBQXVCeVcsa0JBQXZCLEdBQTRDLFVBQVVsWSxDQUFWLEVBQWE7QUFDckQsV0FBS3NJLE9BQUwsQ0FBYWMsZUFBYixHQUErQnhILENBQUMsQ0FBQzZFLFFBQUYsQ0FBV3ZDLFlBQVgsQ0FBd0JsRSxDQUF4QixFQUEyQixLQUFLc0ksT0FBTCxDQUFhZSxxQkFBeEMsQ0FBaEMsRUFBaUcsS0FBS29DLE1BQUwsRUFBakc7QUFDSCxLQWpITCxFQWtIS3ZLLENBQUMsQ0FBQ3lQLFVBQUYsQ0FBYWxQLFNBQWIsQ0FBdUIwVyxVQUF2QixHQUFvQyxVQUFVblksQ0FBVixFQUFhO0FBQzlDLGFBQU9BLENBQUMsQ0FBQ3VJLE9BQVQsRUFDSSxPQUFPdkksQ0FBQyxDQUFDOEksVUFEYixFQUVJLE9BQU85SSxDQUFDLENBQUMwTCxRQUZiLEVBR0kxTCxDQUFDLENBQUMySixTQUFGLEtBQWdCM0osQ0FBQyxDQUFDMkosU0FBRixHQUFjLElBQUkvSCxDQUFDLENBQUM2RSxRQUFOLENBQWV6RyxDQUFDLENBQUMySixTQUFqQixFQUE0QixLQUFLckIsT0FBTCxDQUFhbkMsTUFBekMsRUFBaUQsS0FBS21DLE9BQUwsQ0FBYXRHLElBQTlELENBQTlCLENBSEosRUFJSWhDLENBQUMsQ0FBQzZKLE9BQUYsS0FBYzdKLENBQUMsQ0FBQzZKLE9BQUYsR0FBWSxJQUFJakksQ0FBQyxDQUFDNkUsUUFBTixDQUFlekcsQ0FBQyxDQUFDNkosT0FBakIsRUFBMEIsS0FBS3ZCLE9BQUwsQ0FBYW5DLE1BQXZDLEVBQStDLEtBQUttQyxPQUFMLENBQWF0RyxJQUE1RCxDQUExQixDQUpKO0FBS0EsVUFBSS9CLENBQUMsR0FBR00sQ0FBQyxDQUFDQSxDQUFDLENBQUMsRUFBRCxFQUFLLEtBQUsrSCxPQUFMLENBQWFLLFNBQWxCLENBQUYsRUFBZ0MzSSxDQUFDLENBQUMySSxTQUFsQyxDQUFUO0FBQUEsVUFDSXJJLENBQUMsR0FBR0MsQ0FBQyxDQUFDQSxDQUFDLENBQUMsRUFBRCxFQUFLLEtBQUsrSCxPQUFMLENBQWFNLFVBQWxCLENBQUYsRUFBaUM1SSxDQUFDLENBQUM0SSxVQUFuQyxDQURUO0FBQUEsVUFFSXBJLENBQUMsR0FBR0QsQ0FBQyxDQUFDQSxDQUFDLENBQUMsRUFBRCxFQUFLLEtBQUsrSCxPQUFMLENBQWFPLFdBQWxCLENBQUYsRUFBa0M3SSxDQUFDLENBQUM2SSxXQUFwQyxDQUZUO0FBR0MsV0FBS1AsT0FBTCxHQUFlL0gsQ0FBQyxDQUFDQSxDQUFDLENBQUMsRUFBRCxFQUFLLEtBQUsrSCxPQUFWLENBQUYsRUFBc0J0SSxDQUF0QixDQUFqQixFQUNLLEtBQUtzSSxPQUFMLENBQWFLLFNBQWIsR0FBeUJwSSxDQUFDLENBQUMsRUFBRCxFQUFLTixDQUFMLENBRC9CLEVBRUssS0FBS3FJLE9BQUwsQ0FBYU0sVUFBYixHQUEwQnJJLENBQUMsQ0FBQyxFQUFELEVBQUtELENBQUwsQ0FGaEMsRUFHSyxLQUFLZ0ksT0FBTCxDQUFhTyxXQUFiLEdBQTJCdEksQ0FBQyxDQUFDLEVBQUQsRUFBS0MsQ0FBTCxDQUhqQyxFQUlJLENBQUMsS0FBSzhILE9BQUwsQ0FBYXNCLFVBQWQsSUFBNEIsS0FBS3RCLE9BQUwsQ0FBYXFCLFNBQWIsWUFBa0MvSCxDQUFDLENBQUM2RSxRQUFoRSxLQUE4RSxLQUFLNkIsT0FBTCxDQUFhcUIsU0FBYixHQUF5QixJQUExQixFQUFrQyxLQUFLckIsT0FBTCxDQUFhdUIsT0FBYixHQUF1QixJQUF0SSxDQUpKLEVBS0ksS0FBS3ZCLE9BQUwsQ0FBYXNCLFVBQWIsSUFBNEIsS0FBS3RCLE9BQUwsQ0FBYXFCLFNBQWIsWUFBa0MvSCxDQUFDLENBQUM2RSxRQUFwQyxJQUFnRCxLQUFLNkIsT0FBTCxDQUFhdUIsT0FBYixZQUFnQ2pJLENBQUMsQ0FBQzZFLFFBQTlHLEtBQTZILEtBQUs2QixPQUFMLENBQWFxQixTQUFiLEdBQXlCLElBQTFCLEVBQWtDLEtBQUtyQixPQUFMLENBQWF1QixPQUFiLEdBQXVCLElBQXJMLENBTEo7O0FBTUEsV0FBSyxJQUFJM0ksQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxLQUFLb0gsT0FBTCxDQUFheUIsY0FBakMsRUFBaUQ3SSxDQUFDLElBQUksQ0FBdEQsRUFBeUQ7QUFDckQsWUFBSStCLENBQUMsR0FBRyxLQUFLcUYsT0FBTCxDQUFhcUIsU0FBYixHQUF5QixLQUFLckIsT0FBTCxDQUFhcUIsU0FBYixDQUF1QnpILEtBQXZCLEVBQXpCLEdBQTBELElBQUlOLENBQUMsQ0FBQzZFLFFBQU4sRUFBbEU7QUFDQXhELFNBQUMsQ0FBQ2lDLE9BQUYsQ0FBVSxDQUFWLEdBQWNqQyxDQUFDLENBQUM4QixRQUFGLENBQVc5QixDQUFDLENBQUNxQixRQUFGLEtBQWVwRCxDQUExQixDQUFkLEVBQTZDLEtBQUs4SSxTQUFMLENBQWU5SSxDQUFmLElBQW9CK0IsQ0FBakU7QUFDSDs7QUFDRCxXQUFLcUYsT0FBTCxDQUFhVSxRQUFiLENBQXNCdEcsTUFBdEIsS0FBaUMsS0FBSzRGLE9BQUwsQ0FBYVUsUUFBYixHQUF3QnBILENBQUMsQ0FBQzZFLFFBQUYsQ0FBV3ZDLFlBQVgsQ0FBd0IsS0FBS29FLE9BQUwsQ0FBYVUsUUFBckMsRUFBK0MsS0FBS1YsT0FBTCxDQUFhVyxjQUE1RCxDQUF6RCxHQUNJLEtBQUtYLE9BQUwsQ0FBYVksVUFBYixDQUF3QnhHLE1BQXhCLEtBQW1DLEtBQUs0RixPQUFMLENBQWFZLFVBQWIsR0FBMEJ0SCxDQUFDLENBQUM2RSxRQUFGLENBQVd2QyxZQUFYLENBQXdCLEtBQUtvRSxPQUFMLENBQWFZLFVBQXJDLEVBQWlELEtBQUtaLE9BQUwsQ0FBYWEsZ0JBQTlELENBQTdELENBREosRUFFSSxLQUFLYixPQUFMLENBQWFjLGVBQWIsQ0FBNkIxRyxNQUE3QixLQUF3QyxLQUFLNEYsT0FBTCxDQUFhYyxlQUFiLEdBQStCeEgsQ0FBQyxDQUFDNkUsUUFBRixDQUFXdkMsWUFBWCxDQUF3QixLQUFLb0UsT0FBTCxDQUFhYyxlQUFyQyxFQUFzRCxLQUFLZCxPQUFMLENBQWFlLHFCQUFuRSxDQUF2RSxDQUZKLEVBR0ksS0FBS29DLE1BQUwsRUFISixFQUlJLEtBQUtuRCxPQUFMLENBQWFxRCxVQUFiLElBQTJCLEtBQUtlLElBQUwsRUFKL0IsRUFLSSxLQUFLRyxXQUFMLEVBTEo7QUFNSCxLQTNJTCxFQTRJSzNMLENBQUMsQ0FBQ3lQLFVBQUYsQ0FBYWxQLFNBQWIsQ0FBdUJ1UixjQUF2QixHQUF3QyxZQUFZO0FBQ2hELFdBQUsxSyxPQUFMLENBQWFxQixTQUFiLEdBQXlCLElBQTFCLEVBQWtDLEtBQUtyQixPQUFMLENBQWF1QixPQUFiLEdBQXVCLElBQXpELEVBQWlFLEtBQUt1RCxVQUFMLENBQWdCMUssTUFBaEIsR0FBeUIsQ0FBMUYsRUFBOEYsS0FBS21LLFdBQUwsRUFBOUYsRUFBa0gsS0FBS1gsVUFBTCxNQUFxQixLQUFLVCxNQUFMLEVBQXZJO0FBQ0gsS0E5SUwsRUErSUt2SyxDQUFDLENBQUN5UCxVQUFGLENBQWFsUCxTQUFiLENBQXVCMlcsT0FBdkIsR0FBaUMsWUFBWTtBQUMxQyxXQUFLeE4sTUFBTCxJQUFlLEtBQUtBLE1BQUwsQ0FBWWxELFVBQTNCLEtBQTBDLEtBQUtrRCxNQUFMLENBQVlsRCxVQUFaLENBQXVCeVAsV0FBdkIsQ0FBbUMsS0FBS3ZNLE1BQXhDLEdBQWtELEtBQUtBLE1BQUwsR0FBYyxJQUExRyxHQUFrSCxLQUFLbUIsUUFBTCxJQUFpQixLQUFLQSxRQUFMLENBQWNyRSxVQUEvQixJQUE2QyxLQUFLcUUsUUFBTCxDQUFjckUsVUFBZCxDQUF5QnlQLFdBQXpCLENBQXFDLEtBQUtwTCxRQUExQyxDQUEvSjtBQUNILEtBakpMO0FBa0pILEdBLy9DRixFQWdnREMsVUFBVS9MLENBQVYsRUFBYUMsQ0FBYixFQUFnQkssQ0FBaEIsRUFBbUI7QUFDZjs7QUFDQVEsVUFBTSxDQUFDQyxjQUFQLENBQXNCZCxDQUF0QixFQUF5QixZQUF6QixFQUF1QztBQUFFb0IsV0FBSyxFQUFFLENBQUM7QUFBVixLQUF2QztBQUNILEdBbmdERixDQWhESSxFQW9qREpzUCxVQXBqREg7QUFxakRILENBeGpEQSxDQUFELEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFFLFVBQVUxUSxDQUFWLEVBQWFELENBQWIsRUFBZ0I7QUFDZCxNQUFJLDBDQUFtQkUsT0FBbkIsTUFBOEIsMENBQW1CQyxNQUFuQixFQUFsQyxFQUE2REEsTUFBTSxDQUFDRCxPQUFQLEdBQWlCRixDQUFDLEVBQWxCLENBQTdELEtBQ0ssSUFBSSxJQUFKLEVBQStDSSxpQ0FBTyxFQUFELG9DQUFLSixDQUFMO0FBQUE7QUFBQTtBQUFBLG9HQUFOLENBQS9DLEtBQ0EsYUFHSjtBQUNKLENBUEEsQ0FPRUssTUFQRixFQU9VLFlBQVk7QUFDbkIsU0FBUSxVQUFVSixDQUFWLEVBQWE7QUFDakIsUUFBSUQsQ0FBQyxHQUFHLEVBQVI7O0FBQ0EsYUFBU1EsQ0FBVCxDQUFXVSxDQUFYLEVBQWM7QUFDVixVQUFJbEIsQ0FBQyxDQUFDa0IsQ0FBRCxDQUFMLEVBQVUsT0FBT2xCLENBQUMsQ0FBQ2tCLENBQUQsQ0FBRCxDQUFLaEIsT0FBWjtBQUNWLFVBQUlLLENBQUMsR0FBSVAsQ0FBQyxDQUFDa0IsQ0FBRCxDQUFELEdBQU87QUFBRVosU0FBQyxFQUFFWSxDQUFMO0FBQVFULFNBQUMsRUFBRSxDQUFDLENBQVo7QUFBZVAsZUFBTyxFQUFFO0FBQXhCLE9BQWhCO0FBQ0EsYUFBT0QsQ0FBQyxDQUFDaUIsQ0FBRCxDQUFELENBQUtSLElBQUwsQ0FBVUgsQ0FBQyxDQUFDTCxPQUFaLEVBQXFCSyxDQUFyQixFQUF3QkEsQ0FBQyxDQUFDTCxPQUExQixFQUFtQ00sQ0FBbkMsR0FBd0NELENBQUMsQ0FBQ0UsQ0FBRixHQUFNLENBQUMsQ0FBL0MsRUFBbURGLENBQUMsQ0FBQ0wsT0FBNUQ7QUFDSDs7QUFDRCxXQUNLTSxDQUFDLENBQUNHLENBQUYsR0FBTVYsQ0FBUCxFQUNDTyxDQUFDLENBQUNJLENBQUYsR0FBTVosQ0FEUCxFQUVDUSxDQUFDLENBQUNLLENBQUYsR0FBTSxVQUFVWixDQUFWLEVBQWFELENBQWIsRUFBZ0JrQixDQUFoQixFQUFtQjtBQUN0QlYsT0FBQyxDQUFDRCxDQUFGLENBQUlOLENBQUosRUFBT0QsQ0FBUCxLQUFhYyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JkLENBQXRCLEVBQXlCRCxDQUF6QixFQUE0QjtBQUFFZ0Isa0JBQVUsRUFBRSxDQUFDLENBQWY7QUFBa0JDLFdBQUcsRUFBRUM7QUFBdkIsT0FBNUIsQ0FBYjtBQUNILEtBSkQsRUFLQ1YsQ0FBQyxDQUFDVSxDQUFGLEdBQU0sVUFBVWpCLENBQVYsRUFBYTtBQUNoQixxQkFBZSxPQUFPa0IsTUFBdEIsSUFBZ0NBLE1BQU0sQ0FBQ0MsV0FBdkMsSUFBc0ROLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQmQsQ0FBdEIsRUFBeUJrQixNQUFNLENBQUNDLFdBQWhDLEVBQTZDO0FBQUVDLGFBQUssRUFBRTtBQUFULE9BQTdDLENBQXRELEVBQXlIUCxNQUFNLENBQUNDLGNBQVAsQ0FBc0JkLENBQXRCLEVBQXlCLFlBQXpCLEVBQXVDO0FBQUVvQixhQUFLLEVBQUUsQ0FBQztBQUFWLE9BQXZDLENBQXpIO0FBQ0gsS0FQRCxFQVFDYixDQUFDLENBQUNSLENBQUYsR0FBTSxVQUFVQyxDQUFWLEVBQWFELENBQWIsRUFBZ0I7QUFDbkIsVUFBSyxJQUFJQSxDQUFKLEtBQVVDLENBQUMsR0FBR08sQ0FBQyxDQUFDUCxDQUFELENBQWYsR0FBcUIsSUFBSUQsQ0FBOUIsRUFBa0MsT0FBT0MsQ0FBUDtBQUNsQyxVQUFJLElBQUlELENBQUosSUFBUyxvQkFBbUJDLENBQW5CLENBQVQsSUFBaUNBLENBQWpDLElBQXNDQSxDQUFDLENBQUNxQixVQUE1QyxFQUF3RCxPQUFPckIsQ0FBUDtBQUN4RCxVQUFJaUIsQ0FBQyxHQUFHSixNQUFNLENBQUNTLE1BQVAsQ0FBYyxJQUFkLENBQVI7QUFDQSxVQUFLZixDQUFDLENBQUNVLENBQUYsQ0FBSUEsQ0FBSixHQUFRSixNQUFNLENBQUNDLGNBQVAsQ0FBc0JHLENBQXRCLEVBQXlCLFNBQXpCLEVBQW9DO0FBQUVGLGtCQUFVLEVBQUUsQ0FBQyxDQUFmO0FBQWtCSyxhQUFLLEVBQUVwQjtBQUF6QixPQUFwQyxDQUFSLEVBQTJFLElBQUlELENBQUosSUFBUyxZQUFZLE9BQU9DLENBQTVHLEVBQ0ksS0FBSyxJQUFJTSxDQUFULElBQWNOLENBQWQ7QUFDSU8sU0FBQyxDQUFDSyxDQUFGLENBQ0lLLENBREosRUFFSVgsQ0FGSixFQUdJLFVBQVVQLENBQVYsRUFBYTtBQUNULGlCQUFPQyxDQUFDLENBQUNELENBQUQsQ0FBUjtBQUNILFNBRkQsQ0FFRXdCLElBRkYsQ0FFTyxJQUZQLEVBRWFqQixDQUZiLENBSEo7QUFESjtBQVFKLGFBQU9XLENBQVA7QUFDSCxLQXRCRCxFQXVCQ1YsQ0FBQyxDQUFDQSxDQUFGLEdBQU0sVUFBVVAsQ0FBVixFQUFhO0FBQ2hCLFVBQUlELENBQUMsR0FDREMsQ0FBQyxJQUFJQSxDQUFDLENBQUNxQixVQUFQLEdBQ00sWUFBWTtBQUNSLGVBQU9yQixDQUFDLFdBQVI7QUFDSCxPQUhQLEdBSU0sWUFBWTtBQUNSLGVBQU9BLENBQVA7QUFDSCxPQVBYO0FBUUEsYUFBT08sQ0FBQyxDQUFDSyxDQUFGLENBQUliLENBQUosRUFBTyxHQUFQLEVBQVlBLENBQVosR0FBZ0JBLENBQXZCO0FBQ0gsS0FqQ0QsRUFrQ0NRLENBQUMsQ0FBQ0QsQ0FBRixHQUFNLFVBQVVOLENBQVYsRUFBYUQsQ0FBYixFQUFnQjtBQUNuQixhQUFPYyxNQUFNLENBQUNXLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDaEIsSUFBaEMsQ0FBcUNULENBQXJDLEVBQXdDRCxDQUF4QyxDQUFQO0FBQ0gsS0FwQ0QsRUFxQ0NRLENBQUMsQ0FBQ21CLENBQUYsR0FBTSxFQXJDUCxFQXNDQW5CLENBQUMsQ0FBRUEsQ0FBQyxDQUFDb0IsQ0FBRixHQUFNLENBQVIsQ0F2Q0w7QUF5Q0gsR0FoRE0sQ0FnREosQ0FDQyxVQUFVM0IsQ0FBVixFQUFhRCxDQUFiLEVBQWdCUSxDQUFoQixFQUFtQjtBQUNmOztBQUNBLFFBQUlVLENBQUMsR0FDSSxRQUFRLEtBQUsrRyxRQUFkLElBQ0EsWUFBWTtBQUNSLGFBQU8sQ0FBQy9HLENBQUMsR0FDTEosTUFBTSxDQUFDb0gsTUFBUCxJQUNBLFVBQVVqSSxDQUFWLEVBQWE7QUFDVCxhQUFLLElBQUlELENBQUosRUFBT1EsQ0FBQyxHQUFHLENBQVgsRUFBY1UsQ0FBQyxHQUFHaUgsU0FBUyxDQUFDekYsTUFBakMsRUFBeUNsQyxDQUFDLEdBQUdVLENBQTdDLEVBQWdEVixDQUFDLEVBQWpEO0FBQXFELGVBQUssSUFBSUQsQ0FBVCxJQUFlUCxDQUFDLEdBQUdtSSxTQUFTLENBQUMzSCxDQUFELENBQTVCO0FBQWtDTSxrQkFBTSxDQUFDVyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ2hCLElBQWhDLENBQXFDVixDQUFyQyxFQUF3Q08sQ0FBeEMsTUFBK0NOLENBQUMsQ0FBQ00sQ0FBRCxDQUFELEdBQU9QLENBQUMsQ0FBQ08sQ0FBRCxDQUF2RDtBQUFsQztBQUFyRDs7QUFDQSxlQUFPTixDQUFQO0FBQ0gsT0FMRSxFQUtBbUksS0FMQSxDQUtNLElBTE4sRUFLWUQsU0FMWixDQUFQO0FBTUgsS0FUVDtBQUFBLFFBVUk1SCxDQUFDLEdBQ0ksUUFBUSxLQUFLOEgsWUFBZCxJQUNBLFVBQVVwSSxDQUFWLEVBQWE7QUFDVCxVQUFJQSxDQUFDLElBQUlBLENBQUMsQ0FBQ3FCLFVBQVgsRUFBdUIsT0FBT3JCLENBQVA7QUFDdkIsVUFBSUQsQ0FBQyxHQUFHLEVBQVI7QUFDQSxVQUFJLFFBQVFDLENBQVosRUFBZSxLQUFLLElBQUlPLENBQVQsSUFBY1AsQ0FBZDtBQUFpQmEsY0FBTSxDQUFDWSxjQUFQLENBQXNCaEIsSUFBdEIsQ0FBMkJULENBQTNCLEVBQThCTyxDQUE5QixNQUFxQ1IsQ0FBQyxDQUFDUSxDQUFELENBQUQsR0FBT1AsQ0FBQyxDQUFDTyxDQUFELENBQTdDO0FBQWpCO0FBQ2YsYUFBUVIsQ0FBQyxXQUFELEdBQVlDLENBQWIsRUFBaUJELENBQXhCO0FBQ0gsS0FqQlQ7O0FBa0JBYyxVQUFNLENBQUNDLGNBQVAsQ0FBc0JmLENBQXRCLEVBQXlCLFlBQXpCLEVBQXVDO0FBQUVxQixXQUFLLEVBQUUsQ0FBQztBQUFWLEtBQXZDO0FBQ0EsUUFBSWYsQ0FBQyxHQUFHQyxDQUFDLENBQUNDLENBQUMsQ0FBQyxDQUFELENBQUYsQ0FBVDtBQUNBQSxLQUFDLENBQUMsQ0FBRCxDQUFEOztBQUNBLFFBQUl5QyxDQUFKO0FBQUEsUUFDSXJDLENBREo7QUFBQSxRQUVJZ0IsQ0FBQyxHQUFHdkIsTUFBTSxDQUFDc1EsVUFGZjtBQUFBLFFBR0l2TixDQUFDLEdBQUcsSUFBSXJCLElBQUosRUFIUjtBQUFBLFFBSUl0QixDQUFDLEdBQUcsSUFBSXNCLElBQUosRUFKUjtBQUFBLFFBS0lsQixDQUFDLEdBQUcsU0FBSkEsQ0FBSSxDQUFVWixDQUFWLEVBQWFELENBQWIsRUFBZ0I7QUFDaEIsVUFBSVEsQ0FBQyxHQUFHLElBQUl1QixJQUFKLENBQVM5QixDQUFULENBQVI7QUFDQSxhQUFPTyxDQUFDLENBQUMwRSxPQUFGLENBQVUxRSxDQUFDLENBQUMrRCxPQUFGLEtBQWN2RSxDQUF4QixHQUE0QlEsQ0FBbkM7QUFDSCxLQVJMO0FBQUEsUUFTSStDLENBQUMsR0FBRztBQUNBLHVCQUFpQixDQUFDMUMsQ0FBQyxDQUFDdUMsQ0FBRCxFQUFJLENBQUMsQ0FBTCxDQUFGLEVBQVczQyxDQUFYLENBRGpCO0FBRUEsa0JBQWF3QyxDQUFDLEdBQUdHLENBQUwsRUFBVXhDLENBQUMsR0FBRyxJQUFJbUIsSUFBSixDQUFTa0IsQ0FBVCxDQUFkLEVBQTRCLENBQUNyQyxDQUFELEVBQUksSUFBSW1CLElBQUosQ0FBU2tCLENBQUMsQ0FBQ29CLFdBQUYsRUFBVCxFQUEwQnBCLENBQUMsQ0FBQ3FCLFFBQUYsS0FBZSxDQUF6QyxFQUE0QyxDQUE1QyxDQUFKLENBQXhDLENBRkE7QUFHQSx1QkFBa0IsVUFBVXJFLENBQVYsRUFBYTtBQUMzQixZQUFJRCxDQUFDLEdBQUcsSUFBSStCLElBQUosQ0FBUzlCLENBQVQsQ0FBUjtBQUNBLGVBQU9ELENBQUMsQ0FBQ2tGLE9BQUYsQ0FBVSxDQUFWLEdBQWNsRixDQUFDLENBQUMrRSxRQUFGLENBQVc5RSxDQUFDLENBQUNxRSxRQUFGLEtBQWUsQ0FBMUIsQ0FBZCxFQUE0QyxDQUFDdEUsQ0FBRCxFQUFJLElBQUkrQixJQUFKLENBQVM5QixDQUFDLENBQUNvRSxXQUFGLEVBQVQsRUFBMEJwRSxDQUFDLENBQUNxRSxRQUFGLEtBQWUsQ0FBekMsRUFBNEMsQ0FBNUMsQ0FBSixDQUFuRDtBQUNILE9BSGdCLENBR2RsQixDQUhjLENBSGpCO0FBT0EsZ0JBQVcsVUFBVW5ELENBQVYsRUFBYTtBQUNwQixZQUFJRCxDQUFDLEdBQUcsSUFBSStCLElBQUosQ0FBUzlCLENBQVQsQ0FBUjtBQUNBLGVBQU9ELENBQUMsQ0FBQ2tGLE9BQUYsQ0FBVSxDQUFWLEdBQWNsRixDQUFDLENBQUMrRSxRQUFGLENBQVc5RSxDQUFDLENBQUNxRSxRQUFGLEtBQWUsQ0FBMUIsQ0FBZCxFQUE0QyxDQUFDdEUsQ0FBRCxFQUFJLElBQUkrQixJQUFKLENBQVM5QixDQUFDLENBQUNvRSxXQUFGLEVBQVQsRUFBMEJwRSxDQUFDLENBQUNxRSxRQUFGLEtBQWUsQ0FBekMsRUFBNEMsQ0FBNUMsQ0FBSixDQUFuRDtBQUNILE9BSFMsQ0FHUGxCLENBSE8sQ0FQVjtBQVdBLGdCQUFXLFVBQVVuRCxDQUFWLEVBQWE7QUFDcEIsWUFBSUQsQ0FBQyxHQUFHLElBQUkrQixJQUFKLENBQVM5QixDQUFULENBQVI7QUFDQSxlQUFPRCxDQUFDLENBQUNrRixPQUFGLENBQVUsQ0FBVixHQUFjbEYsQ0FBQyxDQUFDK0UsUUFBRixDQUFXOUUsQ0FBQyxDQUFDcUUsUUFBRixLQUFlLENBQTFCLENBQWQsRUFBNEMsQ0FBQ3RFLENBQUQsRUFBSSxJQUFJK0IsSUFBSixDQUFTOUIsQ0FBQyxDQUFDb0UsV0FBRixFQUFULEVBQTBCcEUsQ0FBQyxDQUFDcUUsUUFBRixLQUFlLENBQXpDLEVBQTRDLENBQTVDLENBQUosQ0FBbkQ7QUFDSCxPQUhTLENBR1BsQixDQUhPLENBWFY7QUFlQSxjQUFTLFVBQVVuRCxDQUFWLEVBQWE7QUFDbEIsWUFBSUQsQ0FBQyxHQUFHLElBQUkrQixJQUFKLENBQVM5QixDQUFULENBQVI7QUFDQSxlQUFPRCxDQUFDLENBQUNrRixPQUFGLENBQVUsQ0FBVixHQUFjbEYsQ0FBQyxDQUFDK0UsUUFBRixDQUFXOUUsQ0FBQyxDQUFDcUUsUUFBRixLQUFlLENBQTFCLENBQWQsRUFBNEMsQ0FBQ3RFLENBQUQsRUFBSSxJQUFJK0IsSUFBSixDQUFTOUIsQ0FBQyxDQUFDb0UsV0FBRixFQUFULEVBQTBCcEUsQ0FBQyxDQUFDcUUsUUFBRixLQUFlLEVBQXpDLEVBQTZDLENBQTdDLENBQUosQ0FBbkQ7QUFDSCxPQUhPLENBR0xsQixDQUhLO0FBZlIsS0FUUjs7QUE2QkF4QixLQUFDLENBQUNILFNBQUYsQ0FBWTRSLGtCQUFaLEdBQWlDLFVBQVVwVCxDQUFWLEVBQWE7QUFDMUMsVUFBSUEsQ0FBQyxDQUFDcUksT0FBRixDQUFVc0IsVUFBZCxFQUEwQnlPLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLHFFQUFiLEVBQTFCLEtBQ0s7QUFDRCxZQUFJdFksQ0FBQyxHQUFHa0IsQ0FBQyxDQUFDQSxDQUFDLENBQUMsRUFBRCxFQUFLO0FBQUVrVyxrQkFBUSxFQUFFLE1BQVo7QUFBb0JtQixnQkFBTSxFQUFFO0FBQTVCLFNBQUwsQ0FBRixFQUEwQ3RZLENBQUMsQ0FBQ3FJLE9BQUYsQ0FBVWlLLFlBQXBELENBQVQ7QUFDQXpSLGNBQU0sQ0FBQzJILElBQVAsQ0FBWXpJLENBQUMsQ0FBQ3VZLE1BQWQsRUFBc0I3VixNQUF0QixLQUFpQzFDLENBQUMsQ0FBQ3VZLE1BQUYsR0FBV3JYLENBQUMsQ0FBQyxFQUFELEVBQUtxQyxDQUFMLENBQTdDO0FBQ0EsWUFBSS9DLENBQUMsR0FBR21HLFFBQVEsQ0FBQ2tFLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBUjtBQUNDckssU0FBQyxDQUFDc0ssU0FBRixHQUFjeEssQ0FBQyxDQUFDa1kseUJBQWpCLEVBQ0kxWCxNQUFNLENBQUMySCxJQUFQLENBQVl6SSxDQUFDLENBQUN1WSxNQUFkLEVBQXNCN1AsT0FBdEIsQ0FBOEIsVUFBVXhILENBQVYsRUFBYTtBQUN2QyxjQUFJWCxDQUFDLEdBQUdQLENBQUMsQ0FBQ3VZLE1BQUYsQ0FBU3JYLENBQVQsQ0FBUjtBQUFBLGNBQ0laLENBQUMsR0FBR3FHLFFBQVEsQ0FBQ2tFLGFBQVQsQ0FBdUIsS0FBdkIsQ0FEUjtBQUVDdkssV0FBQyxDQUFDbVksU0FBRixHQUFjdlgsQ0FBZixFQUNLWixDQUFDLENBQUNrSSxPQUFGLENBQVVrUSxLQUFWLEdBQWtCblksQ0FBQyxDQUFDLENBQUQsQ0FBRCxDQUFLdUUsT0FBTCxFQUR2QixFQUVLeEUsQ0FBQyxDQUFDa0ksT0FBRixDQUFVbVEsR0FBVixHQUFnQnBZLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBS3VFLE9BQUwsRUFGckIsRUFHSXhFLENBQUMsQ0FBQ29LLGdCQUFGLENBQW1CLE9BQW5CLEVBQTRCLFVBQVUxSyxDQUFWLEVBQWE7QUFDckMsZ0JBQUlRLENBQUMsR0FBR1IsQ0FBQyxDQUFDeU4sTUFBVjtBQUNBak4sYUFBQyxLQUFLUCxDQUFDLENBQUNxTyxZQUFGLENBQWVoTSxNQUFNLENBQUM5QixDQUFDLENBQUNnSSxPQUFGLENBQVVrUSxLQUFYLENBQXJCLEVBQXdDcFcsTUFBTSxDQUFDOUIsQ0FBQyxDQUFDZ0ksT0FBRixDQUFVbVEsR0FBWCxDQUE5QyxHQUFnRTFZLENBQUMsQ0FBQzBPLFFBQUYsQ0FBV3JNLE1BQU0sQ0FBQzlCLENBQUMsQ0FBQ2dJLE9BQUYsQ0FBVWtRLEtBQVgsQ0FBakIsQ0FBckUsQ0FBRDtBQUNILFdBSEQsQ0FISixFQU9JbFksQ0FBQyxDQUFDeUcsV0FBRixDQUFjM0csQ0FBZCxDQVBKO0FBUUgsU0FYRCxDQURKO0FBYUEsWUFBSUMsQ0FBQyxHQUFHTixDQUFDLENBQUMySyxNQUFGLENBQVNoRSxhQUFULENBQXVCLE1BQU10RyxDQUFDLENBQUNrUyxhQUEvQixDQUFSO0FBQ0EsU0FBQyxRQUFELEVBQVcsT0FBWCxFQUFvQm9HLFFBQXBCLENBQTZCNVksQ0FBQyxDQUFDb1gsUUFBL0IsSUFBMkM3VyxDQUFDLENBQUMwRyxXQUFGLENBQWN6RyxDQUFkLENBQTNDLEdBQThERCxDQUFDLENBQUNzWSxPQUFGLENBQVVyWSxDQUFWLENBQTlELEVBQTRFLENBQUMsS0FBRCxFQUFRLFFBQVIsRUFBa0JvWSxRQUFsQixDQUEyQjVZLENBQUMsQ0FBQ29YLFFBQTdCLEtBQTBDNVcsQ0FBQyxDQUFDa04sU0FBRixDQUFZM0gsR0FBWixDQUFnQnpGLENBQUMsQ0FBQ3dZLE9BQWxCLEdBQTRCdlksQ0FBQyxDQUFDbU4sU0FBRixDQUFZM0gsR0FBWixDQUFnQnpGLENBQUMsQ0FBQ3lZLFVBQWxCLENBQXRFLElBQXVHeFksQ0FBQyxDQUFDbU4sU0FBRixDQUFZc0MsTUFBWixDQUFtQjFQLENBQUMsQ0FBQ3lZLFVBQXJCLENBQW5MO0FBQ0g7QUFDSixLQXRCRDtBQXVCSCxHQTVFRixFQTZFQyxVQUFVOVksQ0FBVixFQUFhRCxDQUFiLEVBQWdCUSxDQUFoQixFQUFtQjtBQUNmLFFBQUlVLENBQUMsR0FBR1YsQ0FBQyxDQUFDLENBQUQsQ0FBVDtBQUFBLFFBQ0lELENBQUMsR0FBR0MsQ0FBQyxDQUFDLENBQUQsQ0FEVDtBQUVBLGdCQUFZLFFBQVFELENBQUMsR0FBR0EsQ0FBQyxDQUFDZSxVQUFGLEdBQWVmLENBQUMsV0FBaEIsR0FBMkJBLENBQXZDLENBQVosS0FBMERBLENBQUMsR0FBRyxDQUFDLENBQUNOLENBQUMsQ0FBQ0ssQ0FBSCxFQUFNQyxDQUFOLEVBQVMsRUFBVCxDQUFELENBQTlEO0FBQ0EsUUFBSUQsQ0FBQyxHQUFHO0FBQUVvRyxZQUFNLEVBQUUsTUFBVjtBQUFrQlMsZUFBUyxFQUFFLENBQUM7QUFBOUIsS0FBUjtBQUNBakcsS0FBQyxDQUFDWCxDQUFELEVBQUlELENBQUosQ0FBRDtBQUNBTCxLQUFDLENBQUNDLE9BQUYsR0FBWUssQ0FBQyxDQUFDNkcsTUFBRixJQUFZLEVBQXhCO0FBQ0gsR0FwRkYsRUFxRkMsVUFBVW5ILENBQVYsRUFBYUQsQ0FBYixFQUFnQlEsQ0FBaEIsRUFBbUI7QUFDZjs7QUFDQSxRQUFJVSxDQUFKO0FBQUEsUUFDSVgsQ0FBQyxHQUFHLFNBQUpBLENBQUksR0FBWTtBQUNaLGFBQU8sS0FBSyxDQUFMLEtBQVdXLENBQVgsS0FBaUJBLENBQUMsR0FBRzhVLE9BQU8sQ0FBQzNWLE1BQU0sSUFBSXNHLFFBQVYsSUFBc0JBLFFBQVEsQ0FBQ3NQLEdBQS9CLElBQXNDLENBQUM1VixNQUFNLENBQUM2VixJQUEvQyxDQUE1QixHQUFtRmhWLENBQTFGO0FBQ0gsS0FITDtBQUFBLFFBSUlaLENBQUMsR0FBSSxZQUFZO0FBQ2IsVUFBSUwsQ0FBQyxHQUFHLEVBQVI7QUFDQSxhQUFPLFVBQVVELENBQVYsRUFBYTtBQUNoQixZQUFJLEtBQUssQ0FBTCxLQUFXQyxDQUFDLENBQUNELENBQUQsQ0FBaEIsRUFBcUI7QUFDakIsY0FBSVEsQ0FBQyxHQUFHbUcsUUFBUSxDQUFDQyxhQUFULENBQXVCNUcsQ0FBdkIsQ0FBUjtBQUNBLGNBQUlLLE1BQU0sQ0FBQzhWLGlCQUFQLElBQTRCM1YsQ0FBQyxZQUFZSCxNQUFNLENBQUM4VixpQkFBcEQsRUFDSSxJQUFJO0FBQ0EzVixhQUFDLEdBQUdBLENBQUMsQ0FBQzRWLGVBQUYsQ0FBa0JDLElBQXRCO0FBQ0gsV0FGRCxDQUVFLE9BQU9wVyxDQUFQLEVBQVU7QUFDUk8sYUFBQyxHQUFHLElBQUo7QUFDSDtBQUNMUCxXQUFDLENBQUNELENBQUQsQ0FBRCxHQUFPUSxDQUFQO0FBQ0g7O0FBQ0QsZUFBT1AsQ0FBQyxDQUFDRCxDQUFELENBQVI7QUFDSCxPQVpEO0FBYUgsS0FmRyxFQUpSO0FBQUEsUUFvQklpRCxDQUFDLEdBQUcsRUFwQlI7O0FBcUJBLGFBQVNyQyxDQUFULENBQVdYLENBQVgsRUFBYztBQUNWLFdBQUssSUFBSUQsQ0FBQyxHQUFHLENBQUMsQ0FBVCxFQUFZUSxDQUFDLEdBQUcsQ0FBckIsRUFBd0JBLENBQUMsR0FBR3lDLENBQUMsQ0FBQ1AsTUFBOUIsRUFBc0NsQyxDQUFDLEVBQXZDO0FBQ0ksWUFBSXlDLENBQUMsQ0FBQ3pDLENBQUQsQ0FBRCxDQUFLd1ksVUFBTCxLQUFvQi9ZLENBQXhCLEVBQTJCO0FBQ3ZCRCxXQUFDLEdBQUdRLENBQUo7QUFDQTtBQUNIO0FBSkw7O0FBS0EsYUFBT1IsQ0FBUDtBQUNIOztBQUNELGFBQVM0QixDQUFULENBQVczQixDQUFYLEVBQWNELENBQWQsRUFBaUI7QUFDYixXQUFLLElBQUlRLENBQUMsR0FBRyxFQUFSLEVBQVlVLENBQUMsR0FBRyxFQUFoQixFQUFvQlgsQ0FBQyxHQUFHLENBQTdCLEVBQWdDQSxDQUFDLEdBQUdOLENBQUMsQ0FBQ3lDLE1BQXRDLEVBQThDbkMsQ0FBQyxFQUEvQyxFQUFtRDtBQUMvQyxZQUFJRCxDQUFDLEdBQUdMLENBQUMsQ0FBQ00sQ0FBRCxDQUFUO0FBQUEsWUFDSXFCLENBQUMsR0FBRzVCLENBQUMsQ0FBQ3NXLElBQUYsR0FBU2hXLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBT04sQ0FBQyxDQUFDc1csSUFBbEIsR0FBeUJoVyxDQUFDLENBQUMsQ0FBRCxDQURsQztBQUFBLFlBRUk4QyxDQUFDLEdBQUc1QyxDQUFDLENBQUNvQixDQUFELENBQUQsSUFBUSxDQUZoQjtBQUFBLFlBR0luQixDQUFDLEdBQUcsR0FBR29WLE1BQUgsQ0FBVWpVLENBQVYsRUFBYSxHQUFiLEVBQWtCaVUsTUFBbEIsQ0FBeUJ6UyxDQUF6QixDQUhSO0FBSUE1QyxTQUFDLENBQUNvQixDQUFELENBQUQsR0FBT3dCLENBQUMsR0FBRyxDQUFYO0FBQ0EsWUFBSXZDLENBQUMsR0FBR0QsQ0FBQyxDQUFDSCxDQUFELENBQVQ7QUFBQSxZQUNJOEMsQ0FBQyxHQUFHO0FBQUVnVCxhQUFHLEVBQUVqVyxDQUFDLENBQUMsQ0FBRCxDQUFSO0FBQWFrVyxlQUFLLEVBQUVsVyxDQUFDLENBQUMsQ0FBRCxDQUFyQjtBQUEwQm1XLG1CQUFTLEVBQUVuVyxDQUFDLENBQUMsQ0FBRDtBQUF0QyxTQURSO0FBRUEsU0FBQyxDQUFELEtBQU9PLENBQVAsSUFBWW9DLENBQUMsQ0FBQ3BDLENBQUQsQ0FBRCxDQUFLb1ksVUFBTCxJQUFtQmhXLENBQUMsQ0FBQ3BDLENBQUQsQ0FBRCxDQUFLcVksT0FBTCxDQUFhM1YsQ0FBYixDQUEvQixJQUFrRE4sQ0FBQyxDQUFDUixJQUFGLENBQU87QUFBRXVXLG9CQUFVLEVBQUV2WSxDQUFkO0FBQWlCeVksaUJBQU8sRUFBRXRGLENBQUMsQ0FBQ3JRLENBQUQsRUFBSXZELENBQUosQ0FBM0I7QUFBbUNpWixvQkFBVSxFQUFFO0FBQS9DLFNBQVAsQ0FBbEQsRUFBOEcvWCxDQUFDLENBQUN1QixJQUFGLENBQU9oQyxDQUFQLENBQTlHO0FBQ0g7O0FBQ0QsYUFBT1MsQ0FBUDtBQUNIOztBQUNELGFBQVNrQyxDQUFULENBQVduRCxDQUFYLEVBQWM7QUFDVixVQUFJRCxDQUFDLEdBQUcyRyxRQUFRLENBQUNrRSxhQUFULENBQXVCLE9BQXZCLENBQVI7QUFBQSxVQUNJM0osQ0FBQyxHQUFHakIsQ0FBQyxDQUFDNFcsVUFBRixJQUFnQixFQUR4Qjs7QUFFQSxVQUFJLEtBQUssQ0FBTCxLQUFXM1YsQ0FBQyxDQUFDNFYsS0FBakIsRUFBd0I7QUFDcEIsWUFBSXZXLENBQUMsR0FBR0MsQ0FBQyxDQUFDdVcsRUFBVjtBQUNBeFcsU0FBQyxLQUFLVyxDQUFDLENBQUM0VixLQUFGLEdBQVV2VyxDQUFmLENBQUQ7QUFDSDs7QUFDRCxVQUNLTyxNQUFNLENBQUMySCxJQUFQLENBQVl2SCxDQUFaLEVBQWV3SCxPQUFmLENBQXVCLFVBQVV6SSxDQUFWLEVBQWE7QUFDakNELFNBQUMsQ0FBQ29WLFlBQUYsQ0FBZW5WLENBQWYsRUFBa0JpQixDQUFDLENBQUNqQixDQUFELENBQW5CO0FBQ0gsT0FGQSxHQUdELGNBQWMsT0FBT0EsQ0FBQyxDQUFDeUcsTUFKM0IsRUFNSXpHLENBQUMsQ0FBQ3lHLE1BQUYsQ0FBUzFHLENBQVQsRUFOSixLQU9LO0FBQ0QsWUFBSWlELENBQUMsR0FBRzNDLENBQUMsQ0FBQ0wsQ0FBQyxDQUFDeUcsTUFBRixJQUFZLE1BQWIsQ0FBVDtBQUNBLFlBQUksQ0FBQ3pELENBQUwsRUFBUSxNQUFNLElBQUl5QyxLQUFKLENBQVUseUdBQVYsQ0FBTjtBQUNSekMsU0FBQyxDQUFDZ0UsV0FBRixDQUFjakgsQ0FBZDtBQUNIO0FBQ0QsYUFBT0EsQ0FBUDtBQUNIOztBQUNELFFBQUlTLENBQUo7QUFBQSxRQUNJSSxDQUFDLElBQ0tKLENBQUMsR0FBRyxFQUFMLEVBQ0QsVUFBVVIsQ0FBVixFQUFhRCxDQUFiLEVBQWdCO0FBQ1osYUFBUVMsQ0FBQyxDQUFDUixDQUFELENBQUQsR0FBT0QsQ0FBUixFQUFZUyxDQUFDLENBQUN5TixNQUFGLENBQVM4SCxPQUFULEVBQWtCdFIsSUFBbEIsQ0FBdUIsSUFBdkIsQ0FBbkI7QUFDSCxLQUpKLENBREw7O0FBTUEsYUFBU25CLENBQVQsQ0FBV3RELENBQVgsRUFBY0QsQ0FBZCxFQUFpQlEsQ0FBakIsRUFBb0JVLENBQXBCLEVBQXVCO0FBQ25CLFVBQUlYLENBQUMsR0FBR0MsQ0FBQyxHQUFHLEVBQUgsR0FBUVUsQ0FBQyxDQUFDc1YsS0FBRixHQUFVLFVBQVVYLE1BQVYsQ0FBaUIzVSxDQUFDLENBQUNzVixLQUFuQixFQUEwQixJQUExQixFQUFnQ1gsTUFBaEMsQ0FBdUMzVSxDQUFDLENBQUNxVixHQUF6QyxFQUE4QyxHQUE5QyxDQUFWLEdBQStEclYsQ0FBQyxDQUFDcVYsR0FBbEY7QUFDQSxVQUFJdFcsQ0FBQyxDQUFDK1csVUFBTixFQUFrQi9XLENBQUMsQ0FBQytXLFVBQUYsQ0FBYUMsT0FBYixHQUF1QnBXLENBQUMsQ0FBQ2IsQ0FBRCxFQUFJTyxDQUFKLENBQXhCLENBQWxCLEtBQ0s7QUFDRCxZQUFJRCxDQUFDLEdBQUdxRyxRQUFRLENBQUN1USxjQUFULENBQXdCM1csQ0FBeEIsQ0FBUjtBQUFBLFlBQ0kwQyxDQUFDLEdBQUdoRCxDQUFDLENBQUMwSCxVQURWO0FBRUExRSxTQUFDLENBQUNqRCxDQUFELENBQUQsSUFBUUMsQ0FBQyxDQUFDa1gsV0FBRixDQUFjbFUsQ0FBQyxDQUFDakQsQ0FBRCxDQUFmLENBQVIsRUFBNkJpRCxDQUFDLENBQUNQLE1BQUYsR0FBV3pDLENBQUMsQ0FBQytHLFlBQUYsQ0FBZTFHLENBQWYsRUFBa0IyQyxDQUFDLENBQUNqRCxDQUFELENBQW5CLENBQVgsR0FBcUNDLENBQUMsQ0FBQ2dILFdBQUYsQ0FBYzNHLENBQWQsQ0FBbEU7QUFDSDtBQUNKOztBQUNELGFBQVNxQixDQUFULENBQVcxQixDQUFYLEVBQWNELENBQWQsRUFBaUJRLENBQWpCLEVBQW9CO0FBQ2hCLFVBQUlVLENBQUMsR0FBR1YsQ0FBQyxDQUFDK1YsR0FBVjtBQUFBLFVBQ0loVyxDQUFDLEdBQUdDLENBQUMsQ0FBQ2dXLEtBRFY7QUFBQSxVQUVJbFcsQ0FBQyxHQUFHRSxDQUFDLENBQUNpVyxTQUZWO0FBR0EsVUFDS2xXLENBQUMsR0FBR04sQ0FBQyxDQUFDbVYsWUFBRixDQUFlLE9BQWYsRUFBd0I3VSxDQUF4QixDQUFILEdBQWdDTixDQUFDLENBQUNrWixlQUFGLENBQWtCLE9BQWxCLENBQWpDLEVBQTZEN1ksQ0FBQyxJQUFJa1YsSUFBTCxLQUFjdFUsQ0FBQyxJQUFJLHVEQUF1RDJVLE1BQXZELENBQThETCxJQUFJLENBQUNDLFFBQVEsQ0FBQ0Msa0JBQWtCLENBQUNDLElBQUksQ0FBQ0MsU0FBTCxDQUFldFYsQ0FBZixDQUFELENBQW5CLENBQVQsQ0FBbEUsRUFBcUgsS0FBckgsQ0FBbkIsQ0FBN0QsRUFBOE1MLENBQUMsQ0FBQytXLFVBRHJOLEVBR0kvVyxDQUFDLENBQUMrVyxVQUFGLENBQWFDLE9BQWIsR0FBdUIvVixDQUF2QixDQUhKLEtBSUs7QUFDRCxlQUFPakIsQ0FBQyxDQUFDaUgsVUFBVDtBQUF1QmpILFdBQUMsQ0FBQ2tYLFdBQUYsQ0FBY2xYLENBQUMsQ0FBQ2lILFVBQWhCO0FBQXZCOztBQUNBakgsU0FBQyxDQUFDZ0gsV0FBRixDQUFjTixRQUFRLENBQUN1USxjQUFULENBQXdCaFcsQ0FBeEIsQ0FBZDtBQUNIO0FBQ0o7O0FBQ0QsUUFBSVAsQ0FBQyxHQUFHLElBQVI7QUFBQSxRQUNJa0QsQ0FBQyxHQUFHLENBRFI7O0FBRUEsYUFBUytQLENBQVQsQ0FBVzNULENBQVgsRUFBY0QsQ0FBZCxFQUFpQjtBQUNiLFVBQUlRLENBQUosRUFBT1UsQ0FBUCxFQUFVWCxDQUFWOztBQUNBLFVBQUlQLENBQUMsQ0FBQ21ILFNBQU4sRUFBaUI7QUFDYixZQUFJN0csQ0FBQyxHQUFHdUQsQ0FBQyxFQUFUO0FBQ0NyRCxTQUFDLEdBQUdHLENBQUMsS0FBS0EsQ0FBQyxHQUFHeUMsQ0FBQyxDQUFDcEQsQ0FBRCxDQUFWLENBQU4sRUFBd0JrQixDQUFDLEdBQUdxQyxDQUFDLENBQUMvQixJQUFGLENBQU8sSUFBUCxFQUFhaEIsQ0FBYixFQUFnQkYsQ0FBaEIsRUFBbUIsQ0FBQyxDQUFwQixDQUE1QixFQUFzREMsQ0FBQyxHQUFHZ0QsQ0FBQyxDQUFDL0IsSUFBRixDQUFPLElBQVAsRUFBYWhCLENBQWIsRUFBZ0JGLENBQWhCLEVBQW1CLENBQUMsQ0FBcEIsQ0FBMUQ7QUFDSCxPQUhELE1BSUtFLENBQUMsR0FBRzRDLENBQUMsQ0FBQ3BELENBQUQsQ0FBTixFQUNLa0IsQ0FBQyxHQUFHUyxDQUFDLENBQUNILElBQUYsQ0FBTyxJQUFQLEVBQWFoQixDQUFiLEVBQWdCUixDQUFoQixDQURULEVBRUtPLENBQUMsR0FBRyxhQUFZO0FBQ2IsU0FBRSxVQUFVTixDQUFWLEVBQWE7QUFDWCxjQUFJLFNBQVNBLENBQUMsQ0FBQ3lILFVBQWYsRUFBMkIsT0FBTyxDQUFDLENBQVI7QUFDM0J6SCxXQUFDLENBQUN5SCxVQUFGLENBQWF5UCxXQUFiLENBQXlCbFgsQ0FBekI7QUFDSCxTQUhBLENBR0VPLENBSEYsQ0FBRDtBQUlILE9BUEw7O0FBUUosYUFDSVUsQ0FBQyxDQUFDakIsQ0FBRCxDQUFELEVBQ0EsVUFBVUQsQ0FBVixFQUFhO0FBQ1QsWUFBSUEsQ0FBSixFQUFPO0FBQ0gsY0FBSUEsQ0FBQyxDQUFDdVcsR0FBRixLQUFVdFcsQ0FBQyxDQUFDc1csR0FBWixJQUFtQnZXLENBQUMsQ0FBQ3dXLEtBQUYsS0FBWXZXLENBQUMsQ0FBQ3VXLEtBQWpDLElBQTBDeFcsQ0FBQyxDQUFDeVcsU0FBRixLQUFnQnhXLENBQUMsQ0FBQ3dXLFNBQWhFLEVBQTJFO0FBQzNFdlYsV0FBQyxDQUFFakIsQ0FBQyxHQUFHRCxDQUFOLENBQUQ7QUFDSCxTQUhELE1BR09PLENBQUM7QUFDWCxPQVBMO0FBU0g7O0FBQ0ROLEtBQUMsQ0FBQ0MsT0FBRixHQUFZLFVBQVVELENBQVYsRUFBYUQsQ0FBYixFQUFnQjtBQUN4QixPQUFDQSxDQUFDLEdBQUdBLENBQUMsSUFBSSxFQUFWLEVBQWNtSCxTQUFkLElBQTJCLGFBQWEsT0FBT25ILENBQUMsQ0FBQ21ILFNBQWpELEtBQStEbkgsQ0FBQyxDQUFDbUgsU0FBRixHQUFjNUcsQ0FBQyxFQUE5RTtBQUNBLFVBQUlDLENBQUMsR0FBR29CLENBQUMsQ0FBRTNCLENBQUMsR0FBR0EsQ0FBQyxJQUFJLEVBQVgsRUFBZ0JELENBQWhCLENBQVQ7QUFDQSxhQUFPLFVBQVVDLENBQVYsRUFBYTtBQUNoQixZQUFNQSxDQUFDLEdBQUdBLENBQUMsSUFBSSxFQUFWLEVBQWUscUJBQXFCYSxNQUFNLENBQUNXLFNBQVAsQ0FBaUJnTyxRQUFqQixDQUEwQi9PLElBQTFCLENBQStCVCxDQUEvQixDQUF6QyxFQUE2RTtBQUN6RSxlQUFLLElBQUlpQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHVixDQUFDLENBQUNrQyxNQUF0QixFQUE4QnhCLENBQUMsRUFBL0IsRUFBbUM7QUFDL0IsZ0JBQUlYLENBQUMsR0FBR0ssQ0FBQyxDQUFDSixDQUFDLENBQUNVLENBQUQsQ0FBRixDQUFUO0FBQ0ErQixhQUFDLENBQUMxQyxDQUFELENBQUQsQ0FBSzBZLFVBQUw7QUFDSDs7QUFDRCxlQUFLLElBQUkzWSxDQUFDLEdBQUdzQixDQUFDLENBQUMzQixDQUFELEVBQUlELENBQUosQ0FBVCxFQUFpQm9ELENBQUMsR0FBRyxDQUExQixFQUE2QkEsQ0FBQyxHQUFHNUMsQ0FBQyxDQUFDa0MsTUFBbkMsRUFBMkNVLENBQUMsRUFBNUMsRUFBZ0Q7QUFDNUMsZ0JBQUkzQyxDQUFDLEdBQUdHLENBQUMsQ0FBQ0osQ0FBQyxDQUFDNEMsQ0FBRCxDQUFGLENBQVQ7QUFDQSxrQkFBTUgsQ0FBQyxDQUFDeEMsQ0FBRCxDQUFELENBQUt3WSxVQUFYLEtBQTBCaFcsQ0FBQyxDQUFDeEMsQ0FBRCxDQUFELENBQUt5WSxPQUFMLElBQWdCalcsQ0FBQyxDQUFDbVcsTUFBRixDQUFTM1ksQ0FBVCxFQUFZLENBQVosQ0FBMUM7QUFDSDs7QUFDREQsV0FBQyxHQUFHRixDQUFKO0FBQ0g7QUFDSixPQVpEO0FBYUgsS0FoQkQ7QUFpQkgsR0E3TkYsRUE4TkMsVUFBVUwsQ0FBVixFQUFhRCxDQUFiLEVBQWdCUSxDQUFoQixFQUFtQjtBQUNmLEtBQUNSLENBQUMsR0FBR1EsQ0FBQyxDQUFDLENBQUQsQ0FBRCxDQUFLLENBQUMsQ0FBTixDQUFMLEVBQWVpQyxJQUFmLENBQW9CLENBQ2hCeEMsQ0FBQyxDQUFDSyxDQURjLEVBRWhCLHUzQkFGZ0IsRUFHaEIsRUFIZ0IsQ0FBcEIsR0FLS04sQ0FBQyxDQUFDb0gsTUFBRixHQUFXO0FBQUVvTCxtQkFBYSxFQUFFLGlCQUFqQjtBQUFvQ3VHLGdCQUFVLEVBQUUsYUFBaEQ7QUFBK0RQLCtCQUF5QixFQUFFLDhCQUExRjtBQUEwSE0sYUFBTyxFQUFFO0FBQW5JLEtBTGhCLEVBTUs3WSxDQUFDLENBQUNDLE9BQUYsR0FBWUYsQ0FOakI7QUFPSCxHQXRPRixFQXVPQyxVQUFVQyxDQUFWLEVBQWFELENBQWIsRUFBZ0JRLENBQWhCLEVBQW1CO0FBQ2Y7O0FBQ0FQLEtBQUMsQ0FBQ0MsT0FBRixHQUFZLFVBQVVELENBQVYsRUFBYTtBQUNyQixVQUFJRCxDQUFDLEdBQUcsRUFBUjtBQUNBLGFBQ0tBLENBQUMsQ0FBQ3lQLFFBQUYsR0FBYSxZQUFZO0FBQ3RCLGVBQU8sS0FBS3RMLEdBQUwsQ0FBUyxVQUFVbkUsQ0FBVixFQUFhO0FBQ3pCLGNBQUlRLENBQUMsR0FBSSxVQUFVUCxDQUFWLEVBQWFELENBQWIsRUFBZ0I7QUFDckIsZ0JBQUlRLENBQUMsR0FBR1AsQ0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRLEVBQWhCO0FBQUEsZ0JBQ0lpQixDQUFDLEdBQUdqQixDQUFDLENBQUMsQ0FBRCxDQURUO0FBRUEsZ0JBQUksQ0FBQ2lCLENBQUwsRUFBUSxPQUFPVixDQUFQOztBQUNSLGdCQUFJUixDQUFDLElBQUksY0FBYyxPQUFPd1YsSUFBOUIsRUFBb0M7QUFDaEMsa0JBQUlqVixDQUFDLElBQUswQyxDQUFDLEdBQUcvQixDQUFMLEVBQVVOLENBQUMsR0FBRzRVLElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxrQkFBa0IsQ0FBQ0MsSUFBSSxDQUFDQyxTQUFMLENBQWUzUyxDQUFmLENBQUQsQ0FBbkIsQ0FBVCxDQUFsQixFQUF1RXJCLENBQUMsR0FBRywrREFBK0RpVSxNQUEvRCxDQUFzRWpWLENBQXRFLENBQTNFLEVBQXNKLE9BQU9pVixNQUFQLENBQWNqVSxDQUFkLEVBQWlCLEtBQWpCLENBQTFKLENBQUw7QUFBQSxrQkFDSXRCLENBQUMsR0FBR1ksQ0FBQyxDQUFDNFUsT0FBRixDQUFVM1IsR0FBVixDQUFjLFVBQVVsRSxDQUFWLEVBQWE7QUFDM0IsdUJBQU8saUJBQWlCNFYsTUFBakIsQ0FBd0IzVSxDQUFDLENBQUM2VSxVQUFGLElBQWdCLEVBQXhDLEVBQTRDRixNQUE1QyxDQUFtRDVWLENBQW5ELEVBQXNELEtBQXRELENBQVA7QUFDSCxlQUZHLENBRFI7QUFJQSxxQkFBTyxDQUFDTyxDQUFELEVBQUlxVixNQUFKLENBQVd2VixDQUFYLEVBQWN1VixNQUFkLENBQXFCLENBQUN0VixDQUFELENBQXJCLEVBQTBCbUUsSUFBMUIsQ0FBK0IsSUFBL0IsQ0FBUDtBQUNIOztBQUNELGdCQUFJekIsQ0FBSixFQUFPckMsQ0FBUCxFQUFVZ0IsQ0FBVjtBQUNBLG1CQUFPLENBQUNwQixDQUFELEVBQUlrRSxJQUFKLENBQVMsSUFBVCxDQUFQO0FBQ0gsV0FiTyxDQWFMMUUsQ0FiSyxFQWFGQyxDQWJFLENBQVI7O0FBY0EsaUJBQU9ELENBQUMsQ0FBQyxDQUFELENBQUQsR0FBTyxVQUFVNlYsTUFBVixDQUFpQjdWLENBQUMsQ0FBQyxDQUFELENBQWxCLEVBQXVCLElBQXZCLEVBQTZCNlYsTUFBN0IsQ0FBb0NyVixDQUFwQyxFQUF1QyxHQUF2QyxDQUFQLEdBQXFEQSxDQUE1RDtBQUNILFNBaEJNLEVBZ0JKa0UsSUFoQkksQ0FnQkMsRUFoQkQsQ0FBUDtBQWlCSCxPQWxCRCxFQW1CQzFFLENBQUMsQ0FBQ00sQ0FBRixHQUFNLFVBQVVMLENBQVYsRUFBYU8sQ0FBYixFQUFnQlUsQ0FBaEIsRUFBbUI7QUFDdEIsb0JBQVksT0FBT2pCLENBQW5CLEtBQXlCQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUQsRUFBT0EsQ0FBUCxFQUFVLEVBQVYsQ0FBRCxDQUE3QjtBQUNBLFlBQUlNLENBQUMsR0FBRyxFQUFSO0FBQ0EsWUFBSVcsQ0FBSixFQUNJLEtBQUssSUFBSVosQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxLQUFLb0MsTUFBekIsRUFBaUNwQyxDQUFDLEVBQWxDLEVBQXNDO0FBQ2xDLGNBQUkyQyxDQUFDLEdBQUcsS0FBSzNDLENBQUwsRUFBUSxDQUFSLENBQVI7QUFDQSxrQkFBUTJDLENBQVIsS0FBYzFDLENBQUMsQ0FBQzBDLENBQUQsQ0FBRCxHQUFPLENBQUMsQ0FBdEI7QUFDSDs7QUFDTCxhQUFLLElBQUlyQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHWCxDQUFDLENBQUN5QyxNQUF0QixFQUE4QjlCLENBQUMsRUFBL0IsRUFBbUM7QUFDL0IsY0FBSWdCLENBQUMsR0FBRyxHQUFHaVUsTUFBSCxDQUFVNVYsQ0FBQyxDQUFDVyxDQUFELENBQVgsQ0FBUjtBQUNDTSxXQUFDLElBQUlYLENBQUMsQ0FBQ3FCLENBQUMsQ0FBQyxDQUFELENBQUYsQ0FBUCxLQUFtQnBCLENBQUMsS0FBS29CLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBUUEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPLEdBQUdpVSxNQUFILENBQVVyVixDQUFWLEVBQWEsT0FBYixFQUFzQnFWLE1BQXRCLENBQTZCalUsQ0FBQyxDQUFDLENBQUQsQ0FBOUIsQ0FBZixHQUFzREEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPcEIsQ0FBbEUsQ0FBRCxFQUF3RVIsQ0FBQyxDQUFDeUMsSUFBRixDQUFPYixDQUFQLENBQTNGO0FBQ0g7QUFDSixPQS9CRCxFQWdDQTVCLENBakNKO0FBbUNILEtBckNEO0FBc0NILEdBL1FGLEVBZ1JDLFVBQVVDLENBQVYsRUFBYUQsQ0FBYixFQUFnQlEsQ0FBaEIsRUFBbUI7QUFDZjs7QUFDQU0sVUFBTSxDQUFDQyxjQUFQLENBQXNCZixDQUF0QixFQUF5QixZQUF6QixFQUF1QztBQUFFcUIsV0FBSyxFQUFFLENBQUM7QUFBVixLQUF2QztBQUNILEdBblJGLENBaERJLENBQVA7QUFxVUgsQ0E3VUEsQ0FBRCxDIiwiZmlsZSI6ImRhdGV+ZGF0ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICpcclxuICogICAgIExpdGVwaWNrZXIgdjEuNS43IChodHRwczovL2dpdGh1Yi5jb20vd2FraXJpbi9MaXRlcGlja2VyKVxyXG4gKiAgICAgUGFja2FnZTogbGl0ZXBpY2tlciAoaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbGl0ZXBpY2tlcilcclxuICogICAgIExpY2Vuc2U6IE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3dha2lyaW4vTGl0ZXBpY2tlci9ibG9iL21hc3Rlci9MSUNFTkNFLm1kKVxyXG4gKiAgICAgQ29weXJpZ2h0IDIwMTktMjAyMCBSaW5hdCBHLlxyXG4gKlxyXG4gKiAgICAgSGFzaDogODViN2NlMTE4ODNhMTFiOThhYmJcclxuICogICAgIEdlbmVyYXRlZCBvbjogMTU5Mjk3OTMwNTc0OFxyXG4gKlxyXG4gKi9cclxuIShmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgXCJvYmplY3RcIiA9PSB0eXBlb2YgZXhwb3J0cyAmJiBcIm9iamVjdFwiID09IHR5cGVvZiBtb2R1bGUgPyAobW9kdWxlLmV4cG9ydHMgPSBlKCkpIDogXCJmdW5jdGlvblwiID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShcIkxpdGVwaWNrZXJcIiwgW10sIGUpIDogXCJvYmplY3RcIiA9PSB0eXBlb2YgZXhwb3J0cyA/IChleHBvcnRzLkxpdGVwaWNrZXIgPSBlKCkpIDogKHQuTGl0ZXBpY2tlciA9IGUoKSk7XHJcbn0pKHdpbmRvdywgZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIChmdW5jdGlvbiAodCkge1xyXG4gICAgICAgIHZhciBlID0ge307XHJcbiAgICAgICAgZnVuY3Rpb24gaShvKSB7XHJcbiAgICAgICAgICAgIGlmIChlW29dKSByZXR1cm4gZVtvXS5leHBvcnRzO1xyXG4gICAgICAgICAgICB2YXIgbiA9IChlW29dID0geyBpOiBvLCBsOiAhMSwgZXhwb3J0czoge30gfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0W29dLmNhbGwobi5leHBvcnRzLCBuLCBuLmV4cG9ydHMsIGkpLCAobi5sID0gITApLCBuLmV4cG9ydHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIChpLm0gPSB0KSxcclxuICAgICAgICAgICAgKGkuYyA9IGUpLFxyXG4gICAgICAgICAgICAoaS5kID0gZnVuY3Rpb24gKHQsIGUsIG8pIHtcclxuICAgICAgICAgICAgICAgIGkubyh0LCBlKSB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgZSwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBvIH0pO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgKGkuciA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLnRvU3RyaW5nVGFnICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6IFwiTW9kdWxlXCIgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSk7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAoaS50ID0gZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICgoMSAmIGUgJiYgKHQgPSBpKHQpKSwgOCAmIGUpKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgICAgIGlmICg0ICYgZSAmJiBcIm9iamVjdFwiID09IHR5cGVvZiB0ICYmIHQgJiYgdC5fX2VzTW9kdWxlKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgICAgIHZhciBvID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICAgICAgICAgIGlmICgoaS5yKG8pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogITAsIHZhbHVlOiB0IH0pLCAyICYgZSAmJiBcInN0cmluZ1wiICE9IHR5cGVvZiB0KSlcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuIGluIHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFtlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZChudWxsLCBuKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG87XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAoaS5uID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlID1cclxuICAgICAgICAgICAgICAgICAgICB0ICYmIHQuX19lc01vZHVsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuZGVmYXVsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkuZChlLCBcImFcIiwgZSksIGU7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAoaS5vID0gZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCwgZSk7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAoaS5wID0gXCJcIiksXHJcbiAgICAgICAgICAgIGkoKGkucyA9IDQpKVxyXG4gICAgICAgICk7XHJcbiAgICB9KShbXHJcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSk7XHJcbiAgICAgICAgICAgIHZhciBvID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHQoZSwgaSwgbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IG51bGwpLCB2b2lkIDAgPT09IGkgJiYgKGkgPSBudWxsKSwgdm9pZCAwID09PSBvICYmIChvID0gXCJlbi1VU1wiKSwgKHRoaXMuZGF0ZUluc3RhbmNlID0gaSA/IHQucGFyc2VEYXRlVGltZShlLCBpLCBvKSA6IGUgPyB0LnBhcnNlRGF0ZVRpbWUoZSkgOiB0LnBhcnNlRGF0ZVRpbWUobmV3IERhdGUoKSkpLCAodGhpcy5sYW5nID0gbyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICh0LnBhcnNlRGF0ZVRpbWUgPSBmdW5jdGlvbiAoZSwgaSwgbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHZvaWQgMCA9PT0gaSAmJiAoaSA9IFwiWVlZWS1NTS1ERFwiKSwgdm9pZCAwID09PSBvICYmIChvID0gXCJlbi1VU1wiKSwgIWUpKSByZXR1cm4gbmV3IERhdGUoTmFOKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBEYXRlKSByZXR1cm4gbmV3IERhdGUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgdCkgcmV0dXJuIGUuY2xvbmUoKS5nZXREYXRlSW5zdGFuY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9eLT9cXGR7MTAsfSQvLnRlc3QoZSkpIHJldHVybiB0LmdldERhdGVaZXJvVGltZShuZXcgRGF0ZShOdW1iZXIoZSkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSBbXSwgcyA9IG51bGw7IG51bGwgIT0gKHMgPSB0LnJlZ2V4LmV4ZWMoaSkpOyApIFwiXFxcXFwiICE9PSBzWzFdICYmIG4ucHVzaChzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0geyB5ZWFyOiBudWxsLCBtb250aDogbnVsbCwgc2hvcnRNb250aDogbnVsbCwgbG9uZ01vbnRoOiBudWxsLCBkYXk6IG51bGwsIHZhbHVlOiBcIlwiIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgblswXS5pbmRleCA+IDAgJiYgKHIudmFsdWUgKz0gXCIuKj9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IDAsIGwgPSBPYmplY3QuZW50cmllcyhuKTsgYSA8IGwubGVuZ3RoOyBhKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBsW2FdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IHBbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gcFsxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBOdW1iZXIoYyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gdC5mb3JtYXRQYXR0ZXJucyhoWzBdLCBvKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSB1Lmdyb3VwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IHUucGF0dGVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJbbV0gPSBkICsgMSksIChyLnZhbHVlICs9IGYpLCAoci52YWx1ZSArPSBcIi4qP1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSBuZXcgUmVnRXhwKFwiXlwiICsgci52YWx1ZSArIFwiJFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZy50ZXN0KGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ID0gZy5leGVjKGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IE51bWJlcih5W3IueWVhcl0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIubW9udGggPyAodiA9IE51bWJlcih5W3IubW9udGhdKSAtIDEpIDogci5zaG9ydE1vbnRoID8gKHYgPSB0LnNob3J0TW9udGhzKG8pLmluZGV4T2YoeVtyLnNob3J0TW9udGhdKSkgOiByLmxvbmdNb250aCAmJiAodiA9IHQubG9uZ01vbnRocyhvKS5pbmRleE9mKHlbci5sb25nTW9udGhdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBEID0gTnVtYmVyKHlbci5kYXldKSB8fCAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoaywgdiwgRCwgMCwgMCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmdldERhdGVaZXJvVGltZShuZXcgRGF0ZShlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgKHQuY29udmVydEFycmF5ID0gZnVuY3Rpb24gKGUsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUubWFwKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIEFycmF5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlLm1hcChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChlLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXcgdChlLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgKHQuZ2V0RGF0ZVplcm9UaW1lID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSwgdC5nZXRNb250aCgpLCB0LmdldERhdGUoKSwgMCwgMCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgKHQuc2hvcnRNb250aHMgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5NT05USF9KUy5tYXAoZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgyMDE5LCB0KS50b0xvY2FsZVN0cmluZyhlLCB7IG1vbnRoOiBcInNob3J0XCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICh0LmxvbmdNb250aHMgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5NT05USF9KUy5tYXAoZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgyMDE5LCB0KS50b0xvY2FsZVN0cmluZyhlLCB7IG1vbnRoOiBcImxvbmdcIiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgKHQuZm9ybWF0UGF0dGVybnMgPSBmdW5jdGlvbiAoZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJZWVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIllZWVlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBncm91cDogXCJ5ZWFyXCIsIHBhdHRlcm46IFwiKFxcXFxke1wiICsgZS5sZW5ndGggKyBcIn0pXCIgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJNXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZ3JvdXA6IFwibW9udGhcIiwgcGF0dGVybjogXCIoXFxcXGR7MSwyfSlcIiB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIk1NXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZ3JvdXA6IFwibW9udGhcIiwgcGF0dGVybjogXCIoXFxcXGR7Mn0pXCIgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJNTU1cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBncm91cDogXCJzaG9ydE1vbnRoXCIsIHBhdHRlcm46IFwiKFwiICsgdC5zaG9ydE1vbnRocyhpKS5qb2luKFwifFwiKSArIFwiKVwiIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiTU1NTVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGdyb3VwOiBcImxvbmdNb250aFwiLCBwYXR0ZXJuOiBcIihcIiArIHQubG9uZ01vbnRocyhpKS5qb2luKFwifFwiKSArIFwiKVwiIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiRFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGdyb3VwOiBcImRheVwiLCBwYXR0ZXJuOiBcIihcXFxcZHsxLDJ9KVwiIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiRERcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBncm91cDogXCJkYXlcIiwgcGF0dGVybjogXCIoXFxcXGR7Mn0pXCIgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICh0LnByb3RvdHlwZS5nZXREYXRlSW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVJbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAodC5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRlSW5zdGFuY2UudG9Mb2NhbGVTdHJpbmcodCwgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgKHQucHJvdG90eXBlLnRvRGF0ZVN0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUluc3RhbmNlLnRvRGF0ZVN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICh0LnByb3RvdHlwZS5nZXRTZWNvbmRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRlSW5zdGFuY2UuZ2V0U2Vjb25kcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICh0LnByb3RvdHlwZS5nZXREYXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVJbnN0YW5jZS5nZXREYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAodC5wcm90b3R5cGUuZ2V0VGltZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUluc3RhbmNlLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAodC5wcm90b3R5cGUuZ2V0RGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUluc3RhbmNlLmdldERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAodC5wcm90b3R5cGUuZ2V0TW9udGggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVJbnN0YW5jZS5nZXRNb250aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICh0LnByb3RvdHlwZS5nZXRGdWxsWWVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUluc3RhbmNlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgKHQucHJvdG90eXBlLnNldE1vbnRoID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUluc3RhbmNlLnNldE1vbnRoKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICh0LnByb3RvdHlwZS5zZXRIb3VycyA9IGZ1bmN0aW9uICh0LCBlLCBpLCBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gdCAmJiAodCA9IDApLCB2b2lkIDAgPT09IGUgJiYgKGUgPSAwKSwgdm9pZCAwID09PSBpICYmIChpID0gMCksIHZvaWQgMCA9PT0gbyAmJiAobyA9IDApLCB0aGlzLmRhdGVJbnN0YW5jZS5zZXRIb3Vycyh0LCBlLCBpLCBvKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAodC5wcm90b3R5cGUuc2V0U2Vjb25kcyA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVJbnN0YW5jZS5zZXRTZWNvbmRzKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICh0LnByb3RvdHlwZS5zZXREYXRlID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUluc3RhbmNlLnNldERhdGUodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgKHQucHJvdG90eXBlLnNldEZ1bGxZZWFyID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUluc3RhbmNlLnNldEZ1bGxZZWFyKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICh0LnByb3RvdHlwZS5nZXRXZWVrID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBuZXcgRGF0ZSh0aGlzLnRpbWVzdGFtcCgpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAodGhpcy5nZXREYXkoKSArICg3IC0gdCkpICUgNztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zZXREYXRlKGUuZ2V0RGF0ZSgpIC0gaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNldE1vbnRoKDAsIDEpLCBlLmdldERheSgpICE9PSB0ICYmIGUuc2V0TW9udGgoMCwgMSArICgoNCAtIGUuZ2V0RGF5KCkgKyA3KSAlIDcpKSwgMSArIE1hdGguY2VpbCgobyAtIGUuZ2V0VGltZSgpKSAvIDYwNDhlNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgKHQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHQodGhpcy5nZXREYXRlSW5zdGFuY2UoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgKHQucHJvdG90eXBlLmlzQmV0d2VlbiA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoKHZvaWQgMCA9PT0gaSAmJiAoaSA9IFwiKClcIiksIGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIigpXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGltZXN0YW1wKCkgPiB0LmdldFRpbWUoKSAmJiB0aGlzLnRpbWVzdGFtcCgpIDwgZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiWylcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXAoKSA+PSB0LmdldFRpbWUoKSAmJiB0aGlzLnRpbWVzdGFtcCgpIDwgZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiKF1cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXAoKSA+IHQuZ2V0VGltZSgpICYmIHRoaXMudGltZXN0YW1wKCkgPD0gZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiW11cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXAoKSA+PSB0LmdldFRpbWUoKSAmJiB0aGlzLnRpbWVzdGFtcCgpIDw9IGUuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgKHQucHJvdG90eXBlLmlzQmVmb3JlID0gZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICgodm9pZCAwID09PSBlICYmIChlID0gXCJzZWNvbmRzXCIpLCBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNlY29uZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNlY29uZHNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5nZXRUaW1lKCkgPiB0aGlzLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkYXlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkYXlzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSwgdC5nZXRNb250aCgpLCB0LmdldERhdGUoKSkuZ2V0VGltZSgpID4gbmV3IERhdGUodGhpcy5nZXRGdWxsWWVhcigpLCB0aGlzLmdldE1vbnRoKCksIHRoaXMuZ2V0RGF0ZSgpKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibW9udGhcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtb250aHNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodC5nZXRGdWxsWWVhcigpLCB0LmdldE1vbnRoKCksIDEpLmdldFRpbWUoKSA+IG5ldyBEYXRlKHRoaXMuZ2V0RnVsbFllYXIoKSwgdGhpcy5nZXRNb250aCgpLCAxKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwieWVhclwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInllYXJzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuZ2V0RnVsbFllYXIoKSA+IHRoaXMuZ2V0RnVsbFllYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpc0JlZm9yZTogSW52YWxpZCB1bml0IVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAodC5wcm90b3R5cGUuaXNTYW1lT3JCZWZvcmUgPSBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCh2b2lkIDAgPT09IGUgJiYgKGUgPSBcInNlY29uZHNcIiksIGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2Vjb25kXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2Vjb25kc1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmdldFRpbWUoKSA+PSB0aGlzLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkYXlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkYXlzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSwgdC5nZXRNb250aCgpLCB0LmdldERhdGUoKSkuZ2V0VGltZSgpID49IG5ldyBEYXRlKHRoaXMuZ2V0RnVsbFllYXIoKSwgdGhpcy5nZXRNb250aCgpLCB0aGlzLmdldERhdGUoKSkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1vbnRoXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibW9udGhzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSwgdC5nZXRNb250aCgpLCAxKS5nZXRUaW1lKCkgPj0gbmV3IERhdGUodGhpcy5nZXRGdWxsWWVhcigpLCB0aGlzLmdldE1vbnRoKCksIDEpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpc1NhbWVPckJlZm9yZTogSW52YWxpZCB1bml0IVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAodC5wcm90b3R5cGUuaXNBZnRlciA9IGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoKHZvaWQgMCA9PT0gZSAmJiAoZSA9IFwic2Vjb25kc1wiKSwgZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZWNvbmRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZWNvbmRzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGltZSgpID4gdC5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGF5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGF5c1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmdldEZ1bGxZZWFyKCksIHRoaXMuZ2V0TW9udGgoKSwgdGhpcy5nZXREYXRlKCkpLmdldFRpbWUoKSA+IG5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSwgdC5nZXRNb250aCgpLCB0LmdldERhdGUoKSkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1vbnRoXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibW9udGhzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMuZ2V0RnVsbFllYXIoKSwgdGhpcy5nZXRNb250aCgpLCAxKS5nZXRUaW1lKCkgPiBuZXcgRGF0ZSh0LmdldEZ1bGxZZWFyKCksIHQuZ2V0TW9udGgoKSwgMSkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInllYXJcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ5ZWFyc1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEZ1bGxZZWFyKCkgPiB0LmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaXNBZnRlcjogSW52YWxpZCB1bml0IVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAodC5wcm90b3R5cGUuaXNTYW1lT3JBZnRlciA9IGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoKHZvaWQgMCA9PT0gZSAmJiAoZSA9IFwic2Vjb25kc1wiKSwgZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZWNvbmRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZWNvbmRzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGltZSgpID49IHQuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRheVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRheXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5nZXRGdWxsWWVhcigpLCB0aGlzLmdldE1vbnRoKCksIHRoaXMuZ2V0RGF0ZSgpKS5nZXRUaW1lKCkgPj0gbmV3IERhdGUodC5nZXRGdWxsWWVhcigpLCB0LmdldE1vbnRoKCksIHQuZ2V0RGF0ZSgpKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibW9udGhcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtb250aHNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5nZXRGdWxsWWVhcigpLCB0aGlzLmdldE1vbnRoKCksIDEpLmdldFRpbWUoKSA+PSBuZXcgRGF0ZSh0LmdldEZ1bGxZZWFyKCksIHQuZ2V0TW9udGgoKSwgMSkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImlzU2FtZU9yQWZ0ZXI6IEludmFsaWQgdW5pdCFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgKHQucHJvdG90eXBlLmlzU2FtZSA9IGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoKHZvaWQgMCA9PT0gZSAmJiAoZSA9IFwic2Vjb25kc1wiKSwgZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZWNvbmRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZWNvbmRzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGltZSgpID09PSB0LmdldFRpbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkYXlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkYXlzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMuZ2V0RnVsbFllYXIoKSwgdGhpcy5nZXRNb250aCgpLCB0aGlzLmdldERhdGUoKSkuZ2V0VGltZSgpID09PSBuZXcgRGF0ZSh0LmdldEZ1bGxZZWFyKCksIHQuZ2V0TW9udGgoKSwgdC5nZXREYXRlKCkpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtb250aFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1vbnRoc1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmdldEZ1bGxZZWFyKCksIHRoaXMuZ2V0TW9udGgoKSwgMSkuZ2V0VGltZSgpID09PSBuZXcgRGF0ZSh0LmdldEZ1bGxZZWFyKCksIHQuZ2V0TW9udGgoKSwgMSkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImlzU2FtZTogSW52YWxpZCB1bml0IVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAodC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICgodm9pZCAwID09PSBlICYmIChlID0gXCJzZWNvbmRzXCIpLCBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNlY29uZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNlY29uZHNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNlY29uZHModGhpcy5nZXRTZWNvbmRzKCkgKyB0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkYXlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkYXlzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXREYXRlKHRoaXMuZ2V0RGF0ZSgpICsgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibW9udGhcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtb250aHNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldE1vbnRoKHRoaXMuZ2V0TW9udGgoKSArIHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICh0LnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoKHZvaWQgMCA9PT0gZSAmJiAoZSA9IFwic2Vjb25kc1wiKSwgZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZWNvbmRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZWNvbmRzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTZWNvbmRzKHRoaXMuZ2V0U2Vjb25kcygpIC0gdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGF5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGF5c1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RGF0ZSh0aGlzLmdldERhdGUoKSAtIHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1vbnRoXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibW9udGhzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNb250aCh0aGlzLmdldE1vbnRoKCkgLSB0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAodC5wcm90b3R5cGUuZGlmZiA9IGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IFwic2Vjb25kc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNlY29uZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNlY29uZHNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRUaW1lKCkgLSB0LmdldFRpbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkYXlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkYXlzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKHRoaXMudGltZXN0YW1wKCkgLSB0LmdldFRpbWUoKSkgLyA4NjRlNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibW9udGhcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtb250aHNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICh0LnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAoZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IGkgJiYgKGkgPSBcImVuLVVTXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBvID0gXCJcIiwgbiA9IFtdLCBzID0gbnVsbDsgbnVsbCAhPSAocyA9IHQucmVnZXguZXhlYyhlKSk7ICkgXCJcXFxcXCIgIT09IHNbMV0gJiYgbi5wdXNoKHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5bMF0uaW5kZXggPiAwICYmIChvICs9IGUuc3Vic3RyaW5nKDAsIG5bMF0uaW5kZXgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwLCBhID0gT2JqZWN0LmVudHJpZXMobik7IHIgPCBhLmxlbmd0aDsgcisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBhW3JdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gbFswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGxbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSBOdW1iZXIocCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG8gKz0gdGhpcy5mb3JtYXRUb2tlbnMoY1swXSwgaSkpLCBuW2ggKyAxXSAmJiAobyArPSBlLnN1YnN0cmluZyhjLmluZGV4ICsgY1swXS5sZW5ndGgsIG5baCArIDFdLmluZGV4KSksIGggPT09IG4ubGVuZ3RoIC0gMSAmJiAobyArPSBlLnN1YnN0cmluZyhjLmluZGV4ICsgY1swXS5sZW5ndGgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5yZXBsYWNlKC9cXFxcL2csIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICh0LnByb3RvdHlwZS50aW1lc3RhbXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmdldEZ1bGxZZWFyKCksIHRoaXMuZ2V0TW9udGgoKSwgdGhpcy5nZXREYXRlKCksIDAsIDAsIDAsIDApLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAodC5wcm90b3R5cGUuZm9ybWF0VG9rZW5zID0gZnVuY3Rpb24gKGUsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiWVlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHRoaXMuZ2V0RnVsbFllYXIoKSkuc2xpY2UoLTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIllZWVlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHRoaXMuZ2V0RnVsbFllYXIoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiTVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodGhpcy5nZXRNb250aCgpICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiTU1cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwiMFwiICsgKHRoaXMuZ2V0TW9udGgoKSArIDEpKS5zbGljZSgtMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiTU1NXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc2hvcnRNb250aHMoaSlbdGhpcy5nZXRNb250aCgpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJNTU1NXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQubG9uZ01vbnRocyhpKVt0aGlzLmdldE1vbnRoKCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHRoaXMuZ2V0RGF0ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJERFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCIwXCIgKyB0aGlzLmdldERhdGUoKSkuc2xpY2UoLTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICh0LnJlZ2V4ID0gLyhcXFxcKT8oWXsyLDR9fE17MSw0fXxEezEsMn18ZHsxLDR9KS9nKSxcclxuICAgICAgICAgICAgICAgICAgICAodC5NT05USF9KUyA9IFswLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTFdKSxcclxuICAgICAgICAgICAgICAgICAgICB0XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KSgpO1xyXG4gICAgICAgICAgICBlLkRhdGVUaW1lID0gbztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIHZhciBvID0gaSg2KTtcclxuICAgICAgICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgbyAmJiAobyA9IFtbdC5pLCBvLCBcIlwiXV0pO1xyXG4gICAgICAgICAgICB2YXIgbiA9IHtcclxuICAgICAgICAgICAgICAgIGluc2VydDogZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoZWFkXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gd2luZG93Ll9sYXN0RWxlbWVudEluc2VydGVkQnlTdHlsZUxvYWRlcjtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZGlzYWJsZUxpdGVwaWNrZXJTdHlsZXMgfHwgKGkgPyAoaS5uZXh0U2libGluZyA/IGUuaW5zZXJ0QmVmb3JlKHQsIGkubmV4dFNpYmxpbmcpIDogZS5hcHBlbmRDaGlsZCh0KSkgOiBlLmluc2VydEJlZm9yZSh0LCBlLmZpcnN0Q2hpbGQpLCAod2luZG93Ll9sYXN0RWxlbWVudEluc2VydGVkQnlTdHlsZUxvYWRlciA9IHQpKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaW5nbGV0b246ICExLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpKDgpKG8sIG4pO1xyXG4gICAgICAgICAgICBvLmxvY2FscyAmJiAodC5leHBvcnRzID0gby5sb2NhbHMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIG8oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93Lm1hdGNoTWVkaWEoXCIob3JpZW50YXRpb246IHBvcnRyYWl0KVwiKS5tYXRjaGVzID8gXCJwb3J0cmFpdFwiIDogXCJsYW5kc2NhcGVcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLFxyXG4gICAgICAgICAgICAgICAgKGUuaXNNb2JpbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBcInBvcnRyYWl0XCIgPT09IG8oKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93Lm1hdGNoTWVkaWEoXCIobWF4LWRldmljZS1cIiArICh0ID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIikgKyBcIjogNDgwcHgpXCIpLm1hdGNoZXM7XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIChlLmdldE9yaWVudGF0aW9uID0gbyksXHJcbiAgICAgICAgICAgICAgICAoZS5maW5kTmVzdGVkTW9udGhJdGVtID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gdC5wYXJlbnROb2RlLmNoaWxkTm9kZXMsIGkgPSAwOyBpIDwgZS5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5pdGVtKGkpID09PSB0KSByZXR1cm4gaTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgICAgICB2YXIgbyxcclxuICAgICAgICAgICAgICAgIG4gPVxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICgobyA9IGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAobyA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5fX3Byb3RvX18gPSBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gZSkgZS5oYXNPd25Qcm9wZXJ0eShpKSAmJiAodFtpXSA9IGVbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkodCwgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaSgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8odCwgZSksICh0LnByb3RvdHlwZSA9IG51bGwgPT09IGUgPyBPYmplY3QuY3JlYXRlKGUpIDogKChpLnByb3RvdHlwZSA9IGUucHJvdG90eXBlKSwgbmV3IGkoKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgcyA9XHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAocyA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUsIGkgPSAxLCBvID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG87IGkrKykgZm9yICh2YXIgbiBpbiAoZSA9IGFyZ3VtZW50c1tpXSkpIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBuKSAmJiAodFtuXSA9IGVbbl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgciA9XHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgdC5fX2VzTW9kdWxlKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT0gdCkgZm9yICh2YXIgaSBpbiB0KSBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0LCBpKSAmJiAoZVtpXSA9IHRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGUuZGVmYXVsdCA9IHQpLCBlO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSk7XHJcbiAgICAgICAgICAgIHZhciBhID0gaSg1KSxcclxuICAgICAgICAgICAgICAgIGwgPSBpKDApLFxyXG4gICAgICAgICAgICAgICAgcCA9IHIoaSgxKSksXHJcbiAgICAgICAgICAgICAgICBjID0gaSgyKSxcclxuICAgICAgICAgICAgICAgIGggPSAoZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0LmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGkub3B0aW9ucyA9IHMocyh7fSwgaS5vcHRpb25zKSwgZS5lbGVtZW50LmRhdGFzZXQpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGkub3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcInRydWVcIiAhPT0gaS5vcHRpb25zW3RdICYmIFwiZmFsc2VcIiAhPT0gaS5vcHRpb25zW3RdKSB8fCAoaS5vcHRpb25zW3RdID0gXCJ0cnVlXCIgPT09IGkub3B0aW9uc1t0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBzKHMoe30sIGkub3B0aW9ucy5kcm9wZG93bnMpLCBlLmRyb3Bkb3ducyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gcyhzKHt9LCBpLm9wdGlvbnMuYnV0dG9uVGV4dCksIGUuYnV0dG9uVGV4dCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gcyhzKHt9LCBpLm9wdGlvbnMudG9vbHRpcFRleHQpLCBlLnRvb2x0aXBUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGkub3B0aW9ucyA9IHMocyh7fSwgaS5vcHRpb25zKSwgZSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkub3B0aW9ucy5kcm9wZG93bnMgPSBzKHt9LCBvKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5vcHRpb25zLmJ1dHRvblRleHQgPSBzKHt9LCBuKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5vcHRpb25zLnRvb2x0aXBUZXh0ID0gcyh7fSwgcikpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vcHRpb25zLmVsZW1lbnRFbmQgfHwgKGkub3B0aW9ucy5hbGxvd1JlcGljayA9ICExKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkub3B0aW9ucy5sb2NrRGF5cy5sZW5ndGggJiYgKGkub3B0aW9ucy5sb2NrRGF5cyA9IGwuRGF0ZVRpbWUuY29udmVydEFycmF5KGkub3B0aW9ucy5sb2NrRGF5cywgaS5vcHRpb25zLmxvY2tEYXlzRm9ybWF0KSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9wdGlvbnMuYm9va2VkRGF5cy5sZW5ndGggJiYgKGkub3B0aW9ucy5ib29rZWREYXlzID0gbC5EYXRlVGltZS5jb252ZXJ0QXJyYXkoaS5vcHRpb25zLmJvb2tlZERheXMsIGkub3B0aW9ucy5ib29rZWREYXlzRm9ybWF0KSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9wdGlvbnMuaGlnaGxpZ2h0ZWREYXlzLmxlbmd0aCAmJiAoaS5vcHRpb25zLmhpZ2hsaWdodGVkRGF5cyA9IGwuRGF0ZVRpbWUuY29udmVydEFycmF5KGkub3B0aW9ucy5oaWdobGlnaHRlZERheXMsIGkub3B0aW9ucy5oaWdobGlnaHRlZERheXNGb3JtYXQpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFpLm9wdGlvbnMuaG90ZWxNb2RlIHx8IFwiYm9va2VkRGF5c0luY2x1c2l2aXR5XCIgaW4gZSB8fCAoaS5vcHRpb25zLmJvb2tlZERheXNJbmNsdXNpdml0eSA9IFwiWylcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaS5vcHRpb25zLmhvdGVsTW9kZSB8fCBcImRpc2FsbG93Qm9va2VkRGF5c0luUmFuZ2VcIiBpbiBlIHx8IChpLm9wdGlvbnMuZGlzYWxsb3dCb29rZWREYXlzSW5SYW5nZSA9ICEwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFpLm9wdGlvbnMuaG90ZWxNb2RlIHx8IFwic2VsZWN0Rm9yd2FyZFwiIGluIGUgfHwgKGkub3B0aW9ucy5zZWxlY3RGb3J3YXJkID0gITApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGkucGFyc2VJbnB1dCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IGFbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gYVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5vcHRpb25zLnN0YXJ0RGF0ZSAmJiAoaS5vcHRpb25zLnNpbmdsZU1vZGUgfHwgaS5vcHRpb25zLmVuZERhdGUpICYmIChwID0gbmV3IGwuRGF0ZVRpbWUoaS5vcHRpb25zLnN0YXJ0RGF0ZSwgaS5vcHRpb25zLmZvcm1hdCwgaS5vcHRpb25zLmxhbmcpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgJiYgaS5vcHRpb25zLmVuZERhdGUgJiYgKGMgPSBuZXcgbC5EYXRlVGltZShpLm9wdGlvbnMuZW5kRGF0ZSwgaS5vcHRpb25zLmZvcm1hdCwgaS5vcHRpb25zLmxhbmcpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgaW5zdGFuY2VvZiBsLkRhdGVUaW1lICYmICFpc05hTihwLmdldFRpbWUoKSkgJiYgKGkub3B0aW9ucy5zdGFydERhdGUgPSBwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkub3B0aW9ucy5zdGFydERhdGUgJiYgYyBpbnN0YW5jZW9mIGwuRGF0ZVRpbWUgJiYgIWlzTmFOKGMuZ2V0VGltZSgpKSAmJiAoaS5vcHRpb25zLmVuZERhdGUgPSBjKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFpLm9wdGlvbnMuc2luZ2xlTW9kZSB8fCBpLm9wdGlvbnMuc3RhcnREYXRlIGluc3RhbmNlb2YgbC5EYXRlVGltZSB8fCAoaS5vcHRpb25zLnN0YXJ0RGF0ZSA9IG51bGwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vcHRpb25zLnNpbmdsZU1vZGUgfHwgKGkub3B0aW9ucy5zdGFydERhdGUgaW5zdGFuY2VvZiBsLkRhdGVUaW1lICYmIGkub3B0aW9ucy5lbmREYXRlIGluc3RhbmNlb2YgbC5EYXRlVGltZSkgfHwgKChpLm9wdGlvbnMuc3RhcnREYXRlID0gbnVsbCksIChpLm9wdGlvbnMuZW5kRGF0ZSA9IG51bGwpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaCA9IDA7IGggPCBpLm9wdGlvbnMubnVtYmVyT2ZNb250aHM7IGggKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBpLm9wdGlvbnMuc3RhcnREYXRlIGluc3RhbmNlb2YgbC5EYXRlVGltZSA/IGkub3B0aW9ucy5zdGFydERhdGUuY2xvbmUoKSA6IG5ldyBsLkRhdGVUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNldERhdGUoMSksIGQuc2V0TW9udGgoZC5nZXRNb250aCgpICsgaCksIChpLmNhbGVuZGFyc1toXSA9IGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLm9wdGlvbnMuc2hvd1Rvb2x0aXApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaS5vcHRpb25zLnRvb2x0aXBQbHVyYWxTZWxlY3RvcikgaS5wbHVyYWxTZWxlY3RvciA9IGkub3B0aW9ucy50b29sdGlwUGx1cmFsU2VsZWN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSBuZXcgSW50bC5QbHVyYWxSdWxlcyhpLm9wdGlvbnMubGFuZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkucGx1cmFsU2VsZWN0b3IgPSB1LnNlbGVjdC5iaW5kKHUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5wbHVyYWxTZWxlY3RvciA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMCA9PT0gTWF0aC5hYnModCkgPyBcIm9uZVwiIDogXCJvdGhlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkubG9hZFBvbHlmaWxsc0ZvcklFMTEoKSwgaS5vbkluaXQoKSwgaTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgbihlLCB0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGUucHJvdG90eXBlLm9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQub25DbGljayhlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgITBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnBpY2tlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnBpY2tlci5jbGFzc05hbWUgPSBwLmxpdGVwaWNrZXIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnBpY2tlci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibW91c2VlbnRlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQub25Nb3VzZUVudGVyKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZXIuYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtb3VzZWxlYXZlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5vbk1vdXNlTGVhdmUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICExXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuYXV0b1JlZnJlc2hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAodGhpcy5vcHRpb25zLmVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJrZXl1cFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5vbklucHV0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmVsZW1lbnRFbmQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuZWxlbWVudEVuZC5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJrZXl1cFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5vbklucHV0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKHRoaXMub3B0aW9ucy5lbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2hhbmdlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0Lm9uSW5wdXQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgITBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuZWxlbWVudEVuZCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5lbGVtZW50RW5kLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNoYW5nZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5vbklucHV0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5tb2R1bGVOYXZLZXlib2FyZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHRoaXMuZW5hYmxlTW9kdWxlTmF2S2V5Ym9hcmQpIHRocm93IG5ldyBFcnJvcihcIm1vZHVsZU5hdktleWJvYXJkIGlzIG9uIGJ1dCBsaWJyYXJ5IGRvZXMgbm90IGluY2x1ZGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3dha2lyaW4vbGl0ZXBpY2tlci1tb2R1bGUtbmF2a2V5Ym9hcmQuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlTW9kdWxlTmF2S2V5Ym9hcmQuY2FsbCh0aGlzLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhcmVudEVsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5vcHRpb25zLnBhcmVudEVsIGluc3RhbmNlb2YgSFRNTEVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5vcHRpb25zLnBhcmVudEVsLmFwcGVuZENoaWxkKHRoaXMucGlja2VyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMub3B0aW9ucy5wYXJlbnRFbCkuYXBwZW5kQ2hpbGQodGhpcy5waWNrZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5vcHRpb25zLmlubGluZU1vZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLm9wdGlvbnMuZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5vcHRpb25zLmVsZW1lbnQucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzLnBpY2tlcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5vcHRpb25zLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5waWNrZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnBpY2tlciksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm1vYmlsZUZyaWVuZGx5ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgodGhpcy5iYWNrZHJvcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5iYWNrZHJvcC5jbGFzc05hbWUgPSBwLmxpdGVwaWNrZXJCYWNrZHJvcCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmFja2Ryb3AuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGlkZSgpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmVsZW1lbnQgJiYgdGhpcy5vcHRpb25zLmVsZW1lbnQucGFyZW50Tm9kZSAmJiB0aGlzLm9wdGlvbnMuZWxlbWVudC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMuYmFja2Ryb3ApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9yaWVudGF0aW9uY2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYy5pc01vYmlsZSgpICYmIHQuaXNTaG93bmluZygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoYy5nZXRPcmllbnRhdGlvbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibGFuZHNjYXBlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHQub3B0aW9ucy5udW1iZXJPZk1vbnRocyA9IDIpLCAodC5vcHRpb25zLm51bWJlck9mQ29sdW1ucyA9IDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodC5vcHRpb25zLm51bWJlck9mTW9udGhzID0gMSksICh0Lm9wdGlvbnMubnVtYmVyT2ZDb2x1bW5zID0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0LnJlbmRlcigpLCAhdC5vcHRpb25zLmlubGluZU1vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQucGlja2VyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHQucGlja2VyLnN0eWxlLnRvcCA9IFwiY2FsYyg1MCUgLSBcIiArIGUuaGVpZ2h0IC8gMiArIFwicHgpXCIpLCAodC5waWNrZXIuc3R5bGUubGVmdCA9IFwiY2FsYyg1MCUgLSBcIiArIGUud2lkdGggLyAyICsgXCJweClcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuaW5saW5lTW9kZSAmJiAodGhpcy5zaG93KCksIHRoaXMub3B0aW9ucy5tb2JpbGVGcmllbmRseSAmJiBjLmlzTW9iaWxlKCkgJiYgKHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcIm9yaWVudGF0aW9uY2hhbmdlXCIpKSwgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicmVzaXplXCIpKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSW5wdXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLnByb3RvdHlwZS5wYXJzZUlucHV0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLm9wdGlvbnMuZGVsaW1pdGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBuZXcgUmVnRXhwKFwiXCIgKyB0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gdGhpcy5vcHRpb25zLmVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50ID8gdGhpcy5vcHRpb25zLmVsZW1lbnQudmFsdWUuc3BsaXQodCkgOiBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZWxlbWVudEVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgJiYgdGhpcy5vcHRpb25zLmVsZW1lbnQudmFsdWUubGVuZ3RoICYmIHRoaXMub3B0aW9ucy5lbGVtZW50RW5kIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCAmJiB0aGlzLm9wdGlvbnMuZWxlbWVudEVuZC52YWx1ZS5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbbmV3IGwuRGF0ZVRpbWUodGhpcy5vcHRpb25zLmVsZW1lbnQudmFsdWUsIHRoaXMub3B0aW9ucy5mb3JtYXQpLCBuZXcgbC5EYXRlVGltZSh0aGlzLm9wdGlvbnMuZWxlbWVudEVuZC52YWx1ZSwgdGhpcy5vcHRpb25zLmZvcm1hdCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuc2luZ2xlTW9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgJiYgdGhpcy5vcHRpb25zLmVsZW1lbnQudmFsdWUubGVuZ3RoKSByZXR1cm4gW25ldyBsLkRhdGVUaW1lKHRoaXMub3B0aW9ucy5lbGVtZW50LnZhbHVlLCB0aGlzLm9wdGlvbnMuZm9ybWF0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5lbGVtZW50IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCAmJiBlLnRlc3QodGhpcy5vcHRpb25zLmVsZW1lbnQudmFsdWUpICYmIGkubGVuZ3RoICYmIGkubGVuZ3RoICUgMiA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBpLnNsaWNlKDAsIGkubGVuZ3RoIC8gMikuam9pbih0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGkuc2xpY2UoaS5sZW5ndGggLyAyKS5qb2luKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbbmV3IGwuRGF0ZVRpbWUobywgdGhpcy5vcHRpb25zLmZvcm1hdCksIG5ldyBsLkRhdGVUaW1lKG4sIHRoaXMub3B0aW9ucy5mb3JtYXQpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLnByb3RvdHlwZS51cGRhdGVJbnB1dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpbmdsZU1vZGUgJiYgdGhpcy5vcHRpb25zLnN0YXJ0RGF0ZSkgdGhpcy5vcHRpb25zLmVsZW1lbnQudmFsdWUgPSB0aGlzLm9wdGlvbnMuc3RhcnREYXRlLmZvcm1hdCh0aGlzLm9wdGlvbnMuZm9ybWF0LCB0aGlzLm9wdGlvbnMubGFuZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMub3B0aW9ucy5zaW5nbGVNb2RlICYmIHRoaXMub3B0aW9ucy5zdGFydERhdGUgJiYgdGhpcy5vcHRpb25zLmVuZERhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLm9wdGlvbnMuc3RhcnREYXRlLmZvcm1hdCh0aGlzLm9wdGlvbnMuZm9ybWF0LCB0aGlzLm9wdGlvbnMubGFuZyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5vcHRpb25zLmVuZERhdGUuZm9ybWF0KHRoaXMub3B0aW9ucy5mb3JtYXQsIHRoaXMub3B0aW9ucy5sYW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmVsZW1lbnRFbmQgPyAoKHRoaXMub3B0aW9ucy5lbGVtZW50LnZhbHVlID0gdCksICh0aGlzLm9wdGlvbnMuZWxlbWVudEVuZC52YWx1ZSA9IGUpKSA6ICh0aGlzLm9wdGlvbnMuZWxlbWVudC52YWx1ZSA9IFwiXCIgKyB0ICsgdGhpcy5vcHRpb25zLmRlbGltaXRlciArIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc3RhcnREYXRlIHx8IHRoaXMub3B0aW9ucy5lbmREYXRlIHx8ICgodGhpcy5vcHRpb25zLmVsZW1lbnQudmFsdWUgPSBcIlwiKSwgdGhpcy5vcHRpb25zLmVsZW1lbnRFbmQgJiYgKHRoaXMub3B0aW9ucy5lbGVtZW50RW5kLnZhbHVlID0gXCJcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGUucHJvdG90eXBlLmlzU2FtZVBpY2tlciA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5jbG9zZXN0KFwiLlwiICsgcC5saXRlcGlja2VyKSA9PT0gdGhpcy5waWNrZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5wcm90b3R5cGUuc2hvdWxkU2hvd24gPSBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPT09IHRoaXMub3B0aW9ucy5lbGVtZW50IHx8ICh0aGlzLm9wdGlvbnMuZWxlbWVudEVuZCAmJiB0ID09PSB0aGlzLm9wdGlvbnMuZWxlbWVudEVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5wcm90b3R5cGUuc2hvdWxkUmVzZXREYXRlUGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5zaW5nbGVNb2RlIHx8IDIgPT09IHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5wcm90b3R5cGUuc2hvdWxkU3dhcERhdGVQaWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMiA9PT0gdGhpcy5kYXRlUGlja2VkLmxlbmd0aCAmJiB0aGlzLmRhdGVQaWNrZWRbMF0uZ2V0VGltZSgpID4gdGhpcy5kYXRlUGlja2VkWzFdLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLnByb3RvdHlwZS5zaG91bGRDaGVja0xvY2tEYXlzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5kaXNhbGxvd0xvY2tEYXlzSW5SYW5nZSAmJiB0aGlzLm9wdGlvbnMubG9ja0RheXMubGVuZ3RoICYmIDIgPT09IHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5wcm90b3R5cGUuc2hvdWxkQ2hlY2tCb29rZWREYXlzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5kaXNhbGxvd0Jvb2tlZERheXNJblJhbmdlICYmIHRoaXMub3B0aW9ucy5ib29rZWREYXlzLmxlbmd0aCAmJiAyID09PSB0aGlzLmRhdGVQaWNrZWQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGUucHJvdG90eXBlLm9uQ2xpY2sgPSBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB0LnRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpICYmIHRoaXMucGlja2VyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNob3VsZFNob3duKGkpKSB0aGlzLnNob3coaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaS5jbG9zZXN0KFwiLlwiICsgcC5saXRlcGlja2VyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaS5jbGFzc0xpc3QuY29udGFpbnMocC5kYXlJdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0LnByZXZlbnREZWZhdWx0KCksICF0aGlzLmlzU2FtZVBpY2tlcihpKSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLmNsYXNzTGlzdC5jb250YWlucyhwLmlzTG9ja2VkKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkuY2xhc3NMaXN0LmNvbnRhaW5zKHAuaXNCb29rZWQpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHRoaXMuc2hvdWxkUmVzZXREYXRlUGlja2VkKCkgJiYgKHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGggPSAwKSwgKHRoaXMuZGF0ZVBpY2tlZFt0aGlzLmRhdGVQaWNrZWQubGVuZ3RoXSA9IG5ldyBsLkRhdGVUaW1lKGkuZGF0YXNldC50aW1lKSksIHRoaXMuc2hvdWxkU3dhcERhdGVQaWNrZWQoKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHRoaXMuZGF0ZVBpY2tlZFsxXS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmRhdGVQaWNrZWRbMV0gPSB0aGlzLmRhdGVQaWNrZWRbMF0uY2xvbmUoKSksICh0aGlzLmRhdGVQaWNrZWRbMF0gPSBvLmNsb25lKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkQ2hlY2tMb2NrRGF5cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzLm9wdGlvbnMubG9ja0RheXNJbmNsdXNpdml0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMubG9ja0RheXMuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgQXJyYXkgPyB0WzBdLmlzQmV0d2VlbihlLmRhdGVQaWNrZWRbMF0sIGUuZGF0ZVBpY2tlZFsxXSwgbikgfHwgdFsxXS5pc0JldHdlZW4oZS5kYXRlUGlja2VkWzBdLCBlLmRhdGVQaWNrZWRbMV0sIG4pIDogdC5pc0JldHdlZW4oZS5kYXRlUGlja2VkWzBdLCBlLmRhdGVQaWNrZWRbMV0sIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmxlbmd0aCAmJiAoKHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGggPSAwKSwgXCJmdW5jdGlvblwiID09IHR5cGVvZiB0aGlzLm9wdGlvbnMub25FcnJvciAmJiB0aGlzLm9wdGlvbnMub25FcnJvci5jYWxsKHRoaXMsIFwiSU5WQUxJRF9SQU5HRVwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG91bGRDaGVja0Jvb2tlZERheXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcy5vcHRpb25zLmJvb2tlZERheXNJbmNsdXNpdml0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuaG90ZWxNb2RlICYmIDIgPT09IHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGggJiYgKHMgPSBcIigpXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy5vcHRpb25zLmJvb2tlZERheXMuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIEFycmF5ID8gdFswXS5pc0JldHdlZW4oZS5kYXRlUGlja2VkWzBdLCBlLmRhdGVQaWNrZWRbMV0sIHMpIHx8IHRbMV0uaXNCZXR3ZWVuKGUuZGF0ZVBpY2tlZFswXSwgZS5kYXRlUGlja2VkWzFdLCBzKSA6IHQuaXNCZXR3ZWVuKGUuZGF0ZVBpY2tlZFswXSwgZS5kYXRlUGlja2VkWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gdGhpcy5vcHRpb25zLmFueUJvb2tlZERheXNBc0NoZWNrb3V0ICYmIDEgPT09IHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciAmJiAhYSAmJiAoKHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGggPSAwKSwgXCJmdW5jdGlvblwiID09IHR5cGVvZiB0aGlzLm9wdGlvbnMub25FcnJvciAmJiB0aGlzLm9wdGlvbnMub25FcnJvci5jYWxsKHRoaXMsIFwiSU5WQUxJRF9SQU5HRVwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5hdXRvQXBwbHkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMub3B0aW9ucy5zaW5nbGVNb2RlICYmIHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKHRoaXMuc2V0RGF0ZSh0aGlzLmRhdGVQaWNrZWRbMF0pLCB0aGlzLmhpZGUoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5vcHRpb25zLnNpbmdsZU1vZGUgfHwgMiAhPT0gdGhpcy5kYXRlUGlja2VkLmxlbmd0aCB8fCAodGhpcy5zZXREYXRlUmFuZ2UodGhpcy5kYXRlUGlja2VkWzBdLCB0aGlzLmRhdGVQaWNrZWRbMV0pLCB0aGlzLmhpZGUoKSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaS5jbGFzc0xpc3QuY29udGFpbnMocC5idXR0b25QcmV2aW91c01vbnRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0LnByZXZlbnREZWZhdWx0KCksICF0aGlzLmlzU2FtZVBpY2tlcihpKSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoID0gMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gdGhpcy5vcHRpb25zLm1vdmVCeU9uZU1vbnRoID8gMSA6IHRoaXMub3B0aW9ucy5udW1iZXJPZk1vbnRocztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3BsaXRWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSBpLmNsb3Nlc3QoXCIuXCIgKyBwLm1vbnRoSXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGggPSBjLmZpbmROZXN0ZWRNb250aEl0ZW0odSkpLCAoZCA9IDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyc1toXS5zZXRNb250aCh0aGlzLmNhbGVuZGFyc1toXS5nZXRNb250aCgpIC0gZCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nb3RvRGF0ZSh0aGlzLmNhbGVuZGFyc1toXSwgaCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAoXCJmdW5jdGlvblwiID09IHR5cGVvZiB0aGlzLm9wdGlvbnMub25DaGFuZ2VNb250aCAmJiB0aGlzLm9wdGlvbnMub25DaGFuZ2VNb250aC5jYWxsKHRoaXMsIHRoaXMuY2FsZW5kYXJzW2hdLCBoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkuY2xhc3NMaXN0LmNvbnRhaW5zKHAuYnV0dG9uTmV4dE1vbnRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0LnByZXZlbnREZWZhdWx0KCksICF0aGlzLmlzU2FtZVBpY2tlcihpKSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoID0gMCksIChkID0gdGhpcy5vcHRpb25zLm1vdmVCeU9uZU1vbnRoID8gMSA6IHRoaXMub3B0aW9ucy5udW1iZXJPZk1vbnRocyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNwbGl0Vmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBpLmNsb3Nlc3QoXCIuXCIgKyBwLm1vbnRoSXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGggPSBjLmZpbmROZXN0ZWRNb250aEl0ZW0odSkpLCAoZCA9IDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyc1toXS5zZXRNb250aCh0aGlzLmNhbGVuZGFyc1toXS5nZXRNb250aCgpICsgZCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nb3RvRGF0ZSh0aGlzLmNhbGVuZGFyc1toXSwgaCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAoXCJmdW5jdGlvblwiID09IHR5cGVvZiB0aGlzLm9wdGlvbnMub25DaGFuZ2VNb250aCAmJiB0aGlzLm9wdGlvbnMub25DaGFuZ2VNb250aC5jYWxsKHRoaXMsIHRoaXMuY2FsZW5kYXJzW2hdLCBoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkuY2xhc3NMaXN0LmNvbnRhaW5zKHAuYnV0dG9uQ2FuY2VsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0LnByZXZlbnREZWZhdWx0KCksICF0aGlzLmlzU2FtZVBpY2tlcihpKSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLmNsYXNzTGlzdC5jb250YWlucyhwLmJ1dHRvbkFwcGx5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0LnByZXZlbnREZWZhdWx0KCksICF0aGlzLmlzU2FtZVBpY2tlcihpKSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zaW5nbGVNb2RlICYmIHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuc2V0RGF0ZSh0aGlzLmRhdGVQaWNrZWRbMF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLm9wdGlvbnMuc2luZ2xlTW9kZSB8fCAyICE9PSB0aGlzLmRhdGVQaWNrZWQubGVuZ3RoIHx8IHRoaXMuc2V0RGF0ZVJhbmdlKHRoaXMuZGF0ZVBpY2tlZFswXSwgdGhpcy5kYXRlUGlja2VkWzFdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLnByb3RvdHlwZS5zaG93VG9vbHRpcCA9IGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMucGlja2VyLnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBwLmNvbnRhaW5lclRvb2x0aXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiKSwgKGkuaW5uZXJIVE1MID0gZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHRoaXMucGlja2VyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSB0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBzLnRvcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gcy5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbmxpbmVNb2RlICYmIHRoaXMub3B0aW9ucy5wYXJlbnRFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gdGhpcy5waWNrZXIucGFyZW50Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAociAtPSBsLnRvcCksIChhIC09IGwubGVmdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgKHIgLT0gby50b3ApLCAoYSAtPSBvLmxlZnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHIgLT0gbi5oZWlnaHQpLCAoYSAtPSBuLndpZHRoIC8gMiksIChhICs9IHMud2lkdGggLyAyKSwgKGkuc3R5bGUudG9wID0gciArIFwicHhcIiksIChpLnN0eWxlLmxlZnQgPSBhICsgXCJweFwiKSwgXCJmdW5jdGlvblwiID09IHR5cGVvZiB0aGlzLm9wdGlvbnMub25TaG93VG9vbHRpcCAmJiB0aGlzLm9wdGlvbnMub25TaG93VG9vbHRpcC5jYWxsKHRoaXMsIGksIHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGUucHJvdG90eXBlLmhpZGVUb29sdGlwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZXIucXVlcnlTZWxlY3RvcihcIi5cIiArIHAuY29udGFpbmVyVG9vbHRpcCkuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5wcm90b3R5cGUuc2hvdWxkQWxsb3dNb3VzZUVudGVyID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5vcHRpb25zLnNpbmdsZU1vZGUgJiYgIXQuY2xhc3NMaXN0LmNvbnRhaW5zKHAuaXNMb2NrZWQpICYmICF0LmNsYXNzTGlzdC5jb250YWlucyhwLmlzQm9va2VkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLnByb3RvdHlwZS5zaG91bGRBbGxvd1JlcGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZWxlbWVudEVuZCAmJiB0aGlzLm9wdGlvbnMuYWxsb3dSZXBpY2sgJiYgdGhpcy5vcHRpb25zLnN0YXJ0RGF0ZSAmJiB0aGlzLm9wdGlvbnMuZW5kRGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLnByb3RvdHlwZS5pc0RheUl0ZW0gPSBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuY2xhc3NMaXN0LmNvbnRhaW5zKHAuZGF5SXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5wcm90b3R5cGUub25Nb3VzZUVudGVyID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gdC50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0RheUl0ZW0oaSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCJmdW5jdGlvblwiID09IHR5cGVvZiB0aGlzLm9wdGlvbnMub25EYXlIb3ZlciAmJiB0aGlzLm9wdGlvbnMub25EYXlIb3Zlci5jYWxsKHRoaXMsIGwuRGF0ZVRpbWUucGFyc2VEYXRlVGltZShpLmRhdGFzZXQudGltZSksIGkuY2xhc3NMaXN0LnRvU3RyaW5nKCkuc3BsaXQoL1xccy8pLCBpKSwgdGhpcy5zaG91bGRBbGxvd01vdXNlRW50ZXIoaSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnNob3VsZEFsbG93UmVwaWNrKCkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnRyaWdnZXJFbGVtZW50ID09PSB0aGlzLm9wdGlvbnMuZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKHRoaXMuZGF0ZVBpY2tlZFswXSA9IHRoaXMub3B0aW9ucy5lbmREYXRlLmNsb25lKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnRyaWdnZXJFbGVtZW50ID09PSB0aGlzLm9wdGlvbnMuZWxlbWVudEVuZCAmJiAodGhpcy5kYXRlUGlja2VkWzBdID0gdGhpcy5vcHRpb25zLnN0YXJ0RGF0ZS5jbG9uZSgpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgIT09IHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSB0aGlzLnBpY2tlci5xdWVyeVNlbGVjdG9yKFwiLlwiICsgcC5kYXlJdGVtICsgJ1tkYXRhLXRpbWU9XCInICsgdGhpcy5kYXRlUGlja2VkWzBdLmdldFRpbWUoKSArICdcIl0nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHRoaXMuZGF0ZVBpY2tlZFswXS5jbG9uZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gbmV3IGwuRGF0ZVRpbWUoaS5kYXRhc2V0LnRpbWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4uZ2V0VGltZSgpID4gcy5nZXRUaW1lKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBuLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChuID0gcy5jbG9uZSgpKSwgKHMgPSBhLmNsb25lKCkpLCAociA9ICEwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5waWNrZXIucXVlcnlTZWxlY3RvckFsbChcIi5cIiArIHAuZGF5SXRlbSkpLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gbmV3IGwuRGF0ZVRpbWUodC5kYXRhc2V0LnRpbWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBlLnJlbmRlckRheShpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuaXNCZXR3ZWVuKG4sIHMpICYmIG8uY2xhc3NMaXN0LmFkZChwLmlzSW5SYW5nZSksICh0LmNsYXNzTmFtZSA9IG8uY2xhc3NOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuY2xhc3NMaXN0LmFkZChwLmlzRW5kRGF0ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPyAobyAmJiBvLmNsYXNzTGlzdC5hZGQocC5pc0ZsaXBwZWQpLCBpLmNsYXNzTGlzdC5hZGQocC5pc0ZsaXBwZWQpKSA6IChvICYmIG8uY2xhc3NMaXN0LnJlbW92ZShwLmlzRmxpcHBlZCksIGkuY2xhc3NMaXN0LnJlbW92ZShwLmlzRmxpcHBlZCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2hvd1Rvb2x0aXApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gcy5kaWZmKG4sIFwiZGF5XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHRoaXMub3B0aW9ucy5ob3RlbE1vZGUgfHwgKGMgKz0gMSksIGMgPiAwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSB0aGlzLnBsdXJhbFNlbGVjdG9yKGMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBjICsgXCIgXCIgKyAodGhpcy5vcHRpb25zLnRvb2x0aXBUZXh0W2hdID8gdGhpcy5vcHRpb25zLnRvb2x0aXBUZXh0W2hdIDogXCJbXCIgKyBoICsgXCJdXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93VG9vbHRpcChpLCBkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHRoaXMuaGlkZVRvb2x0aXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5wcm90b3R5cGUub25Nb3VzZUxlYXZlID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQudGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmFsbG93UmVwaWNrICYmICghdGhpcy5vcHRpb25zLmFsbG93UmVwaWNrIHx8IHRoaXMub3B0aW9ucy5zdGFydERhdGUgfHwgdGhpcy5vcHRpb25zLmVuZERhdGUpICYmICgodGhpcy5kYXRlUGlja2VkLmxlbmd0aCA9IDApLCB0aGlzLnJlbmRlcigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLnByb3RvdHlwZS5vbklucHV0ID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5wYXJzZUlucHV0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGVbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IGVbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHRoaXMub3B0aW9ucy5mb3JtYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmVsZW1lbnRFbmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpIGluc3RhbmNlb2YgbC5EYXRlVGltZSAmJiBvIGluc3RhbmNlb2YgbC5EYXRlVGltZSAmJiBpLmZvcm1hdChuKSA9PT0gdGhpcy5vcHRpb25zLmVsZW1lbnQudmFsdWUgJiYgby5mb3JtYXQobikgPT09IHRoaXMub3B0aW9ucy5lbGVtZW50RW5kLnZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5vcHRpb25zLnNpbmdsZU1vZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpIGluc3RhbmNlb2YgbC5EYXRlVGltZSAmJiBpLmZvcm1hdChuKSA9PT0gdGhpcy5vcHRpb25zLmVsZW1lbnQudmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpIGluc3RhbmNlb2YgbC5EYXRlVGltZSAmJiBvIGluc3RhbmNlb2YgbC5EYXRlVGltZSAmJiBcIlwiICsgaS5mb3JtYXQobikgKyB0aGlzLm9wdGlvbnMuZGVsaW1pdGVyICsgby5mb3JtYXQobikgPT09IHRoaXMub3B0aW9ucy5lbGVtZW50LnZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobyAmJiBpLmdldFRpbWUoKSA+IG8uZ2V0VGltZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gaS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaSA9IG8uY2xvbmUoKSksIChvID0gcy5jbG9uZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMub3B0aW9ucy5zdGFydERhdGUgPSBuZXcgbC5EYXRlVGltZShpLCB0aGlzLm9wdGlvbnMuZm9ybWF0LCB0aGlzLm9wdGlvbnMubGFuZykpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvICYmICh0aGlzLm9wdGlvbnMuZW5kRGF0ZSA9IG5ldyBsLkRhdGVUaW1lKG8sIHRoaXMub3B0aW9ucy5mb3JtYXQsIHRoaXMub3B0aW9ucy5sYW5nKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSW5wdXQoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGkuY2xvbmUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMub3B0aW9ucy5lbGVtZW50RW5kID8gaS5mb3JtYXQobikgPT09IHQudGFyZ2V0LnZhbHVlIDogdC50YXJnZXQudmFsdWUuc3RhcnRzV2l0aChpLmZvcm1hdChuKSkpIHx8ICgociA9IG8uY2xvbmUoKSksIChhID0gdGhpcy5vcHRpb25zLm51bWJlck9mTW9udGhzIC0gMSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRoaXMub3B0aW9ucy5vblNlbGVjdCAmJiB0aGlzLm9wdGlvbnMub25TZWxlY3QuY2FsbCh0aGlzLCB0aGlzLmdldFN0YXJ0RGF0ZSgpLCB0aGlzLmdldEVuZERhdGUoKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ290b0RhdGUociwgYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5wcm90b3R5cGUuaXNTaG93bmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBpY2tlciAmJiBcIm5vbmVcIiAhPT0gdGhpcy5waWNrZXIuc3R5bGUuZGlzcGxheTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLnByb3RvdHlwZS5sb2FkUG9seWZpbGxzRm9ySUUxMSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKE9iamVjdC5lbnRyaWVzID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IE9iamVjdC5rZXlzKHQpLCBpID0gZS5sZW5ndGgsIG8gPSBuZXcgQXJyYXkoaSk7IGk7ICkgb1soaSAtPSAxKV0gPSBbZVtpXSwgdFtlW2ldXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgfHwgKEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgPSBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3IpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgPSBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLm1hdGNoZXModCkpIHJldHVybiBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBlLnBhcmVudEVsZW1lbnQgfHwgZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAobnVsbCAhPT0gZSAmJiAxID09PSBlLm5vZGVUeXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSkoYS5DYWxlbmRhcik7XHJcbiAgICAgICAgICAgIGUuTGl0ZXBpY2tlciA9IGg7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KTtcclxuICAgICAgICAgICAgdmFyIG8gPSBpKDMpO1xyXG4gICAgICAgICAgICAoZS5MaXRlcGlja2VyID0gby5MaXRlcGlja2VyKSwgaSg5KSwgaSgxMCksICh3aW5kb3cuTGl0ZXBpY2tlciA9IG8uTGl0ZXBpY2tlciksIChlLmRlZmF1bHQgPSBvLkxpdGVwaWNrZXIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgICAgIHZhciBvID1cclxuICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiB0Ll9fZXNNb2R1bGUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT0gdCkgZm9yICh2YXIgaSBpbiB0KSBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0LCBpKSAmJiAoZVtpXSA9IHRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoZS5kZWZhdWx0ID0gdCksIGU7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pO1xyXG4gICAgICAgICAgICB2YXIgbiA9IGkoMCksXHJcbiAgICAgICAgICAgICAgICBzID0gbyhpKDEpKSxcclxuICAgICAgICAgICAgICAgIHIgPSBpKDIpLFxyXG4gICAgICAgICAgICAgICAgYSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdCgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMub3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50RW5kOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50RWw6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdERheTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogXCJZWVlZLU1NLUREXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5nOiBcImVuLVVTXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxpbWl0ZXI6IFwiIC0gXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXJPZk1vbnRoczogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlck9mQ29sdW1uczogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IDk5OTksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5EYXRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4RGF0ZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkRheXM6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhEYXlzOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0Rm9yd2FyZDogITEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RCYWNrd2FyZDogITEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGxpdFZpZXc6ICExLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lTW9kZTogITEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW5nbGVNb2RlOiAhMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9BcHBseTogITAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd1JlcGljazogITEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93V2Vla051bWJlcnM6ICExLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1Rvb2x0aXA6ICEwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG90ZWxNb2RlOiAhMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVXZWVrZW5kczogITEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb0RhdGU6ICEwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9iaWxlRnJpZW5kbHk6ICEwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlUmVzZXRCdG46ICExLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b1JlZnJlc2g6ICExLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92ZUJ5T25lTW9udGg6ICExLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9ja0RheXNGb3JtYXQ6IFwiWVlZWS1NTS1ERFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9ja0RheXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWxsb3dMb2NrRGF5c0luUmFuZ2U6ICExLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9ja0RheXNJbmNsdXNpdml0eTogXCJbXVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va2VkRGF5c0Zvcm1hdDogXCJZWVlZLU1NLUREXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29rZWREYXlzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FsbG93Qm9va2VkRGF5c0luUmFuZ2U6ICExLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9va2VkRGF5c0luY2x1c2l2aXR5OiBcIltdXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnlCb29rZWREYXlzQXNDaGVja291dDogITEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRlZERheXNGb3JtYXQ6IFwiWVlZWS1NTS1ERFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0ZWREYXlzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duczogeyBtaW5ZZWFyOiAxOTkwLCBtYXhZZWFyOiBudWxsLCBtb250aHM6ICExLCB5ZWFyczogITEgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblRleHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBseTogXCJBcHBseVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbDogXCJDYW5jZWxcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c01vbnRoOiAnPHN2ZyB3aWR0aD1cIjExXCIgaGVpZ2h0PVwiMTZcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk03LjkxOSAwbDIuNzQ4IDIuNjY3TDUuMzMzIDhsNS4zMzQgNS4zMzNMNy45MTkgMTYgMCA4elwiIGZpbGwtcnVsZT1cIm5vbnplcm9cIi8+PC9zdmc+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0TW9udGg6ICc8c3ZnIHdpZHRoPVwiMTFcIiBoZWlnaHQ9XCIxNlwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTIuNzQ4IDE2TDAgMTMuMzMzIDUuMzMzIDggMCAyLjY2NyAyLjc0OCAwbDcuOTE5IDh6XCIgZmlsbC1ydWxlPVwibm9uemVyb1wiLz48L3N2Zz4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgd2lkdGg9XCIyNFwiPlxcbiAgICAgICAgPHBhdGggZD1cIk0wIDBoMjR2MjRIMHpcIiBmaWxsPVwibm9uZVwiLz5cXG4gICAgICAgIDxwYXRoIGQ9XCJNMTMgM2MtNC45NyAwLTkgNC4wMy05IDlIMWwzLjg5IDMuODkuMDcuMTRMOSAxMkg2YzAtMy44NyAzLjEzLTcgNy03czcgMy4xMyA3IDctMy4xMyA3LTcgN2MtMS45MyAwLTMuNjgtLjc5LTQuOTQtMi4wNmwtMS40MiAxLjQyQzguMjcgMTkuOTkgMTAuNTEgMjEgMTMgMjFjNC45NyAwIDktNC4wMyA5LTlzLTQuMDMtOS05LTl6bS0xIDV2NWw0LjI4IDIuNTQuNzItMS4yMS0zLjUtMi4wOFY4SDEyelwiLz5cXG4gICAgICA8L3N2Zz4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBUZXh0OiB7IG9uZTogXCJqb3VyXCIsIG90aGVyOiBcImpvdXJzXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBQbHVyYWxTZWxlY3RvcjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2hvdzogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uSGlkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVuZGVyOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25SZW5kZXJEYXk6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZU1vbnRoOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2VZZWFyOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EYXlIb3ZlcjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2hvd1Rvb2x0aXA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldEJ0bkNhbGxiYWNrOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlUmFuZ2VzOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmF2S2V5Ym9hcmQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuY2FsZW5kYXJzID0gW10pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGF0ZVBpY2tlZCA9IFtdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY2xhc3NOYW1lID0gcy5jb250YWluZXJNYWluO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkuY2xhc3NOYW1lID0gcy5jb250YWluZXJNb250aHMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNbXCJjb2x1bW5zXCIgKyB0aGlzLm9wdGlvbnMubnVtYmVyT2ZDb2x1bW5zXSAmJiAoaS5jbGFzc0xpc3QucmVtb3ZlKHMuY29sdW1uczIsIHMuY29sdW1uczMsIHMuY29sdW1uczQpLCBpLmNsYXNzTGlzdC5hZGQoc1tcImNvbHVtbnNcIiArIHRoaXMub3B0aW9ucy5udW1iZXJPZkNvbHVtbnNdKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNwbGl0VmlldyAmJiBpLmNsYXNzTGlzdC5hZGQocy5zcGxpdFZpZXcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zaG93V2Vla051bWJlcnMgJiYgaS5jbGFzc0xpc3QuYWRkKHMuc2hvd1dlZWtOdW1iZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG8gPSB0aGlzLmNhbGVuZGFyc1swXS5jbG9uZSgpLCBuID0gby5nZXRNb250aCgpLCByID0gby5nZXRNb250aCgpICsgdGhpcy5vcHRpb25zLm51bWJlck9mTW9udGhzLCBhID0gMCwgbCA9IG47IGwgPCByOyBsICs9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IG8uY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLnNldERhdGUoMSksIHRoaXMub3B0aW9ucy5zcGxpdFZpZXcgPyAocCA9IHRoaXMuY2FsZW5kYXJzW2FdLmNsb25lKCkpIDogcC5zZXRNb250aChsKSwgaS5hcHBlbmRDaGlsZCh0aGlzLnJlbmRlck1vbnRoKHApKSwgKGEgKz0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCh0aGlzLnBpY2tlci5pbm5lckhUTUwgPSBcIlwiKSwgZS5hcHBlbmRDaGlsZChpKSwgdGhpcy5vcHRpb25zLnVzZVJlc2V0QnRuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMuaHJlZiA9IFwiI1wiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMuY2xhc3NOYW1lID0gcy5yZXNldEJ1dHRvbiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLmlubmVySFRNTCA9IHRoaXMub3B0aW9ucy5idXR0b25UZXh0LnJlc2V0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKSwgdC5jbGVhclNlbGVjdGlvbigpLCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQub3B0aW9ucy5yZXNldEJ0bkNhbGxiYWNrICYmIHQub3B0aW9ucy5yZXNldEJ0bkNhbGxiYWNrLmNhbGwodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3RvcihcIi5cIiArIHMubW9udGhJdGVtICsgXCI6bGFzdC1jaGlsZFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBzLm1vbnRoSXRlbUhlYWRlcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRDaGlsZChjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5waWNrZXIuYXBwZW5kQ2hpbGQoZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMub3B0aW9ucy5hdXRvQXBwbHkgJiYgIXRoaXMub3B0aW9ucy5mb290ZXJIVE1MKSB8fCB0aGlzLnBpY2tlci5hcHBlbmRDaGlsZCh0aGlzLnJlbmRlckZvb3RlcigpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2hvd1Rvb2x0aXAgJiYgdGhpcy5waWNrZXIuYXBwZW5kQ2hpbGQodGhpcy5yZW5kZXJUb29sdGlwKCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5tb2R1bGVSYW5nZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0aGlzLmVuYWJsZU1vZHVsZVJhbmdlcykgdGhyb3cgbmV3IEVycm9yKFwibW9kdWxlUmFuZ2VzIGlzIG9uIGJ1dCBsaWJyYXJ5IGRvZXMgbm90IGluY2x1ZGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3dha2lyaW4vbGl0ZXBpY2tlci1tb2R1bGUtcmFuZ2VzLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZU1vZHVsZVJhbmdlcy5jYWxsKHRoaXMsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiB0aGlzLm9wdGlvbnMub25SZW5kZXIgJiYgdGhpcy5vcHRpb25zLm9uUmVuZGVyLmNhbGwodGhpcywgdGhpcy5waWNrZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHQucHJvdG90eXBlLnJlbmRlck1vbnRoID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gdC5jbG9uZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSAzMiAtIG5ldyBEYXRlKGkuZ2V0RnVsbFllYXIoKSwgaS5nZXRNb250aCgpLCAzMikuZ2V0RGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5jbGFzc05hbWUgPSBzLm1vbnRoSXRlbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwuY2xhc3NOYW1lID0gcy5tb250aEl0ZW1IZWFkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRyb3Bkb3ducy5tb250aHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5jbGFzc05hbWUgPSBzLm1vbnRoSXRlbU5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaCA9IDA7IGggPCAxMjsgaCArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBuZXcgbi5EYXRlVGltZShuZXcgRGF0ZSh0LmdldEZ1bGxZZWFyKCksIGgsIDEsIDAsIDAsIDApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGQudmFsdWUgPSBTdHJpbmcoaCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGQudGV4dCA9IHUudG9Mb2NhbGVTdHJpbmcodGhpcy5vcHRpb25zLmxhbmcsIHsgbW9udGg6IFwibG9uZ1wiIH0pKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkLmRpc2FibGVkID0gKHRoaXMub3B0aW9ucy5taW5EYXRlICYmIHUuaXNCZWZvcmUobmV3IG4uRGF0ZVRpbWUodGhpcy5vcHRpb25zLm1pbkRhdGUpLCBcIm1vbnRoXCIpKSB8fCAodGhpcy5vcHRpb25zLm1heERhdGUgJiYgdS5pc0FmdGVyKG5ldyBuLkRhdGVUaW1lKHRoaXMub3B0aW9ucy5tYXhEYXRlKSwgXCJtb250aFwiKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGQuc2VsZWN0ZWQgPSB1LmdldE1vbnRoKCkgPT09IHQuZ2V0TW9udGgoKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmFwcGVuZENoaWxkKGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0LnRhcmdldCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5vcHRpb25zLnNwbGl0Vmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBpLmNsb3Nlc3QoXCIuXCIgKyBzLm1vbnRoSXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gci5maW5kTmVzdGVkTW9udGhJdGVtKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY2FsZW5kYXJzW29dLnNldE1vbnRoKE51bWJlcihpLnZhbHVlKSksIGUucmVuZGVyKCksIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZS5vcHRpb25zLm9uQ2hhbmdlTW9udGggJiYgZS5vcHRpb25zLm9uQ2hhbmdlTW9udGguY2FsbChlLCBlLmNhbGVuZGFyc1tvXSwgbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuYXBwZW5kQ2hpbGQoYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0cm9uZ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobS5jbGFzc05hbWUgPSBzLm1vbnRoSXRlbU5hbWUpLCAobS5pbm5lckhUTUwgPSB0LnRvTG9jYWxlU3RyaW5nKHRoaXMub3B0aW9ucy5sYW5nLCB7IG1vbnRoOiBcImxvbmdcIiB9KSksIHAuYXBwZW5kQ2hpbGQobSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRyb3Bkb3ducy55ZWFycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLmNsYXNzTmFtZSA9IHMubW9udGhJdGVtWWVhcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZyA9IHRoaXMub3B0aW9ucy5kcm9wZG93bnMubWluWWVhcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IHRoaXMub3B0aW9ucy5kcm9wZG93bnMubWF4WWVhciA/IHRoaXMub3B0aW9ucy5kcm9wZG93bnMubWF4WWVhciA6IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5nZXRGdWxsWWVhcigpID4geSkgKChkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKSkudmFsdWUgPSBTdHJpbmcodC5nZXRGdWxsWWVhcigpKSksIChkLnRleHQgPSBTdHJpbmcodC5nZXRGdWxsWWVhcigpKSksIChkLnNlbGVjdGVkID0gITApLCAoZC5kaXNhYmxlZCA9ICEwKSwgZi5hcHBlbmRDaGlsZChkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGggPSB5OyBoID49IGc7IGggLT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrID0gbmV3IG4uRGF0ZVRpbWUobmV3IERhdGUoaCwgMCwgMSwgMCwgMCwgMCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZC52YWx1ZSA9IGgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGQudGV4dCA9IGgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGQuZGlzYWJsZWQgPSAodGhpcy5vcHRpb25zLm1pbkRhdGUgJiYgay5pc0JlZm9yZShuZXcgbi5EYXRlVGltZSh0aGlzLm9wdGlvbnMubWluRGF0ZSksIFwieWVhclwiKSkgfHwgKHRoaXMub3B0aW9ucy5tYXhEYXRlICYmIGsuaXNBZnRlcihuZXcgbi5EYXRlVGltZSh0aGlzLm9wdGlvbnMubWF4RGF0ZSksIFwieWVhclwiKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGQuc2VsZWN0ZWQgPSB0LmdldEZ1bGxZZWFyKCkgPT09IGgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5hcHBlbmRDaGlsZChkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuZ2V0RnVsbFllYXIoKSA8IGcpICgoZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpLnZhbHVlID0gU3RyaW5nKHQuZ2V0RnVsbFllYXIoKSkpLCAoZC50ZXh0ID0gU3RyaW5nKHQuZ2V0RnVsbFllYXIoKSkpLCAoZC5zZWxlY3RlZCA9ICEwKSwgKGQuZGlzYWJsZWQgPSAhMCksIGYuYXBwZW5kQ2hpbGQoZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiYXNjXCIgPT09IHRoaXMub3B0aW9ucy5kcm9wZG93bnMueWVhcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmLmNoaWxkTm9kZXMpLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGYuaW5uZXJIVE1MID0gXCJcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LmZvckVhY2goZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodC5pbm5lckhUTUwgPSB0LnZhbHVlKSwgZi5hcHBlbmRDaGlsZCh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0LnRhcmdldCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5vcHRpb25zLnNwbGl0Vmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBpLmNsb3Nlc3QoXCIuXCIgKyBzLm1vbnRoSXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gci5maW5kTmVzdGVkTW9udGhJdGVtKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY2FsZW5kYXJzW29dLnNldEZ1bGxZZWFyKE51bWJlcihpLnZhbHVlKSksIGUucmVuZGVyKCksIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZS5vcHRpb25zLm9uQ2hhbmdlWWVhciAmJiBlLm9wdGlvbnMub25DaGFuZ2VZZWFyLmNhbGwoZSwgZS5jYWxlbmRhcnNbb10sIG8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmFwcGVuZENoaWxkKGYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgRCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChELmNsYXNzTmFtZSA9IHMubW9udGhJdGVtWWVhciksIChELmlubmVySFRNTCA9IFN0cmluZyh0LmdldEZ1bGxZZWFyKCkpKSwgcC5hcHBlbmRDaGlsZChEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYi5ocmVmID0gXCIjXCIpLCAoYi5jbGFzc05hbWUgPSBzLmJ1dHRvblByZXZpb3VzTW9udGgpLCAoYi5pbm5lckhUTUwgPSB0aGlzLm9wdGlvbnMuYnV0dG9uVGV4dC5wcmV2aW91c01vbnRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAody5ocmVmID0gXCIjXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh3LmNsYXNzTmFtZSA9IHMuYnV0dG9uTmV4dE1vbnRoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAody5pbm5lckhUTUwgPSB0aGlzLm9wdGlvbnMuYnV0dG9uVGV4dC5uZXh0TW9udGgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwuYXBwZW5kQ2hpbGQoYiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5hcHBlbmRDaGlsZChwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsLmFwcGVuZENoaWxkKHcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5taW5EYXRlICYmIGkuaXNTYW1lT3JCZWZvcmUobmV3IG4uRGF0ZVRpbWUodGhpcy5vcHRpb25zLm1pbkRhdGUpLCBcIm1vbnRoXCIpICYmIGEuY2xhc3NMaXN0LmFkZChzLm5vUHJldmlvdXNNb250aCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm1heERhdGUgJiYgaS5pc1NhbWVPckFmdGVyKG5ldyBuLkRhdGVUaW1lKHRoaXMub3B0aW9ucy5tYXhEYXRlKSwgXCJtb250aFwiKSAmJiBhLmNsYXNzTGlzdC5hZGQocy5ub05leHRNb250aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgTSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoTS5jbGFzc05hbWUgPSBzLm1vbnRoSXRlbVdlZWtkYXlzUm93KSwgdGhpcy5vcHRpb25zLnNob3dXZWVrTnVtYmVycyAmJiAoTS5pbm5lckhUTUwgPSBcIjxkaXY+VzwvZGl2PlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAxOyB4IDw9IDc7IHggKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBUID0gMyArIHRoaXMub3B0aW9ucy5maXJzdERheSArIHgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfLmlubmVySFRNTCA9IHRoaXMud2Vla2RheU5hbWUoVCkpLCAoXy50aXRsZSA9IHRoaXMud2Vla2RheU5hbWUoVCwgXCJsb25nXCIpKSwgTS5hcHBlbmRDaGlsZChfKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBMID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEwuY2xhc3NOYW1lID0gcy5jb250YWluZXJEYXlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFMgPSB0aGlzLmNhbGNTa2lwRGF5cyhpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zaG93V2Vla051bWJlcnMgJiYgUyAmJiBMLmFwcGVuZENoaWxkKHRoaXMucmVuZGVyV2Vla051bWJlcihpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBFID0gMDsgRSA8IFM7IEUgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBJID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMLmFwcGVuZENoaWxkKEkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChFID0gMTsgRSA8PSBvOyBFICs9IDEpIGkuc2V0RGF0ZShFKSwgdGhpcy5vcHRpb25zLnNob3dXZWVrTnVtYmVycyAmJiBpLmdldERheSgpID09PSB0aGlzLm9wdGlvbnMuZmlyc3REYXkgJiYgTC5hcHBlbmRDaGlsZCh0aGlzLnJlbmRlcldlZWtOdW1iZXIoaSkpLCBMLmFwcGVuZENoaWxkKHRoaXMucmVuZGVyRGF5KGkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmFwcGVuZENoaWxkKGwpLCBhLmFwcGVuZENoaWxkKE0pLCBhLmFwcGVuZENoaWxkKEwpLCBhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHQucHJvdG90eXBlLnJlbmRlckRheSA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldEhvdXJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoaS5ocmVmID0gXCIjXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLmNsYXNzTmFtZSA9IHMuZGF5SXRlbSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkuaW5uZXJIVE1MID0gU3RyaW5nKHQuZ2V0RGF0ZSgpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkuZGF0YXNldC50aW1lID0gU3RyaW5nKHQuZ2V0VGltZSgpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC50b0RhdGVTdHJpbmcoKSA9PT0gbmV3IERhdGUoKS50b0RhdGVTdHJpbmcoKSAmJiBpLmNsYXNzTGlzdC5hZGQocy5pc1RvZGF5KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGVQaWNrZWQubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKHRoaXMuZGF0ZVBpY2tlZFswXS50b0RhdGVTdHJpbmcoKSA9PT0gdC50b0RhdGVTdHJpbmcoKSAmJiAoaS5jbGFzc0xpc3QuYWRkKHMuaXNTdGFydERhdGUpLCB0aGlzLm9wdGlvbnMuc2luZ2xlTW9kZSAmJiBpLmNsYXNzTGlzdC5hZGQocy5pc0VuZERhdGUpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyID09PSB0aGlzLmRhdGVQaWNrZWQubGVuZ3RoICYmIHRoaXMuZGF0ZVBpY2tlZFsxXS50b0RhdGVTdHJpbmcoKSA9PT0gdC50b0RhdGVTdHJpbmcoKSAmJiBpLmNsYXNzTGlzdC5hZGQocy5pc0VuZERhdGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgPT09IHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGggJiYgdC5pc0JldHdlZW4odGhpcy5kYXRlUGlja2VkWzBdLCB0aGlzLmRhdGVQaWNrZWRbMV0pICYmIGkuY2xhc3NMaXN0LmFkZChzLmlzSW5SYW5nZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5vcHRpb25zLnN0YXJ0RGF0ZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLm9wdGlvbnMuc3RhcnREYXRlLnRvRGF0ZVN0cmluZygpID09PSB0LnRvRGF0ZVN0cmluZygpICYmIChpLmNsYXNzTGlzdC5hZGQocy5pc1N0YXJ0RGF0ZSksIHRoaXMub3B0aW9ucy5zaW5nbGVNb2RlICYmIGkuY2xhc3NMaXN0LmFkZChzLmlzRW5kRGF0ZSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5lbmREYXRlICYmIHRoaXMub3B0aW9ucy5lbmREYXRlLnRvRGF0ZVN0cmluZygpID09PSB0LnRvRGF0ZVN0cmluZygpICYmIGkuY2xhc3NMaXN0LmFkZChzLmlzRW5kRGF0ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnN0YXJ0RGF0ZSAmJiB0aGlzLm9wdGlvbnMuZW5kRGF0ZSAmJiB0LmlzQmV0d2Vlbih0aGlzLm9wdGlvbnMuc3RhcnREYXRlLCB0aGlzLm9wdGlvbnMuZW5kRGF0ZSkgJiYgaS5jbGFzc0xpc3QuYWRkKHMuaXNJblJhbmdlKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm1pbkRhdGUgJiYgdC5pc0JlZm9yZShuZXcgbi5EYXRlVGltZSh0aGlzLm9wdGlvbnMubWluRGF0ZSkpICYmIGkuY2xhc3NMaXN0LmFkZChzLmlzTG9ja2VkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMubWF4RGF0ZSAmJiB0LmlzQWZ0ZXIobmV3IG4uRGF0ZVRpbWUodGhpcy5vcHRpb25zLm1heERhdGUpKSAmJiBpLmNsYXNzTGlzdC5hZGQocy5pc0xvY2tlZCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm1pbkRheXMgJiYgMSA9PT0gdGhpcy5kYXRlUGlja2VkLmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gTnVtYmVyKCF0aGlzLm9wdGlvbnMuaG90ZWxNb2RlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IHRoaXMuZGF0ZVBpY2tlZFswXS5jbG9uZSgpLnN1YnRyYWN0KHRoaXMub3B0aW9ucy5taW5EYXlzIC0gbywgXCJkYXlcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSB0aGlzLmRhdGVQaWNrZWRbMF0uY2xvbmUoKS5hZGQodGhpcy5vcHRpb25zLm1pbkRheXMgLSBvLCBcImRheVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmlzQmV0d2VlbihyLCB0aGlzLmRhdGVQaWNrZWRbMF0sIFwiKF1cIikgJiYgaS5jbGFzc0xpc3QuYWRkKHMuaXNMb2NrZWQpLCB0LmlzQmV0d2Vlbih0aGlzLmRhdGVQaWNrZWRbMF0sIGEsIFwiWylcIikgJiYgaS5jbGFzc0xpc3QuYWRkKHMuaXNMb2NrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXhEYXlzICYmIDEgPT09IHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobyA9IE51bWJlcih0aGlzLm9wdGlvbnMuaG90ZWxNb2RlKSksIChyID0gdGhpcy5kYXRlUGlja2VkWzBdLmNsb25lKCkuc3VidHJhY3QodGhpcy5vcHRpb25zLm1heERheXMgKyBvLCBcImRheVwiKSksIChhID0gdGhpcy5kYXRlUGlja2VkWzBdLmNsb25lKCkuYWRkKHRoaXMub3B0aW9ucy5tYXhEYXlzICsgbywgXCJkYXlcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuaXNTYW1lT3JCZWZvcmUocikgJiYgaS5jbGFzc0xpc3QuYWRkKHMuaXNMb2NrZWQpLCB0LmlzU2FtZU9yQWZ0ZXIoYSkgJiYgaS5jbGFzc0xpc3QuYWRkKHMuaXNMb2NrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMub3B0aW9ucy5zZWxlY3RGb3J3YXJkICYmIDEgPT09IHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGggJiYgdC5pc0JlZm9yZSh0aGlzLmRhdGVQaWNrZWRbMF0pICYmIGkuY2xhc3NMaXN0LmFkZChzLmlzTG9ja2VkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zZWxlY3RCYWNrd2FyZCAmJiAxID09PSB0aGlzLmRhdGVQaWNrZWQubGVuZ3RoICYmIHQuaXNBZnRlcih0aGlzLmRhdGVQaWNrZWRbMF0pICYmIGkuY2xhc3NMaXN0LmFkZChzLmlzTG9ja2VkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5sb2NrRGF5cy5sZW5ndGgpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmxvY2tEYXlzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSBpbnN0YW5jZW9mIEFycmF5ID8gdC5pc0JldHdlZW4oaVswXSwgaVsxXSwgZS5vcHRpb25zLmxvY2tEYXlzSW5jbHVzaXZpdHkpIDogaS5pc1NhbWUodCwgXCJkYXlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5jbGFzc0xpc3QuYWRkKHMuaXNMb2NrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmhpZ2hsaWdodGVkRGF5cy5sZW5ndGggJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0ZWREYXlzLmZpbHRlcihmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIEFycmF5ID8gdC5pc0JldHdlZW4oZVswXSwgZVsxXSwgXCJbXVwiKSA6IGUuaXNTYW1lKHQsIFwiZGF5XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuY2xhc3NMaXN0LmFkZChzLmlzSGlnaGxpZ2h0ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGggPD0gMSAmJiB0aGlzLm9wdGlvbnMuYm9va2VkRGF5cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IHRoaXMub3B0aW9ucy5ib29rZWREYXlzSW5jbHVzaXZpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmhvdGVsTW9kZSAmJiAxID09PSB0aGlzLmRhdGVQaWNrZWQubGVuZ3RoICYmIChsID0gXCIoKVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IHQuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLnN1YnRyYWN0KDEsIFwiZGF5XCIpLCB0LmNsb25lKCkuYWRkKDEsIFwiZGF5XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gdGhpcy5kYXRlSXNCb29rZWQodCwgbCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSB0aGlzLmRhdGVJc0Jvb2tlZChwLCBcIltdXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gdGhpcy5kYXRlSXNCb29rZWQodCwgXCIoXVwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9ICgwID09PSB0aGlzLmRhdGVQaWNrZWQubGVuZ3RoICYmIGMpIHx8ICgxID09PSB0aGlzLmRhdGVQaWNrZWQubGVuZ3RoICYmIGggJiYgYykgfHwgKDEgPT09IHRoaXMuZGF0ZVBpY2tlZC5sZW5ndGggJiYgaCAmJiBkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSA9IHRoaXMub3B0aW9ucy5hbnlCb29rZWREYXlzQXNDaGVja291dCAmJiAxID09PSB0aGlzLmRhdGVQaWNrZWQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgJiYgIW0gJiYgaS5jbGFzc0xpc3QuYWRkKHMuaXNCb29rZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLm9wdGlvbnMuZGlzYWJsZVdlZWtlbmRzIHx8ICg2ICE9PSB0LmdldERheSgpICYmIDAgIT09IHQuZ2V0RGF5KCkpIHx8IGkuY2xhc3NMaXN0LmFkZChzLmlzTG9ja2VkKSwgXCJmdW5jdGlvblwiID09IHR5cGVvZiB0aGlzLm9wdGlvbnMub25SZW5kZXJEYXkgJiYgdGhpcy5vcHRpb25zLm9uUmVuZGVyRGF5LmNhbGwodGhpcywgaSksIGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAodC5wcm90b3R5cGUucmVuZGVyRm9vdGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgodC5jbGFzc05hbWUgPSBzLmNvbnRhaW5lckZvb3RlciksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmZvb3RlckhUTUxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAodC5pbm5lckhUTUwgPSB0aGlzLm9wdGlvbnMuZm9vdGVySFRNTClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAodC5pbm5lckhUTUwgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXFxuICAgICAgPHNwYW4gY2xhc3M9XCInICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5wcmV2aWV3RGF0ZVJhbmdlICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiPjwvc3Bhbj5cXG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLmJ1dHRvbkNhbmNlbCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmJ1dHRvblRleHQuY2FuY2VsICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPlxcbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuYnV0dG9uQXBwbHkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5idXR0b25UZXh0LmFwcGx5ICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI8L2J1dHRvbj5cXG4gICAgICBcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNpbmdsZU1vZGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoMSA9PT0gdGhpcy5kYXRlUGlja2VkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuZGF0ZVBpY2tlZFswXS5mb3JtYXQodGhpcy5vcHRpb25zLmZvcm1hdCwgdGhpcy5vcHRpb25zLmxhbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBzLnByZXZpZXdEYXRlUmFuZ2UpLmlubmVySFRNTCA9IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoMSA9PT0gdGhpcy5kYXRlUGlja2VkLmxlbmd0aCAmJiB0LnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBzLmJ1dHRvbkFwcGx5KS5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcIlwiKSwgMiA9PT0gdGhpcy5kYXRlUGlja2VkLmxlbmd0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5kYXRlUGlja2VkWzBdLmZvcm1hdCh0aGlzLm9wdGlvbnMuZm9ybWF0LCB0aGlzLm9wdGlvbnMubGFuZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmRhdGVQaWNrZWRbMV0uZm9ybWF0KHRoaXMub3B0aW9ucy5mb3JtYXQsIHRoaXMub3B0aW9ucy5sYW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBzLnByZXZpZXdEYXRlUmFuZ2UpLmlubmVySFRNTCA9IFwiXCIgKyBlICsgdGhpcy5vcHRpb25zLmRlbGltaXRlciArIGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0LnByb3RvdHlwZS5yZW5kZXJXZWVrTnVtYmVyID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gdC5nZXRXZWVrKHRoaXMub3B0aW9ucy5maXJzdERheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGUuY2xhc3NOYW1lID0gcy53ZWVrTnVtYmVyKSwgKGUuaW5uZXJIVE1MID0gNTMgPT09IGkgJiYgMCA9PT0gdC5nZXRNb250aCgpID8gXCI1MyAvIDFcIiA6IGkpLCBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHQucHJvdG90eXBlLnJlbmRlclRvb2x0aXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHQuY2xhc3NOYW1lID0gcy5jb250YWluZXJUb29sdGlwKSwgdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0LnByb3RvdHlwZS5kYXRlSXNCb29rZWQgPSBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5ib29rZWREYXlzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpIGluc3RhbmNlb2YgQXJyYXkgPyB0LmlzQmV0d2VlbihpWzBdLCBpWzFdLCBlKSA6IGkuaXNTYW1lKHQsIFwiZGF5XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHQucHJvdG90eXBlLndlZWtkYXlOYW1lID0gZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IGUgJiYgKGUgPSBcInNob3J0XCIpLCBuZXcgRGF0ZSgxOTcwLCAwLCB0LCAxMiwgMCwgMCwgMCkudG9Mb2NhbGVTdHJpbmcodGhpcy5vcHRpb25zLmxhbmcsIHsgd2Vla2RheTogZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0LnByb3RvdHlwZS5jYWxjU2tpcERheXMgPSBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0LmdldERheSgpIC0gdGhpcy5vcHRpb25zLmZpcnN0RGF5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPCAwICYmIChlICs9IDcpLCBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9KSgpO1xyXG4gICAgICAgICAgICBlLkNhbGVuZGFyID0gYTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIChlID0gdC5leHBvcnRzID0gaSg3KSghMSkpLnB1c2goW1xyXG4gICAgICAgICAgICAgICAgdC5pLFxyXG4gICAgICAgICAgICAgICAgJzpyb290ey0tbGl0ZXBpY2tlckJnQ29sb3I6ICNmZmY7LS1saXRlcGlja2VyTW9udGhIZWFkZXJUZXh0Q29sb3I6ICMzMzM7LS1saXRlcGlja2VyTW9udGhCdXR0b246ICM5ZTllOWU7LS1saXRlcGlja2VyTW9udGhCdXR0b25Ib3ZlcjogIzIxOTZmMzstLWxpdGVwaWNrZXJNb250aFdpZHRoOiBjYWxjKHZhcigtLWxpdGVwaWNrZXJEYXlXaWR0aCkgKiA3KTstLWxpdGVwaWNrZXJNb250aFdlZWtkYXlDb2xvcjogIzllOWU5ZTstLWxpdGVwaWNrZXJEYXlDb2xvcjogIzMzMzstLWxpdGVwaWNrZXJEYXlDb2xvckhvdmVyOiAjMjE5NmYzOy0tbGl0ZXBpY2tlckRheUlzVG9kYXlDb2xvcjogI2Y0NDMzNjstLWxpdGVwaWNrZXJEYXlJc0luUmFuZ2U6ICNiYmRlZmI7LS1saXRlcGlja2VyRGF5SXNMb2NrZWRDb2xvcjogIzllOWU5ZTstLWxpdGVwaWNrZXJEYXlJc0Jvb2tlZENvbG9yOiAjOWU5ZTllOy0tbGl0ZXBpY2tlckRheUlzU3RhcnRDb2xvcjogI2ZmZjstLWxpdGVwaWNrZXJEYXlJc1N0YXJ0Qmc6ICMyMTk2ZjM7LS1saXRlcGlja2VyRGF5SXNFbmRDb2xvcjogI2ZmZjstLWxpdGVwaWNrZXJEYXlJc0VuZEJnOiAjMjE5NmYzOy0tbGl0ZXBpY2tlckRheVdpZHRoOiAzOHB4Oy0tbGl0ZXBpY2tlckJ1dHRvbkNhbmNlbENvbG9yOiAjZmZmOy0tbGl0ZXBpY2tlckJ1dHRvbkNhbmNlbEJnOiAjOWU5ZTllOy0tbGl0ZXBpY2tlckJ1dHRvbkFwcGx5Q29sb3I6ICNmZmY7LS1saXRlcGlja2VyQnV0dG9uQXBwbHlCZzogIzIxOTZmMzstLWxpdGVwaWNrZXJCdXR0b25SZXNldEJ0bjogIzkwOTA5MDstLWxpdGVwaWNrZXJCdXR0b25SZXNldEJ0bkhvdmVyOiAjMjE5NmYzOy0tbGl0ZXBpY2tlckhpZ2hsaWdodGVkRGF5Q29sb3I6ICMzMzM7LS1saXRlcGlja2VySGlnaGxpZ2h0ZWREYXlCZzogI2ZmZWIzYn0uc2hvdy13ZWVrLW51bWJlcnN7LS1saXRlcGlja2VyTW9udGhXaWR0aDogY2FsYyh2YXIoLS1saXRlcGlja2VyRGF5V2lkdGgpICogOCl9LmxpdGVwaWNrZXJ7Zm9udC1mYW1pbHk6LWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcIlNlZ29lIFVJXCIsIFJvYm90bywgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBBcmlhbCwgc2Fucy1zZXJpZjtmb250LXNpemU6MC44ZW07ZGlzcGxheTpub25lfS5saXRlcGlja2VyIC5jb250YWluZXJfX21haW57ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleH0ubGl0ZXBpY2tlciAuY29udGFpbmVyX19tb250aHN7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC13cmFwOndyYXA7ZmxleC13cmFwOndyYXA7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1saXRlcGlja2VyQmdDb2xvcik7Ym9yZGVyLXJhZGl1czo1cHg7LXdlYmtpdC1ib3gtc2hhZG93OjAgMCA1cHggI2RkZDtib3gtc2hhZG93OjAgMCA1cHggI2RkZDt3aWR0aDpjYWxjKHZhcigtLWxpdGVwaWNrZXJNb250aFdpZHRoKSArIDEwcHgpOy13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94fS5saXRlcGlja2VyIC5jb250YWluZXJfX21vbnRocy5jb2x1bW5zLTJ7d2lkdGg6Y2FsYygodmFyKC0tbGl0ZXBpY2tlck1vbnRoV2lkdGgpICogMikgKyAyMHB4KX0ubGl0ZXBpY2tlciAuY29udGFpbmVyX19tb250aHMuY29sdW1ucy0ze3dpZHRoOmNhbGMoKHZhcigtLWxpdGVwaWNrZXJNb250aFdpZHRoKSAqIDMpICsgMzBweCl9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fbW9udGhzLmNvbHVtbnMtNHt3aWR0aDpjYWxjKCh2YXIoLS1saXRlcGlja2VyTW9udGhXaWR0aCkgKiA0KSArIDQwcHgpfS5saXRlcGlja2VyIC5jb250YWluZXJfX21vbnRocy5zcGxpdC12aWV3IC5tb250aC1pdGVtLWhlYWRlciAuYnV0dG9uLXByZXZpb3VzLW1vbnRoLC5saXRlcGlja2VyIC5jb250YWluZXJfX21vbnRocy5zcGxpdC12aWV3IC5tb250aC1pdGVtLWhlYWRlciAuYnV0dG9uLW5leHQtbW9udGh7dmlzaWJpbGl0eTp2aXNpYmxlfS5saXRlcGlja2VyIC5jb250YWluZXJfX21vbnRocyAubW9udGgtaXRlbXtwYWRkaW5nOjVweDt3aWR0aDp2YXIoLS1saXRlcGlja2VyTW9udGhXaWR0aCk7LXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3h9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fbW9udGhzIC5tb250aC1pdGVtLWhlYWRlcntkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47Zm9udC13ZWlnaHQ6NTAwO3BhZGRpbmc6MTBweCA1cHg7dGV4dC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Y29sb3I6dmFyKC0tbGl0ZXBpY2tlck1vbnRoSGVhZGVyVGV4dENvbG9yKX0ubGl0ZXBpY2tlciAuY29udGFpbmVyX19tb250aHMgLm1vbnRoLWl0ZW0taGVhZGVyIGRpdnstd2Via2l0LWJveC1mbGV4OjE7LW1zLWZsZXg6MTtmbGV4OjF9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fbW9udGhzIC5tb250aC1pdGVtLWhlYWRlciBkaXY+Lm1vbnRoLWl0ZW0tbmFtZXttYXJnaW4tcmlnaHQ6NXB4fS5saXRlcGlja2VyIC5jb250YWluZXJfX21vbnRocyAubW9udGgtaXRlbS1oZWFkZXIgZGl2Pi5tb250aC1pdGVtLXllYXJ7cGFkZGluZzowfS5saXRlcGlja2VyIC5jb250YWluZXJfX21vbnRocyAubW9udGgtaXRlbS1oZWFkZXIgLnJlc2V0LWJ1dHRvbntjb2xvcjp2YXIoLS1saXRlcGlja2VyQnV0dG9uUmVzZXRCdG4pfS5saXRlcGlja2VyIC5jb250YWluZXJfX21vbnRocyAubW9udGgtaXRlbS1oZWFkZXIgLnJlc2V0LWJ1dHRvbj5zdmcsLmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fbW9udGhzIC5tb250aC1pdGVtLWhlYWRlciAucmVzZXQtYnV0dG9uPmltZ3tmaWxsOnZhcigtLWxpdGVwaWNrZXJCdXR0b25SZXNldEJ0bik7cG9pbnRlci1ldmVudHM6bm9uZX0ubGl0ZXBpY2tlciAuY29udGFpbmVyX19tb250aHMgLm1vbnRoLWl0ZW0taGVhZGVyIC5yZXNldC1idXR0b246aG92ZXJ7Y29sb3I6dmFyKC0tbGl0ZXBpY2tlckJ1dHRvblJlc2V0QnRuSG92ZXIpfS5saXRlcGlja2VyIC5jb250YWluZXJfX21vbnRocyAubW9udGgtaXRlbS1oZWFkZXIgLnJlc2V0LWJ1dHRvbjpob3Zlcj5zdmd7ZmlsbDp2YXIoLS1saXRlcGlja2VyQnV0dG9uUmVzZXRCdG5Ib3Zlcil9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fbW9udGhzIC5tb250aC1pdGVtLWhlYWRlciAuYnV0dG9uLXByZXZpb3VzLW1vbnRoLC5saXRlcGlja2VyIC5jb250YWluZXJfX21vbnRocyAubW9udGgtaXRlbS1oZWFkZXIgLmJ1dHRvbi1uZXh0LW1vbnRoe3Zpc2liaWxpdHk6aGlkZGVuO3RleHQtZGVjb3JhdGlvbjpub25lO2NvbG9yOnZhcigtLWxpdGVwaWNrZXJNb250aEJ1dHRvbik7cGFkZGluZzozcHggNXB4O2JvcmRlci1yYWRpdXM6M3B4Oy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAwLjNzLCBib3JkZXIgMC4zczt0cmFuc2l0aW9uOmNvbG9yIDAuM3MsIGJvcmRlciAwLjNzO2N1cnNvcjpkZWZhdWx0fS5saXRlcGlja2VyIC5jb250YWluZXJfX21vbnRocyAubW9udGgtaXRlbS1oZWFkZXIgLmJ1dHRvbi1wcmV2aW91cy1tb250aD5zdmcsLmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fbW9udGhzIC5tb250aC1pdGVtLWhlYWRlciAuYnV0dG9uLXByZXZpb3VzLW1vbnRoPmltZywubGl0ZXBpY2tlciAuY29udGFpbmVyX19tb250aHMgLm1vbnRoLWl0ZW0taGVhZGVyIC5idXR0b24tbmV4dC1tb250aD5zdmcsLmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fbW9udGhzIC5tb250aC1pdGVtLWhlYWRlciAuYnV0dG9uLW5leHQtbW9udGg+aW1ne2ZpbGw6dmFyKC0tbGl0ZXBpY2tlck1vbnRoQnV0dG9uKTtwb2ludGVyLWV2ZW50czpub25lfS5saXRlcGlja2VyIC5jb250YWluZXJfX21vbnRocyAubW9udGgtaXRlbS1oZWFkZXIgLmJ1dHRvbi1wcmV2aW91cy1tb250aDpob3ZlciwubGl0ZXBpY2tlciAuY29udGFpbmVyX19tb250aHMgLm1vbnRoLWl0ZW0taGVhZGVyIC5idXR0b24tbmV4dC1tb250aDpob3Zlcntjb2xvcjp2YXIoLS1saXRlcGlja2VyTW9udGhCdXR0b25Ib3Zlcil9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fbW9udGhzIC5tb250aC1pdGVtLWhlYWRlciAuYnV0dG9uLXByZXZpb3VzLW1vbnRoOmhvdmVyPnN2ZywubGl0ZXBpY2tlciAuY29udGFpbmVyX19tb250aHMgLm1vbnRoLWl0ZW0taGVhZGVyIC5idXR0b24tbmV4dC1tb250aDpob3Zlcj5zdmd7ZmlsbDp2YXIoLS1saXRlcGlja2VyTW9udGhCdXR0b25Ib3Zlcil9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fbW9udGhzIC5tb250aC1pdGVtLXdlZWtkYXlzLXJvd3tkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O2p1c3RpZnktc2VsZjpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpzdGFydDstbXMtZmxleC1wYWNrOnN0YXJ0O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O2NvbG9yOnZhcigtLWxpdGVwaWNrZXJNb250aFdlZWtkYXlDb2xvcil9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fbW9udGhzIC5tb250aC1pdGVtLXdlZWtkYXlzLXJvdz5kaXZ7cGFkZGluZzo1cHggMDtmb250LXNpemU6ODUlOy13ZWJraXQtYm94LWZsZXg6MTstbXMtZmxleDoxO2ZsZXg6MTt3aWR0aDp2YXIoLS1saXRlcGlja2VyRGF5V2lkdGgpO3RleHQtYWxpZ246Y2VudGVyfS5saXRlcGlja2VyIC5jb250YWluZXJfX21vbnRocyAubW9udGgtaXRlbTpmaXJzdC1jaGlsZCAuYnV0dG9uLXByZXZpb3VzLW1vbnRoe3Zpc2liaWxpdHk6dmlzaWJsZX0ubGl0ZXBpY2tlciAuY29udGFpbmVyX19tb250aHMgLm1vbnRoLWl0ZW06bGFzdC1jaGlsZCAuYnV0dG9uLW5leHQtbW9udGh7dmlzaWJpbGl0eTp2aXNpYmxlfS5saXRlcGlja2VyIC5jb250YWluZXJfX21vbnRocyAubW9udGgtaXRlbS5uby1wcmV2aW91cy1tb250aCAuYnV0dG9uLXByZXZpb3VzLW1vbnRoe3Zpc2liaWxpdHk6aGlkZGVufS5saXRlcGlja2VyIC5jb250YWluZXJfX21vbnRocyAubW9udGgtaXRlbS5uby1uZXh0LW1vbnRoIC5idXR0b24tbmV4dC1tb250aHt2aXNpYmlsaXR5OmhpZGRlbn0ubGl0ZXBpY2tlciAuY29udGFpbmVyX19kYXlze2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwO2p1c3RpZnktc2VsZjpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpzdGFydDstbXMtZmxleC1wYWNrOnN0YXJ0O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O3RleHQtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94fS5saXRlcGlja2VyIC5jb250YWluZXJfX2RheXM+ZGl2LC5saXRlcGlja2VyIC5jb250YWluZXJfX2RheXM+YXtwYWRkaW5nOjVweCAwO3dpZHRoOnZhcigtLWxpdGVwaWNrZXJEYXlXaWR0aCl9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fZGF5cyAuZGF5LWl0ZW17Y29sb3I6dmFyKC0tbGl0ZXBpY2tlckRheUNvbG9yKTt0ZXh0LWFsaWduOmNlbnRlcjt0ZXh0LWRlY29yYXRpb246bm9uZTtib3JkZXItcmFkaXVzOjNweDstd2Via2l0LXRyYW5zaXRpb246Y29sb3IgMC4zcywgYm9yZGVyIDAuM3M7dHJhbnNpdGlvbjpjb2xvciAwLjNzLCBib3JkZXIgMC4zcztjdXJzb3I6ZGVmYXVsdH0ubGl0ZXBpY2tlciAuY29udGFpbmVyX19kYXlzIC5kYXktaXRlbTpob3Zlcntjb2xvcjp2YXIoLS1saXRlcGlja2VyRGF5Q29sb3JIb3Zlcik7LXdlYmtpdC1ib3gtc2hhZG93Omluc2V0IDAgMCAwIDFweCB2YXIoLS1saXRlcGlja2VyRGF5Q29sb3JIb3Zlcik7Ym94LXNoYWRvdzppbnNldCAwIDAgMCAxcHggdmFyKC0tbGl0ZXBpY2tlckRheUNvbG9ySG92ZXIpfS5saXRlcGlja2VyIC5jb250YWluZXJfX2RheXMgLmRheS1pdGVtLmlzLXRvZGF5e2NvbG9yOnZhcigtLWxpdGVwaWNrZXJEYXlJc1RvZGF5Q29sb3IpfS5saXRlcGlja2VyIC5jb250YWluZXJfX2RheXMgLmRheS1pdGVtLmlzLWxvY2tlZHtjb2xvcjp2YXIoLS1saXRlcGlja2VyRGF5SXNMb2NrZWRDb2xvcil9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fZGF5cyAuZGF5LWl0ZW0uaXMtbG9ja2VkOmhvdmVye2NvbG9yOnZhcigtLWxpdGVwaWNrZXJEYXlJc0xvY2tlZENvbG9yKTstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtib3gtc2hhZG93Om5vbmU7Y3Vyc29yOmRlZmF1bHR9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fZGF5cyAuZGF5LWl0ZW0uaXMtYm9va2Vke2NvbG9yOnZhcigtLWxpdGVwaWNrZXJEYXlJc0Jvb2tlZENvbG9yKX0ubGl0ZXBpY2tlciAuY29udGFpbmVyX19kYXlzIC5kYXktaXRlbS5pcy1ib29rZWQ6aG92ZXJ7Y29sb3I6dmFyKC0tbGl0ZXBpY2tlckRheUlzQm9va2VkQ29sb3IpOy13ZWJraXQtYm94LXNoYWRvdzpub25lO2JveC1zaGFkb3c6bm9uZTtjdXJzb3I6ZGVmYXVsdH0ubGl0ZXBpY2tlciAuY29udGFpbmVyX19kYXlzIC5kYXktaXRlbS5pcy1pbi1yYW5nZXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWxpdGVwaWNrZXJEYXlJc0luUmFuZ2UpO2JvcmRlci1yYWRpdXM6MH0ubGl0ZXBpY2tlciAuY29udGFpbmVyX19kYXlzIC5kYXktaXRlbS5pcy1zdGFydC1kYXRle2NvbG9yOnZhcigtLWxpdGVwaWNrZXJEYXlJc1N0YXJ0Q29sb3IpO2JhY2tncm91bmQtY29sb3I6dmFyKC0tbGl0ZXBpY2tlckRheUlzU3RhcnRCZyk7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czo1cHg7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czo1cHg7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6MDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czowfS5saXRlcGlja2VyIC5jb250YWluZXJfX2RheXMgLmRheS1pdGVtLmlzLXN0YXJ0LWRhdGUuaXMtZmxpcHBlZHtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjA7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czowO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjVweDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czo1cHh9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fZGF5cyAuZGF5LWl0ZW0uaXMtZW5kLWRhdGV7Y29sb3I6dmFyKC0tbGl0ZXBpY2tlckRheUlzRW5kQ29sb3IpO2JhY2tncm91bmQtY29sb3I6dmFyKC0tbGl0ZXBpY2tlckRheUlzRW5kQmcpO2JvcmRlci10b3AtbGVmdC1yYWRpdXM6MDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjA7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6NXB4O2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjVweH0ubGl0ZXBpY2tlciAuY29udGFpbmVyX19kYXlzIC5kYXktaXRlbS5pcy1lbmQtZGF0ZS5pcy1mbGlwcGVke2JvcmRlci10b3AtbGVmdC1yYWRpdXM6NXB4O2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6NXB4O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjA7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MH0ubGl0ZXBpY2tlciAuY29udGFpbmVyX19kYXlzIC5kYXktaXRlbS5pcy1zdGFydC1kYXRlLmlzLWVuZC1kYXRle2JvcmRlci10b3AtbGVmdC1yYWRpdXM6NXB4O2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6NXB4O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjVweDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czo1cHh9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fZGF5cyAuZGF5LWl0ZW0uaXMtaGlnaGxpZ2h0ZWR7Y29sb3I6dmFyKC0tbGl0ZXBpY2tlckhpZ2hsaWdodGVkRGF5Q29sb3IpO2JhY2tncm91bmQtY29sb3I6dmFyKC0tbGl0ZXBpY2tlckhpZ2hsaWdodGVkRGF5QmcpfS5saXRlcGlja2VyIC5jb250YWluZXJfX2RheXMgLndlZWstbnVtYmVye2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtjb2xvcjojOWU5ZTllO2ZvbnQtc2l6ZTo4NSV9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fZm9vdGVye3RleHQtYWxpZ246cmlnaHQ7cGFkZGluZzoxMHB4IDVweDttYXJnaW46MCA1cHg7YmFja2dyb3VuZC1jb2xvcjojZmFmYWZhOy13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwcHggM3B4IDNweCAwcHggI2RkZDtib3gtc2hhZG93Omluc2V0IDBweCAzcHggM3B4IDBweCAjZGRkO2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6NXB4O2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjVweH0ubGl0ZXBpY2tlciAuY29udGFpbmVyX19mb290ZXIgLnByZXZpZXctZGF0ZS1yYW5nZXttYXJnaW4tcmlnaHQ6MTBweDtmb250LXNpemU6OTAlfS5saXRlcGlja2VyIC5jb250YWluZXJfX2Zvb3RlciAuYnV0dG9uLWNhbmNlbHtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWxpdGVwaWNrZXJCdXR0b25DYW5jZWxCZyk7Y29sb3I6dmFyKC0tbGl0ZXBpY2tlckJ1dHRvbkNhbmNlbENvbG9yKTtib3JkZXI6MDtwYWRkaW5nOjNweCA3cHggNHB4O2JvcmRlci1yYWRpdXM6M3B4fS5saXRlcGlja2VyIC5jb250YWluZXJfX2Zvb3RlciAuYnV0dG9uLWNhbmNlbD5zdmcsLmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fZm9vdGVyIC5idXR0b24tY2FuY2VsPmltZ3twb2ludGVyLWV2ZW50czpub25lfS5saXRlcGlja2VyIC5jb250YWluZXJfX2Zvb3RlciAuYnV0dG9uLWFwcGx5e2JhY2tncm91bmQtY29sb3I6dmFyKC0tbGl0ZXBpY2tlckJ1dHRvbkFwcGx5QmcpO2NvbG9yOnZhcigtLWxpdGVwaWNrZXJCdXR0b25BcHBseUNvbG9yKTtib3JkZXI6MDtwYWRkaW5nOjNweCA3cHggNHB4O2JvcmRlci1yYWRpdXM6M3B4O21hcmdpbi1sZWZ0OjEwcHg7bWFyZ2luLXJpZ2h0OjEwcHh9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fZm9vdGVyIC5idXR0b24tYXBwbHk6ZGlzYWJsZWR7b3BhY2l0eTowLjd9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fZm9vdGVyIC5idXR0b24tYXBwbHk+c3ZnLC5saXRlcGlja2VyIC5jb250YWluZXJfX2Zvb3RlciAuYnV0dG9uLWFwcGx5PmltZ3twb2ludGVyLWV2ZW50czpub25lfS5saXRlcGlja2VyIC5jb250YWluZXJfX3Rvb2x0aXB7cG9zaXRpb246YWJzb2x1dGU7bWFyZ2luLXRvcDotNHB4O3BhZGRpbmc6NHB4IDhweDtib3JkZXItcmFkaXVzOjRweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7LXdlYmtpdC1ib3gtc2hhZG93OjAgMXB4IDNweCByZ2JhKDAsMCwwLDAuMjUpO2JveC1zaGFkb3c6MCAxcHggM3B4IHJnYmEoMCwwLDAsMC4yNSk7d2hpdGUtc3BhY2U6bm93cmFwO2ZvbnQtc2l6ZToxMXB4O3BvaW50ZXItZXZlbnRzOm5vbmU7dmlzaWJpbGl0eTpoaWRkZW59LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fdG9vbHRpcDpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOi01cHg7bGVmdDpjYWxjKDUwJSAtIDVweCk7Ym9yZGVyLXRvcDo1cHggc29saWQgcmdiYSgwLDAsMCwwLjEyKTtib3JkZXItcmlnaHQ6NXB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1sZWZ0OjVweCBzb2xpZCB0cmFuc3BhcmVudDtjb250ZW50OlwiXCJ9LmxpdGVwaWNrZXIgLmNvbnRhaW5lcl9fdG9vbHRpcDphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206LTRweDtsZWZ0OmNhbGMoNTAlIC0gNHB4KTtib3JkZXItdG9wOjRweCBzb2xpZCAjZmZmO2JvcmRlci1yaWdodDo0cHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLWxlZnQ6NHB4IHNvbGlkIHRyYW5zcGFyZW50O2NvbnRlbnQ6XCJcIn0ubGl0ZXBpY2tlci1vcGVue292ZXJmbG93OmhpZGRlbn0ubGl0ZXBpY2tlci1iYWNrZHJvcHtkaXNwbGF5Om5vbmU7YmFja2dyb3VuZC1jb2xvcjojMDAwO29wYWNpdHk6MC4zO3Bvc2l0aW9uOmZpeGVkO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowfVxcbicsXHJcbiAgICAgICAgICAgICAgICBcIlwiLFxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgIChlLmxvY2FscyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93V2Vla051bWJlcnM6IFwic2hvdy13ZWVrLW51bWJlcnNcIixcclxuICAgICAgICAgICAgICAgICAgICBsaXRlcGlja2VyOiBcImxpdGVwaWNrZXJcIixcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJNYWluOiBcImNvbnRhaW5lcl9fbWFpblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lck1vbnRoczogXCJjb250YWluZXJfX21vbnRoc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnMyOiBcImNvbHVtbnMtMlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnMzOiBcImNvbHVtbnMtM1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnM0OiBcImNvbHVtbnMtNFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHNwbGl0VmlldzogXCJzcGxpdC12aWV3XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbW9udGhJdGVtSGVhZGVyOiBcIm1vbnRoLWl0ZW0taGVhZGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uUHJldmlvdXNNb250aDogXCJidXR0b24tcHJldmlvdXMtbW9udGhcIixcclxuICAgICAgICAgICAgICAgICAgICBidXR0b25OZXh0TW9udGg6IFwiYnV0dG9uLW5leHQtbW9udGhcIixcclxuICAgICAgICAgICAgICAgICAgICBtb250aEl0ZW06IFwibW9udGgtaXRlbVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoSXRlbU5hbWU6IFwibW9udGgtaXRlbS1uYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbW9udGhJdGVtWWVhcjogXCJtb250aC1pdGVtLXllYXJcIixcclxuICAgICAgICAgICAgICAgICAgICByZXNldEJ1dHRvbjogXCJyZXNldC1idXR0b25cIixcclxuICAgICAgICAgICAgICAgICAgICBtb250aEl0ZW1XZWVrZGF5c1JvdzogXCJtb250aC1pdGVtLXdlZWtkYXlzLXJvd1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIG5vUHJldmlvdXNNb250aDogXCJuby1wcmV2aW91cy1tb250aFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIG5vTmV4dE1vbnRoOiBcIm5vLW5leHQtbW9udGhcIixcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJEYXlzOiBcImNvbnRhaW5lcl9fZGF5c1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGRheUl0ZW06IFwiZGF5LWl0ZW1cIixcclxuICAgICAgICAgICAgICAgICAgICBpc1RvZGF5OiBcImlzLXRvZGF5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNMb2NrZWQ6IFwiaXMtbG9ja2VkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNCb29rZWQ6IFwiaXMtYm9va2VkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNJblJhbmdlOiBcImlzLWluLXJhbmdlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNTdGFydERhdGU6IFwiaXMtc3RhcnQtZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzRmxpcHBlZDogXCJpcy1mbGlwcGVkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNFbmREYXRlOiBcImlzLWVuZC1kYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNIaWdobGlnaHRlZDogXCJpcy1oaWdobGlnaHRlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHdlZWtOdW1iZXI6IFwid2Vlay1udW1iZXJcIixcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJGb290ZXI6IFwiY29udGFpbmVyX19mb290ZXJcIixcclxuICAgICAgICAgICAgICAgICAgICBwcmV2aWV3RGF0ZVJhbmdlOiBcInByZXZpZXctZGF0ZS1yYW5nZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbkNhbmNlbDogXCJidXR0b24tY2FuY2VsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uQXBwbHk6IFwiYnV0dG9uLWFwcGx5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyVG9vbHRpcDogXCJjb250YWluZXJfX3Rvb2x0aXBcIixcclxuICAgICAgICAgICAgICAgICAgICBsaXRlcGlja2VyT3BlbjogXCJsaXRlcGlja2VyLW9wZW5cIixcclxuICAgICAgICAgICAgICAgICAgICBsaXRlcGlja2VyQmFja2Ryb3A6IFwibGl0ZXBpY2tlci1iYWNrZHJvcFwiLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgICAgICAgICAgdC5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlID0gW107XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIChlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gKGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0WzFdIHx8IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB0WzNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbykgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBidG9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gKChyID0gbyksIChhID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkocikpKSkpLCAobCA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGEpKSwgXCIvKiMgXCIuY29uY2F0KGwsIFwiICovXCIpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBvLnNvdXJjZXMubWFwKGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoby5zb3VyY2VSb290KS5jb25jYXQodCwgXCIgKi9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtpXS5jb25jYXQocykuY29uY2F0KFtuXSkuam9pbihcIlxcblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIsIGEsIGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtpXS5qb2luKFwiXFxuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkoZSwgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZVsyXSA/IFwiQG1lZGlhIFwiLmNvbmNhdChlWzJdLCBcIntcIikuY29uY2F0KGksIFwifVwiKSA6IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgKGUuaSA9IGZ1bmN0aW9uICh0LCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgJiYgKHQgPSBbW251bGwsIHQsIFwiXCJdXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG8gPSB7fSwgbiA9IDA7IG4gPCB0aGlzLmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IHRoaXNbbl1bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsICE9IHMgJiYgKG9bc10gPSAhMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCB0Lmxlbmd0aDsgcisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHRbcl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCAhPSBhWzBdICYmIG9bYVswXV0pIHx8IChpICYmICFhWzJdID8gKGFbMl0gPSBpKSA6IGkgJiYgKGFbMl0gPSBcIihcIi5jb25jYXQoYVsyXSwgXCIpIGFuZCAoXCIpLmNvbmNhdChpLCBcIilcIikpLCBlLnB1c2goYSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgICAgICB2YXIgbyxcclxuICAgICAgICAgICAgICAgIG4gPSB7fSxcclxuICAgICAgICAgICAgICAgIHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gbyAmJiAobyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpKSwgbztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSB0W2VdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIGkgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGkuY29udGVudERvY3VtZW50LmhlYWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0W2VdID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFtlXTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSkoKTtcclxuICAgICAgICAgICAgZnVuY3Rpb24gYSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gW10sIG8gPSB7fSwgbiA9IDA7IG4gPCB0Lmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSB0W25dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gZS5iYXNlID8gc1swXSArIGUuYmFzZSA6IHNbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSB7IGNzczogc1sxXSwgbWVkaWE6IHNbMl0sIHNvdXJjZU1hcDogc1szXSB9O1xyXG4gICAgICAgICAgICAgICAgICAgIG9bcl0gPyBvW3JdLnBhcnRzLnB1c2goYSkgOiBpLnB1c2goKG9bcl0gPSB7IGlkOiByLCBwYXJ0czogW2FdIH0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGwodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSB0W2ldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gbltvLmlkXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgciA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChzLnJlZnMrKzsgciA8IHMucGFydHMubGVuZ3RoOyByKyspIHMucGFydHNbcl0oby5wYXJ0c1tyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyByIDwgby5wYXJ0cy5sZW5ndGg7IHIrKykgcy5wYXJ0cy5wdXNoKGcoby5wYXJ0c1tyXSwgZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSBbXTsgciA8IG8ucGFydHMubGVuZ3RoOyByKyspIGEucHVzaChnKG8ucGFydHNbcl0sIGUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbltvLmlkXSA9IHsgaWQ6IG8uaWQsIHJlZnM6IDEsIHBhcnRzOiBhIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHAodCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSB0LmF0dHJpYnV0ZXMubm9uY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGkubmM7XHJcbiAgICAgICAgICAgICAgICAgICAgbyAmJiAodC5hdHRyaWJ1dGVzLm5vbmNlID0gbyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgKE9iamVjdC5rZXlzKHQuYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZShpLCB0LmF0dHJpYnV0ZXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdC5pbnNlcnQpXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgdC5pbnNlcnQoZSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHIodC5pbnNlcnQgfHwgXCJoZWFkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbikgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBuLmFwcGVuZENoaWxkKGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGMsXHJcbiAgICAgICAgICAgICAgICBoID1cclxuICAgICAgICAgICAgICAgICAgICAoKGMgPSBbXSksXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjW3RdID0gZSksIGMuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGQodCwgZSwgaSwgbykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG4gPSBpID8gXCJcIiA6IG8uY3NzO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuc3R5bGVTaGVldCkgdC5zdHlsZVNoZWV0LmNzc1RleHQgPSBoKGUsIG4pO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgciA9IHQuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICByW2VdICYmIHQucmVtb3ZlQ2hpbGQocltlXSksIHIubGVuZ3RoID8gdC5pbnNlcnRCZWZvcmUocywgcltlXSkgOiB0LmFwcGVuZENoaWxkKHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHUodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG8gPSBpLmNzcyxcclxuICAgICAgICAgICAgICAgICAgICBuID0gaS5tZWRpYSxcclxuICAgICAgICAgICAgICAgICAgICBzID0gaS5zb3VyY2VNYXA7XHJcbiAgICAgICAgICAgICAgICBpZiAoKG4gJiYgdC5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBuKSwgcyAmJiBidG9hICYmIChvICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkocykpKSksIFwiICovXCIpKSwgdC5zdHlsZVNoZWV0KSkgdC5zdHlsZVNoZWV0LmNzc1RleHQgPSBvO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IHQuZmlyc3RDaGlsZDsgKSB0LnJlbW92ZUNoaWxkKHQuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG0gPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgZiA9IDA7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGcodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGksIG8sIG47XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5zaW5nbGV0b24pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IGYrKztcclxuICAgICAgICAgICAgICAgICAgICAoaSA9IG0gfHwgKG0gPSBwKGUpKSksIChvID0gZC5iaW5kKG51bGwsIGksIHMsICExKSksIChuID0gZC5iaW5kKG51bGwsIGksIHMsICEwKSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAoaSA9IHAoZSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAobyA9IHUuYmluZChudWxsLCBpLCBlKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIShmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09PSB0LnBhcmVudE5vZGUpIHJldHVybiAhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KShpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIG8odCksXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmNzcyA9PT0gdC5jc3MgJiYgZS5tZWRpYSA9PT0gdC5tZWRpYSAmJiBlLnNvdXJjZU1hcCA9PT0gdC5zb3VyY2VNYXApIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8oKHQgPSBlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0LmV4cG9ydHMgPSBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgKChlID0gZSB8fCB7fSkuYXR0cmlidXRlcyA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIGUuYXR0cmlidXRlcyA/IGUuYXR0cmlidXRlcyA6IHt9KSwgZS5zaW5nbGV0b24gfHwgXCJib29sZWFuXCIgPT0gdHlwZW9mIGUuc2luZ2xldG9uIHx8IChlLnNpbmdsZXRvbiA9IHMoKSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IGEodCwgZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIGwoaSwgZSksXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbyA9IFtdLCBzID0gMDsgcyA8IGkubGVuZ3RoOyBzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gaVtzXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gbltyLmlkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgJiYgKHAucmVmcy0tLCBvLnB1c2gocCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgJiYgbChhKHQsIGUpLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBvLmxlbmd0aDsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaCA9IG9bY107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gaC5yZWZzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCBoLnBhcnRzLmxlbmd0aDsgZCsrKSBoLnBhcnRzW2RdKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG5baC5pZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgICAgIHZhciBvID1cclxuICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChvID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZSwgaSA9IDEsIG8gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbzsgaSsrKSBmb3IgKHZhciBuIGluIChlID0gYXJndW1lbnRzW2ldKSkgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG4pICYmICh0W25dID0gZVtuXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBuID1cclxuICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiB0Ll9fZXNNb2R1bGUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPSB0KSBmb3IgKHZhciBpIGluIHQpIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIGkpICYmIChlW2ldID0gdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZS5kZWZhdWx0ID0gdCksIGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KTtcclxuICAgICAgICAgICAgdmFyIHMgPSBpKDApLFxyXG4gICAgICAgICAgICAgICAgciA9IGkoMyksXHJcbiAgICAgICAgICAgICAgICBhID0gbihpKDEpKSxcclxuICAgICAgICAgICAgICAgIGwgPSBpKDIpO1xyXG4gICAgICAgICAgICAoci5MaXRlcGlja2VyLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gdCAmJiAodCA9IG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGUgPSB0IHx8IHRoaXMub3B0aW9ucy5lbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKCgodGhpcy50cmlnZ2VyRWxlbWVudCA9IGUpLCB0aGlzLm9wdGlvbnMuaW5saW5lTW9kZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMucGlja2VyLnN0eWxlLnBvc2l0aW9uID0gXCJzdGF0aWNcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnBpY2tlci5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnBpY2tlci5zdHlsZS50b3AgPSBudWxsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMucGlja2VyLnN0eWxlLmxlZnQgPSBudWxsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMucGlja2VyLnN0eWxlLmJvdHRvbSA9IG51bGwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2b2lkICh0aGlzLnBpY2tlci5zdHlsZS5yaWdodCA9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2Nyb2xsVG9EYXRlKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnN0YXJ0RGF0ZSB8fCAodCAmJiB0ICE9PSB0aGlzLm9wdGlvbnMuZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgdGhpcy5vcHRpb25zLmVuZERhdGUgJiYgdCA9PT0gdGhpcy5vcHRpb25zLmVsZW1lbnRFbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcy5vcHRpb25zLmVuZERhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0RGF0ZSgxKSwgdGhpcy5vcHRpb25zLm51bWJlck9mTW9udGhzID4gMSAmJiBpLnNldE1vbnRoKGkuZ2V0TW9udGgoKSAtICh0aGlzLm9wdGlvbnMubnVtYmVyT2ZNb250aHMgLSAxKSksICh0aGlzLmNhbGVuZGFyc1swXSA9IGkuY2xvbmUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHRoaXMub3B0aW9ucy5zdGFydERhdGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgby5zZXREYXRlKDEpLCAodGhpcy5jYWxlbmRhcnNbMF0gPSBvLmNsb25lKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubW9iaWxlRnJpZW5kbHkgJiYgbC5pc01vYmlsZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMucGlja2VyLnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMucGlja2VyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInBvcnRyYWl0XCIgPT09IGwuZ2V0T3JpZW50YXRpb24oKSA/ICgodGhpcy5vcHRpb25zLm51bWJlck9mTW9udGhzID0gMSksICh0aGlzLm9wdGlvbnMubnVtYmVyT2ZDb2x1bW5zID0gMSkpIDogKCh0aGlzLm9wdGlvbnMubnVtYmVyT2ZNb250aHMgPSAyKSwgKHRoaXMub3B0aW9ucy5udW1iZXJPZkNvbHVtbnMgPSAyKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzLnBpY2tlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5waWNrZXIuc3R5bGUudG9wID0gXCJjYWxjKDUwJSAtIFwiICsgbi5oZWlnaHQgLyAyICsgXCJweClcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnBpY2tlci5zdHlsZS5sZWZ0ID0gXCJjYWxjKDUwJSAtIFwiICsgbi53aWR0aCAvIDIgKyBcInB4KVwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMucGlja2VyLnN0eWxlLnJpZ2h0ID0gbnVsbCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnBpY2tlci5zdHlsZS5ib3R0b20gPSBudWxsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMucGlja2VyLnN0eWxlLnpJbmRleCA9IHRoaXMub3B0aW9ucy56SW5kZXgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5iYWNrZHJvcC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuYmFja2Ryb3Auc3R5bGUuekluZGV4ID0gdGhpcy5vcHRpb25zLnpJbmRleCAtIDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoYS5saXRlcGlja2VyT3BlbiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdGhpcy5vcHRpb25zLm9uU2hvdyAmJiB0aGlzLm9wdGlvbnMub25TaG93LmNhbGwodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvaWQgKHQgPyB0LmJsdXIoKSA6IHRoaXMub3B0aW9ucy5lbGVtZW50LmJsdXIoKSlcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKSwgKHRoaXMucGlja2VyLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiKSwgKHRoaXMucGlja2VyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCIpLCAodGhpcy5waWNrZXIuc3R5bGUuekluZGV4ID0gdGhpcy5vcHRpb25zLnpJbmRleCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcyA9IGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgciA9IHRoaXMucGlja2VyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHAgPSBzLmJvdHRvbSxcclxuICAgICAgICAgICAgICAgICAgICBjID0gcy5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIGggPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGQgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHUgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgIG0gPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYXJlbnRFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmID0gdGhpcy5waWNrZXIucGFyZW50Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAocCAtPSBmLmJvdHRvbSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwICs9IHMuaGVpZ2h0KSArIHIuaGVpZ2h0ID4gd2luZG93LmlubmVySGVpZ2h0ICYmIHMudG9wIC0gZi50b3AgLSBzLmhlaWdodCA+IDAgJiYgKHUgPSBzLnRvcCAtIGYudG9wIC0gcy5oZWlnaHQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYyAtPSBmLmxlZnQpICsgci53aWR0aCA+IHdpbmRvdy5pbm5lcldpZHRoICYmIHMucmlnaHQgLSBmLnJpZ2h0IC0gci53aWR0aCA+IDAgJiYgKG0gPSBzLnJpZ2h0IC0gZi5yaWdodCAtIHIud2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgKGggPSB3aW5kb3cuc2Nyb2xsWCB8fCB3aW5kb3cucGFnZVhPZmZzZXQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZCA9IHdpbmRvdy5zY3JvbGxZIHx8IHdpbmRvdy5wYWdlWU9mZnNldCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgKyByLmhlaWdodCA+IHdpbmRvdy5pbm5lckhlaWdodCAmJiBzLnRvcCAtIHIuaGVpZ2h0ID4gMCAmJiAodSA9IHMudG9wIC0gci5oZWlnaHQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjICsgci53aWR0aCA+IHdpbmRvdy5pbm5lcldpZHRoICYmIHMucmlnaHQgLSByLndpZHRoID4gMCAmJiAobSA9IHMucmlnaHQgLSByLndpZHRoKTtcclxuICAgICAgICAgICAgICAgICh0aGlzLnBpY2tlci5zdHlsZS50b3AgPSAodSB8fCBwKSArIGQgKyBcInB4XCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnBpY2tlci5zdHlsZS5sZWZ0ID0gKG0gfHwgYykgKyBoICsgXCJweFwiKSxcclxuICAgICAgICAgICAgICAgICAgICAodGhpcy5waWNrZXIuc3R5bGUucmlnaHQgPSBudWxsKSxcclxuICAgICAgICAgICAgICAgICAgICAodGhpcy5waWNrZXIuc3R5bGUuYm90dG9tID0gbnVsbCksXHJcbiAgICAgICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiB0aGlzLm9wdGlvbnMub25TaG93ICYmIHRoaXMub3B0aW9ucy5vblNob3cuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAoci5MaXRlcGlja2VyLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNTaG93bmluZygpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICgodGhpcy5kYXRlUGlja2VkLmxlbmd0aCA9IDApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUlucHV0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5pbmxpbmVNb2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMucmVuZGVyKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKCh0aGlzLnBpY2tlci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRoaXMub3B0aW9ucy5vbkhpZGUgJiYgdGhpcy5vcHRpb25zLm9uSGlkZS5jYWxsKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMubW9iaWxlRnJpZW5kbHkgJiYgKGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShhLmxpdGVwaWNrZXJPcGVuKSwgKHRoaXMuYmFja2Ryb3Auc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiKSkpKTtcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKHIuTGl0ZXBpY2tlci5wcm90b3R5cGUuZ2V0RGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTdGFydERhdGUoKTtcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKHIuTGl0ZXBpY2tlci5wcm90b3R5cGUuZ2V0U3RhcnREYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuc3RhcnREYXRlID8gdGhpcy5vcHRpb25zLnN0YXJ0RGF0ZS5jbG9uZSgpLmdldERhdGVJbnN0YW5jZSgpIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKHIuTGl0ZXBpY2tlci5wcm90b3R5cGUuZ2V0RW5kRGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmVuZERhdGUgPyB0aGlzLm9wdGlvbnMuZW5kRGF0ZS5jbG9uZSgpLmdldERhdGVJbnN0YW5jZSgpIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKHIuTGl0ZXBpY2tlci5wcm90b3R5cGUuc2V0RGF0ZSA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGFydERhdGUodCksIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdGhpcy5vcHRpb25zLm9uU2VsZWN0ICYmIHRoaXMub3B0aW9ucy5vblNlbGVjdC5jYWxsKHRoaXMsIHRoaXMuZ2V0RGF0ZSgpKTtcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKHIuTGl0ZXBpY2tlci5wcm90b3R5cGUuc2V0U3RhcnREYXRlID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ICYmICgodGhpcy5vcHRpb25zLnN0YXJ0RGF0ZSA9IG5ldyBzLkRhdGVUaW1lKHQsIHRoaXMub3B0aW9ucy5mb3JtYXQsIHRoaXMub3B0aW9ucy5sYW5nKSksIHRoaXMudXBkYXRlSW5wdXQoKSk7XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIChyLkxpdGVwaWNrZXIucHJvdG90eXBlLnNldEVuZERhdGUgPSBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgKCh0aGlzLm9wdGlvbnMuZW5kRGF0ZSA9IG5ldyBzLkRhdGVUaW1lKHQsIHRoaXMub3B0aW9ucy5mb3JtYXQsIHRoaXMub3B0aW9ucy5sYW5nKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zdGFydERhdGUuZ2V0VGltZSgpID4gdGhpcy5vcHRpb25zLmVuZERhdGUuZ2V0VGltZSgpICYmICgodGhpcy5vcHRpb25zLmVuZERhdGUgPSB0aGlzLm9wdGlvbnMuc3RhcnREYXRlLmNsb25lKCkpLCAodGhpcy5vcHRpb25zLnN0YXJ0RGF0ZSA9IG5ldyBzLkRhdGVUaW1lKHQsIHRoaXMub3B0aW9ucy5mb3JtYXQsIHRoaXMub3B0aW9ucy5sYW5nKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUlucHV0KCkpO1xyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAoci5MaXRlcGlja2VyLnByb3RvdHlwZS5zZXREYXRlUmFuZ2UgPSBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnRyaWdnZXJFbGVtZW50ID0gdm9pZCAwKSwgdGhpcy5zZXRTdGFydERhdGUodCksIHRoaXMuc2V0RW5kRGF0ZShlKSwgdGhpcy51cGRhdGVJbnB1dCgpLCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRoaXMub3B0aW9ucy5vblNlbGVjdCAmJiB0aGlzLm9wdGlvbnMub25TZWxlY3QuY2FsbCh0aGlzLCB0aGlzLmdldFN0YXJ0RGF0ZSgpLCB0aGlzLmdldEVuZERhdGUoKSk7XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIChyLkxpdGVwaWNrZXIucHJvdG90eXBlLmdvdG9EYXRlID0gZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSAwKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IG5ldyBzLkRhdGVUaW1lKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0RGF0ZSgxKSwgKHRoaXMuY2FsZW5kYXJzW2VdID0gaS5jbG9uZSgpKSwgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKHIuTGl0ZXBpY2tlci5wcm90b3R5cGUuc2V0TG9ja0RheXMgPSBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLm9wdGlvbnMubG9ja0RheXMgPSBzLkRhdGVUaW1lLmNvbnZlcnRBcnJheSh0LCB0aGlzLm9wdGlvbnMubG9ja0RheXNGb3JtYXQpKSwgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKHIuTGl0ZXBpY2tlci5wcm90b3R5cGUuc2V0Qm9va2VkRGF5cyA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMub3B0aW9ucy5ib29rZWREYXlzID0gcy5EYXRlVGltZS5jb252ZXJ0QXJyYXkodCwgdGhpcy5vcHRpb25zLmJvb2tlZERheXNGb3JtYXQpKSwgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKHIuTGl0ZXBpY2tlci5wcm90b3R5cGUuc2V0SGlnaGxpZ2h0ZWREYXlzID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAodGhpcy5vcHRpb25zLmhpZ2hsaWdodGVkRGF5cyA9IHMuRGF0ZVRpbWUuY29udmVydEFycmF5KHQsIHRoaXMub3B0aW9ucy5oaWdobGlnaHRlZERheXNGb3JtYXQpKSwgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKHIuTGl0ZXBpY2tlci5wcm90b3R5cGUuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHQuZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHQuZWxlbWVudEVuZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHQucGFyZW50RWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc3RhcnREYXRlICYmICh0LnN0YXJ0RGF0ZSA9IG5ldyBzLkRhdGVUaW1lKHQuc3RhcnREYXRlLCB0aGlzLm9wdGlvbnMuZm9ybWF0LCB0aGlzLm9wdGlvbnMubGFuZykpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmVuZERhdGUgJiYgKHQuZW5kRGF0ZSA9IG5ldyBzLkRhdGVUaW1lKHQuZW5kRGF0ZSwgdGhpcy5vcHRpb25zLmZvcm1hdCwgdGhpcy5vcHRpb25zLmxhbmcpKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IG8obyh7fSwgdGhpcy5vcHRpb25zLmRyb3Bkb3ducyksIHQuZHJvcGRvd25zKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IG8obyh7fSwgdGhpcy5vcHRpb25zLmJ1dHRvblRleHQpLCB0LmJ1dHRvblRleHQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gbyhvKHt9LCB0aGlzLm9wdGlvbnMudG9vbHRpcFRleHQpLCB0LnRvb2x0aXBUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAodGhpcy5vcHRpb25zID0gbyhvKHt9LCB0aGlzLm9wdGlvbnMpLCB0KSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLm9wdGlvbnMuZHJvcGRvd25zID0gbyh7fSwgZSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5vcHRpb25zLmJ1dHRvblRleHQgPSBvKHt9LCBpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLm9wdGlvbnMudG9vbHRpcFRleHQgPSBvKHt9LCBuKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICF0aGlzLm9wdGlvbnMuc2luZ2xlTW9kZSB8fCB0aGlzLm9wdGlvbnMuc3RhcnREYXRlIGluc3RhbmNlb2Ygcy5EYXRlVGltZSB8fCAoKHRoaXMub3B0aW9ucy5zdGFydERhdGUgPSBudWxsKSwgKHRoaXMub3B0aW9ucy5lbmREYXRlID0gbnVsbCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2luZ2xlTW9kZSB8fCAodGhpcy5vcHRpb25zLnN0YXJ0RGF0ZSBpbnN0YW5jZW9mIHMuRGF0ZVRpbWUgJiYgdGhpcy5vcHRpb25zLmVuZERhdGUgaW5zdGFuY2VvZiBzLkRhdGVUaW1lKSB8fCAoKHRoaXMub3B0aW9ucy5zdGFydERhdGUgPSBudWxsKSwgKHRoaXMub3B0aW9ucy5lbmREYXRlID0gbnVsbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgdGhpcy5vcHRpb25zLm51bWJlck9mTW9udGhzOyByICs9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLm9wdGlvbnMuc3RhcnREYXRlID8gdGhpcy5vcHRpb25zLnN0YXJ0RGF0ZS5jbG9uZSgpIDogbmV3IHMuRGF0ZVRpbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYS5zZXREYXRlKDEpLCBhLnNldE1vbnRoKGEuZ2V0TW9udGgoKSArIHIpLCAodGhpcy5jYWxlbmRhcnNbcl0gPSBhKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmxvY2tEYXlzLmxlbmd0aCAmJiAodGhpcy5vcHRpb25zLmxvY2tEYXlzID0gcy5EYXRlVGltZS5jb252ZXJ0QXJyYXkodGhpcy5vcHRpb25zLmxvY2tEYXlzLCB0aGlzLm9wdGlvbnMubG9ja0RheXNGb3JtYXQpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmJvb2tlZERheXMubGVuZ3RoICYmICh0aGlzLm9wdGlvbnMuYm9va2VkRGF5cyA9IHMuRGF0ZVRpbWUuY29udmVydEFycmF5KHRoaXMub3B0aW9ucy5ib29rZWREYXlzLCB0aGlzLm9wdGlvbnMuYm9va2VkRGF5c0Zvcm1hdCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0ZWREYXlzLmxlbmd0aCAmJiAodGhpcy5vcHRpb25zLmhpZ2hsaWdodGVkRGF5cyA9IHMuRGF0ZVRpbWUuY29udmVydEFycmF5KHRoaXMub3B0aW9ucy5oaWdobGlnaHRlZERheXMsIHRoaXMub3B0aW9ucy5oaWdobGlnaHRlZERheXNGb3JtYXQpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmlubGluZU1vZGUgJiYgdGhpcy5zaG93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSW5wdXQoKTtcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKHIuTGl0ZXBpY2tlci5wcm90b3R5cGUuY2xlYXJTZWxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMub3B0aW9ucy5zdGFydERhdGUgPSBudWxsKSwgKHRoaXMub3B0aW9ucy5lbmREYXRlID0gbnVsbCksICh0aGlzLmRhdGVQaWNrZWQubGVuZ3RoID0gMCksIHRoaXMudXBkYXRlSW5wdXQoKSwgdGhpcy5pc1Nob3duaW5nKCkgJiYgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKHIuTGl0ZXBpY2tlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBpY2tlciAmJiB0aGlzLnBpY2tlci5wYXJlbnROb2RlICYmICh0aGlzLnBpY2tlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGlja2VyKSwgKHRoaXMucGlja2VyID0gbnVsbCkpLCB0aGlzLmJhY2tkcm9wICYmIHRoaXMuYmFja2Ryb3AucGFyZW50Tm9kZSAmJiB0aGlzLmJhY2tkcm9wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5iYWNrZHJvcCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICBdKS5MaXRlcGlja2VyO1xyXG59KTtcclxuIiwiLyohXHJcbiAqXHJcbiAqICAgICBMaXRlcGlja2VyIG1vZHVsZSByYW5nZXMgdjAuMC40IChodHRwczovL2dpdGh1Yi5jb20vd2FraXJpbi9MaXRlcGlja2VyLW1vZHVsZS1yYW5nZXMpXHJcbiAqICAgICBQYWNrYWdlOiBsaXRlcGlja2VyLW1vZHVsZS1yYW5nZXMgKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2xpdGVwaWNrZXItbW9kdWxlLXJhbmdlcylcclxuICogICAgIExpY2Vuc2U6IE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3dha2lyaW4vTGl0ZXBpY2tlci1tb2R1bGUtcmFuZ2VzL2Jsb2IvbWFzdGVyL0xJQ0VOQ0UubWQpXHJcbiAqICAgICBDb3B5cmlnaHQgMjAxOS0yMDIwIFJpbmF0IEcuXHJcbiAqXHJcbiAqICAgICBIYXNoOiA2MzM5Mzk4NDdmMjFkNzYzMWYzMVxyXG4gKiAgICAgR2VuZXJhdGVkIG9uOiAxNTkyOTA4MTg2Mzg3XHJcbiAqXHJcbiAqL1xyXG4hKGZ1bmN0aW9uIChlLCB0KSB7XHJcbiAgICBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZXhwb3J0cyAmJiBcIm9iamVjdFwiID09IHR5cGVvZiBtb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gdCgpO1xyXG4gICAgZWxzZSBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCkgZGVmaW5lKFtdLCB0KTtcclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBuID0gdCgpO1xyXG4gICAgICAgIGZvciAodmFyIHIgaW4gbikgKFwib2JqZWN0XCIgPT0gdHlwZW9mIGV4cG9ydHMgPyBleHBvcnRzIDogZSlbcl0gPSBuW3JdO1xyXG4gICAgfVxyXG59KSh3aW5kb3csIGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAoZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgdCA9IHt9O1xyXG4gICAgICAgIGZ1bmN0aW9uIG4ocikge1xyXG4gICAgICAgICAgICBpZiAodFtyXSkgcmV0dXJuIHRbcl0uZXhwb3J0cztcclxuICAgICAgICAgICAgdmFyIG8gPSAodFtyXSA9IHsgaTogciwgbDogITEsIGV4cG9ydHM6IHt9IH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZVtyXS5jYWxsKG8uZXhwb3J0cywgbywgby5leHBvcnRzLCBuKSwgKG8ubCA9ICEwKSwgby5leHBvcnRzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAobi5tID0gZSksXHJcbiAgICAgICAgICAgIChuLmMgPSB0KSxcclxuICAgICAgICAgICAgKG4uZCA9IGZ1bmN0aW9uIChlLCB0LCByKSB7XHJcbiAgICAgICAgICAgICAgICBuLm8oZSwgdCkgfHwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHQsIHsgZW51bWVyYWJsZTogITAsIGdldDogciB9KTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIChuLnIgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIFN5bWJvbC50b1N0cmluZ1RhZyAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiBcIk1vZHVsZVwiIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgKG4udCA9IGZ1bmN0aW9uIChlLCB0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKDEgJiB0ICYmIChlID0gbihlKSksIDggJiB0KSkgcmV0dXJuIGU7XHJcbiAgICAgICAgICAgICAgICBpZiAoNCAmIHQgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgZSAmJiBlICYmIGUuX19lc01vZHVsZSkgcmV0dXJuIGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgciA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKG4ucihyKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6ICEwLCB2YWx1ZTogZSB9KSwgMiAmIHQgJiYgXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbyBpbiBlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLmQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVbdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQobnVsbCwgbylcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgKG4ubiA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdCA9XHJcbiAgICAgICAgICAgICAgICAgICAgZSAmJiBlLl9fZXNNb2R1bGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmRlZmF1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuLmQodCwgXCJhXCIsIHQpLCB0O1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgKG4ubyA9IGZ1bmN0aW9uIChlLCB0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIHQpO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgKG4ucCA9IFwiXCIpLFxyXG4gICAgICAgICAgICBuKChuLnMgPSAwKSlcclxuICAgICAgICApO1xyXG4gICAgfSkoW1xyXG4gICAgICAgIGZ1bmN0aW9uIChlLCB0LCBuKSB7XHJcbiAgICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgICAgICB2YXIgciA9XHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAociA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHQsIG4gPSAxLCByID0gYXJndW1lbnRzLmxlbmd0aDsgbiA8IHI7IG4rKykgZm9yICh2YXIgbyBpbiAodCA9IGFyZ3VtZW50c1tuXSkpIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LCBvKSAmJiAoZVtvXSA9IHRbb10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbyA9XHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKSByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT0gZSkgZm9yICh2YXIgbiBpbiBlKSBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLCBuKSAmJiAodFtuXSA9IGVbbl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHQuZGVmYXVsdCA9IGUpLCB0O1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSk7XHJcbiAgICAgICAgICAgIHZhciBpID0gbyhuKDEpKTtcclxuICAgICAgICAgICAgbig1KTtcclxuICAgICAgICAgICAgdmFyIGEsXHJcbiAgICAgICAgICAgICAgICBjLFxyXG4gICAgICAgICAgICAgICAgcyA9IHdpbmRvdy5MaXRlcGlja2VyLFxyXG4gICAgICAgICAgICAgICAgdSA9IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICAgICAgICBsID0gbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgICAgIGQgPSBmdW5jdGlvbiAoZSwgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3IERhdGUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uc2V0RGF0ZShuLmdldERhdGUoKSAtIHQpLCBuO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGYgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJDZXR0ZSBTZW1haW5lXCI6IFtkKHUsIC03KSwgbF0sXHJcbiAgICAgICAgICAgICAgICAgICAgXCJDZSBtb2lzXCI6ICgoYSA9IHUpLCAoYyA9IG5ldyBEYXRlKGEpKSwgW2MsIG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwgYS5nZXRNb250aCgpICsgMSwgMCldKSxcclxuICAgICAgICAgICAgICAgICAgICBcIk1vaXMgcHJvY2hhaW5cIjogKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gbmV3IERhdGUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnNldERhdGUoMSksIHQuc2V0TW9udGgoZS5nZXRNb250aCgpICsgMSksIFt0LCBuZXcgRGF0ZShlLmdldEZ1bGxZZWFyKCksIGUuZ2V0TW9udGgoKSArIDIsIDApXTtcclxuICAgICAgICAgICAgICAgICAgICB9KSh1KSxcclxuICAgICAgICAgICAgICAgICAgICBcIjIgTW9pc1wiOiAoZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBuZXcgRGF0ZShlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc2V0RGF0ZSgxKSwgdC5zZXRNb250aChlLmdldE1vbnRoKCkgKyAxKSwgW3QsIG5ldyBEYXRlKGUuZ2V0RnVsbFllYXIoKSwgZS5nZXRNb250aCgpICsgMywgMCldO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pKHUpLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiNiBNb2lzXCI6IChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IG5ldyBEYXRlKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5zZXREYXRlKDEpLCB0LnNldE1vbnRoKGUuZ2V0TW9udGgoKSArIDEpLCBbdCwgbmV3IERhdGUoZS5nZXRGdWxsWWVhcigpLCBlLmdldE1vbnRoKCkgKyA3LCAwKV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSkodSksXHJcbiAgICAgICAgICAgICAgICAgICAgXCIxIGFuXCI6IChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IG5ldyBEYXRlKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5zZXREYXRlKDEpLCB0LnNldE1vbnRoKGUuZ2V0TW9udGgoKSArIDEpLCBbdCwgbmV3IERhdGUoZS5nZXRGdWxsWWVhcigpLCBlLmdldE1vbnRoKCkgKyAxMywgMCldO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pKHUpXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzLnByb3RvdHlwZS5lbmFibGVNb2R1bGVSYW5nZXMgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUub3B0aW9ucy5zaW5nbGVNb2RlKSBjb25zb2xlLndhcm4oXCJMaXRlcGlja2VyOiBtb2R1bGUgcmFuZ2VzIGFyZSBkaXNhYmxlZCBzaW5jZSBzaW5nbGVNb2RlIGlzIGVuYWJsZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSByKHIoe30sIHsgcG9zaXRpb246IFwibGVmdFwiLCByYW5nZXM6IHt9IH0pLCBlLm9wdGlvbnMubW9kdWxlUmFuZ2VzKTtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0LnJhbmdlcykubGVuZ3RoIHx8ICh0LnJhbmdlcyA9IHIoe30sIGYpKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgKG4uY2xhc3NOYW1lID0gaS5jb250YWluZXJQcmVkZWZpbmVkUmFuZ2VzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXModC5yYW5nZXMpLmZvckVhY2goZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gdC5yYW5nZXNbcl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5pbm5lclRleHQgPSByKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5kYXRhc2V0LnN0YXJ0ID0gb1swXS5nZXRUaW1lKCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLmRhdGFzZXQuZW5kID0gb1sxXS5nZXRUaW1lKCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdC50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gJiYgKGUuc2V0RGF0ZVJhbmdlKE51bWJlcihuLmRhdGFzZXQuc3RhcnQpLCBOdW1iZXIobi5kYXRhc2V0LmVuZCkpLCBlLmdvdG9EYXRlKE51bWJlcihuLmRhdGFzZXQuc3RhcnQpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5hcHBlbmRDaGlsZChpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBlLnBpY2tlci5xdWVyeVNlbGVjdG9yKFwiLlwiICsgaS5jb250YWluZXJNYWluKTtcclxuICAgICAgICAgICAgICAgICAgICBbXCJib3R0b21cIiwgXCJyaWdodFwiXS5pbmNsdWRlcyh0LnBvc2l0aW9uKSA/IG8uYXBwZW5kQ2hpbGQobikgOiBvLnByZXBlbmQobiksIFtcInRvcFwiLCBcImJvdHRvbVwiXS5pbmNsdWRlcyh0LnBvc2l0aW9uKSA/IChuLmNsYXNzTGlzdC5hZGQoaS5mbGV4Um93KSwgby5jbGFzc0xpc3QuYWRkKGkuZmxleENvbHVtbikpIDogby5jbGFzc0xpc3QucmVtb3ZlKGkuZmxleENvbHVtbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmdW5jdGlvbiAoZSwgdCwgbikge1xyXG4gICAgICAgICAgICB2YXIgciA9IG4oMiksXHJcbiAgICAgICAgICAgICAgICBvID0gbigzKTtcclxuICAgICAgICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgKG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvKSAmJiAobyA9IFtbZS5pLCBvLCBcIlwiXV0pO1xyXG4gICAgICAgICAgICB2YXIgaSA9IHsgaW5zZXJ0OiBcImhlYWRcIiwgc2luZ2xldG9uOiAhMSB9O1xyXG4gICAgICAgICAgICByKG8sIGkpO1xyXG4gICAgICAgICAgICBlLmV4cG9ydHMgPSBvLmxvY2FscyB8fCB7fTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZ1bmN0aW9uIChlLCB0LCBuKSB7XHJcbiAgICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgICAgICB2YXIgcixcclxuICAgICAgICAgICAgICAgIG8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gciAmJiAociA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpKSwgcjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBpID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBlW3RdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIG4gaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IG4uY29udGVudERvY3VtZW50LmhlYWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlW3RdID0gbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZVt0XTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSkoKSxcclxuICAgICAgICAgICAgICAgIGEgPSBbXTtcclxuICAgICAgICAgICAgZnVuY3Rpb24gYyhlKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB0ID0gLTEsIG4gPSAwOyBuIDwgYS5sZW5ndGg7IG4rKylcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYVtuXS5pZGVudGlmaWVyID09PSBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzKGUsIHQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSB7fSwgciA9IFtdLCBvID0gMDsgbyA8IGUubGVuZ3RoOyBvKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGVbb10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSB0LmJhc2UgPyBpWzBdICsgdC5iYXNlIDogaVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdSA9IG5bc10gfHwgMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IFwiXCIuY29uY2F0KHMsIFwiIFwiKS5jb25jYXQodSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbltzXSA9IHUgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gYyhsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZiA9IHsgY3NzOiBpWzFdLCBtZWRpYTogaVsyXSwgc291cmNlTWFwOiBpWzNdIH07XHJcbiAgICAgICAgICAgICAgICAgICAgLTEgIT09IGQgPyAoYVtkXS5yZWZlcmVuY2VzKyssIGFbZF0udXBkYXRlcihmKSkgOiBhLnB1c2goeyBpZGVudGlmaWVyOiBsLCB1cGRhdGVyOiBiKGYsIHQpLCByZWZlcmVuY2VzOiAxIH0pLCByLnB1c2gobCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiB1KGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHIgPSBlLmF0dHJpYnV0ZXMgfHwge307XHJcbiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSByLm5vbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBuLm5jO1xyXG4gICAgICAgICAgICAgICAgICAgIG8gJiYgKHIubm9uY2UgPSBvKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAoT2JqZWN0LmtleXMocikuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZShlLCByW2VdKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUuaW5zZXJ0KVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgIGUuaW5zZXJ0KHQpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBpKGUuaW5zZXJ0IHx8IFwiaGVhZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWEpIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgYS5hcHBlbmRDaGlsZCh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBsLFxyXG4gICAgICAgICAgICAgICAgZCA9XHJcbiAgICAgICAgICAgICAgICAgICAgKChsID0gW10pLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlLCB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAobFtlXSA9IHQpLCBsLmZpbHRlcihCb29sZWFuKS5qb2luKFwiXFxuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBmKGUsIHQsIG4sIHIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvID0gbiA/IFwiXCIgOiByLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KHIubWVkaWEsIFwiIHtcIikuY29uY2F0KHIuY3NzLCBcIn1cIikgOiByLmNzcztcclxuICAgICAgICAgICAgICAgIGlmIChlLnN0eWxlU2hlZXQpIGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gZCh0LCBvKTtcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgYVt0XSAmJiBlLnJlbW92ZUNoaWxkKGFbdF0pLCBhLmxlbmd0aCA/IGUuaW5zZXJ0QmVmb3JlKGksIGFbdF0pIDogZS5hcHBlbmRDaGlsZChpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBwKGUsIHQsIG4pIHtcclxuICAgICAgICAgICAgICAgIHZhciByID0gbi5jc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgbyA9IG4ubWVkaWEsXHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IG4uc291cmNlTWFwO1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIChvID8gZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBvKSA6IGUucmVtb3ZlQXR0cmlidXRlKFwibWVkaWFcIiksIGkgJiYgYnRvYSAmJiAociArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGkpKSkpLCBcIiAqL1wiKSksIGUuc3R5bGVTaGVldClcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICBlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHI7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgZS5maXJzdENoaWxkOyApIGUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICBlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbSA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICB2ID0gMDtcclxuICAgICAgICAgICAgZnVuY3Rpb24gYihlLCB0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbiwgciwgbztcclxuICAgICAgICAgICAgICAgIGlmICh0LnNpbmdsZXRvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gdisrO1xyXG4gICAgICAgICAgICAgICAgICAgIChuID0gbSB8fCAobSA9IHUodCkpKSwgKHIgPSBmLmJpbmQobnVsbCwgbiwgaSwgITEpKSwgKG8gPSBmLmJpbmQobnVsbCwgbiwgaSwgITApKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIChuID0gdSh0KSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChyID0gcC5iaW5kKG51bGwsIG4sIHQpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKG8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IGUucGFyZW50Tm9kZSkgcmV0dXJuICExO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgcihlKSxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuY3NzID09PSBlLmNzcyAmJiB0Lm1lZGlhID09PSBlLm1lZGlhICYmIHQuc291cmNlTWFwID09PSBlLnNvdXJjZU1hcCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcigoZSA9IHQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIG8oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlLCB0KSB7XHJcbiAgICAgICAgICAgICAgICAodCA9IHQgfHwge30pLnNpbmdsZXRvbiB8fCBcImJvb2xlYW5cIiA9PSB0eXBlb2YgdC5zaW5nbGV0b24gfHwgKHQuc2luZ2xldG9uID0gbygpKTtcclxuICAgICAgICAgICAgICAgIHZhciBuID0gcygoZSA9IGUgfHwgW10pLCB0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoKGUgPSBlIHx8IFtdKSwgXCJbb2JqZWN0IEFycmF5XVwiID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgbi5sZW5ndGg7IHIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBjKG5bcl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtvXS5yZWZlcmVuY2VzLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHMoZSwgdCksIHUgPSAwOyB1IDwgbi5sZW5ndGg7IHUrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBjKG5bdV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMCA9PT0gYVtsXS5yZWZlcmVuY2VzICYmIChhW2xdLnVwZGF0ZXIoKSwgYS5zcGxpY2UobCwgMSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmdW5jdGlvbiAoZSwgdCwgbikge1xyXG4gICAgICAgICAgICAodCA9IG4oNCkoITEpKS5wdXNoKFtcclxuICAgICAgICAgICAgICAgIGUuaSxcclxuICAgICAgICAgICAgICAgIFwiLmNvbnRhaW5lcl9fbWFpbi5mbGV4LWNvbHVtbnstd2Via2l0LWJveC1vcmllbnQ6dmVydGljYWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uY29udGFpbmVyX19tYWluIC5jb250YWluZXJfX3ByZWRlZmluZWQtcmFuZ2Vze2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47bWF4LXdpZHRoOjEwMHB4O3dpZHRoOjEwMHB4O2JhY2tncm91bmQ6I2ZmZjtwYWRkaW5nOjVweDstd2Via2l0LWJveC1zaGFkb3c6MCAwIDVweCAjZGRkO2JveC1zaGFkb3c6MCAwIDVweCAjZGRkO2JvcmRlci1yYWRpdXM6M3B4O21hcmdpbjo1cHggM3B4fS5jb250YWluZXJfX21haW4gLmNvbnRhaW5lcl9fcHJlZGVmaW5lZC1yYW5nZXMuZmxleC1yb3d7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDstbXMtZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtZGlyZWN0aW9uOnJvdzstbXMtZmxleC1wYWNrOmRpc3RyaWJ1dGU7anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZDttYXgtd2lkdGg6bm9uZTt3aWR0aDphdXRvfS5jb250YWluZXJfX21haW4gLmNvbnRhaW5lcl9fcHJlZGVmaW5lZC1yYW5nZXM+ZGl2e3BhZGRpbmc6M3B4IDA7Y29sb3I6IzIxOTZGM30uY29udGFpbmVyX19tYWluIC5jb250YWluZXJfX3ByZWRlZmluZWQtcmFuZ2VzPmRpdjpob3ZlcntjdXJzb3I6ZGVmYXVsdDtvcGFjaXR5Oi42fVxcblwiLFxyXG4gICAgICAgICAgICAgICAgXCJcIixcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAodC5sb2NhbHMgPSB7IGNvbnRhaW5lck1haW46IFwiY29udGFpbmVyX19tYWluXCIsIGZsZXhDb2x1bW46IFwiZmxleC1jb2x1bW5cIiwgY29udGFpbmVyUHJlZGVmaW5lZFJhbmdlczogXCJjb250YWluZXJfX3ByZWRlZmluZWQtcmFuZ2VzXCIsIGZsZXhSb3c6IFwiZmxleC1yb3dcIiB9KSxcclxuICAgICAgICAgICAgICAgIChlLmV4cG9ydHMgPSB0KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZ1bmN0aW9uIChlLCB0LCBuKSB7XHJcbiAgICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgKHQudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSAoZnVuY3Rpb24gKGUsIHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGVbMV0gfHwgXCJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGVbM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyKSByZXR1cm4gbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGJ0b2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSAoKGEgPSByKSwgKGMgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShhKSkpKSksIChzID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYykpLCBcIi8qIyBcIi5jb25jYXQocywgXCIgKi9cIikpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHIuc291cmNlcy5tYXAoZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChyLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KGUsIFwiICovXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbbl0uY29uY2F0KGkpLmNvbmNhdChbb10pLmpvaW4oXCJcXG5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhLCBjLCBzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbbl0uam9pbihcIlxcblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRbMl0gPyBcIkBtZWRpYSBcIi5jb25jYXQodFsyXSwgXCIge1wiKS5jb25jYXQobiwgXCJ9XCIpIDogbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAodC5pID0gZnVuY3Rpb24gKGUsIG4sIHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSAmJiAoZSA9IFtbbnVsbCwgZSwgXCJcIl1dKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXNbaV1bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPSBhICYmIChvW2FdID0gITApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGUubGVuZ3RoOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gW10uY29uY2F0KGVbY10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHIgJiYgb1tzWzBdXSkgfHwgKG4gJiYgKHNbMl0gPyAoc1syXSA9IFwiXCIuY29uY2F0KG4sIFwiIGFuZCBcIikuY29uY2F0KHNbMl0pKSA6IChzWzJdID0gbikpLCB0LnB1c2gocykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgdFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZ1bmN0aW9uIChlLCB0LCBuKSB7XHJcbiAgICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICBdKTtcclxufSk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=